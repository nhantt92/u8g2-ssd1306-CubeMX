
SnakeGame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050f8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002990  08005204  08005204  00015204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007b94  08007b94  00017b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007b98  08007b98  00017b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08007b9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000005d8  2000000c  08007ba8  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200005e4  08007ba8  000205e4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0005598b  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000336f  00000000  00000000  000759c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000020d0  00000000  00000000  00078d30  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001f28  00000000  00000000  0007ae00  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00009444  00000000  00000000  0007cd28  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000f517  00000000  00000000  0008616c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00095683  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00008cdc  00000000  00000000  00095700  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000014d  00000000  00000000  0009e3dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080051ec 	.word	0x080051ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080051ec 	.word	0x080051ec

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4a08      	ldr	r2, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000154:	681b      	ldr	r3, [r3, #0]
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f93f 	bl	80003e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f003 f88c 	bl	8003284 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f957 	bl	800044a <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001b4:	f000 f91f 	bl	80003f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	2000044c 	.word	0x2000044c

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	2000044c 	.word	0x2000044c

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad2      	subs	r2, r2, r3
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d3f7      	bcc.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f003 0307 	and.w	r3, r3, #7
 8000262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <NVIC_SetPriorityGrouping+0x44>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000270:	4013      	ands	r3, r2
 8000272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800027c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000286:	4a04      	ldr	r2, [pc, #16]	; (8000298 <NVIC_SetPriorityGrouping+0x44>)
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	60d3      	str	r3, [r2, #12]
}
 800028c:	bf00      	nop
 800028e:	3714      	adds	r7, #20
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <NVIC_GetPriorityGrouping+0x18>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	0a1b      	lsrs	r3, r3, #8
 80002a6:	f003 0307 	and.w	r3, r3, #7
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002c2:	4908      	ldr	r1, [pc, #32]	; (80002e4 <NVIC_EnableIRQ+0x2c>)
 80002c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c8:	095b      	lsrs	r3, r3, #5
 80002ca:	79fa      	ldrb	r2, [r7, #7]
 80002cc:	f002 021f 	and.w	r2, r2, #31
 80002d0:	2001      	movs	r0, #1
 80002d2:	fa00 f202 	lsl.w	r2, r0, r2
 80002d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	e000e100 	.word	0xe000e100

080002e8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	4603      	mov	r3, r0
 80002f0:	6039      	str	r1, [r7, #0]
 80002f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80002f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	da0b      	bge.n	8000314 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002fc:	490d      	ldr	r1, [pc, #52]	; (8000334 <NVIC_SetPriority+0x4c>)
 80002fe:	79fb      	ldrb	r3, [r7, #7]
 8000300:	f003 030f 	and.w	r3, r3, #15
 8000304:	3b04      	subs	r3, #4
 8000306:	683a      	ldr	r2, [r7, #0]
 8000308:	b2d2      	uxtb	r2, r2
 800030a:	0112      	lsls	r2, r2, #4
 800030c:	b2d2      	uxtb	r2, r2
 800030e:	440b      	add	r3, r1
 8000310:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000312:	e009      	b.n	8000328 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000314:	4908      	ldr	r1, [pc, #32]	; (8000338 <NVIC_SetPriority+0x50>)
 8000316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031a:	683a      	ldr	r2, [r7, #0]
 800031c:	b2d2      	uxtb	r2, r2
 800031e:	0112      	lsls	r2, r2, #4
 8000320:	b2d2      	uxtb	r2, r2
 8000322:	440b      	add	r3, r1
 8000324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000328:	bf00      	nop
 800032a:	370c      	adds	r7, #12
 800032c:	46bd      	mov	sp, r7
 800032e:	bc80      	pop	{r7}
 8000330:	4770      	bx	lr
 8000332:	bf00      	nop
 8000334:	e000ed00 	.word	0xe000ed00
 8000338:	e000e100 	.word	0xe000e100

0800033c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800033c:	b480      	push	{r7}
 800033e:	b089      	sub	sp, #36	; 0x24
 8000340:	af00      	add	r7, sp, #0
 8000342:	60f8      	str	r0, [r7, #12]
 8000344:	60b9      	str	r1, [r7, #8]
 8000346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	f003 0307 	and.w	r3, r3, #7
 800034e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000350:	69fb      	ldr	r3, [r7, #28]
 8000352:	f1c3 0307 	rsb	r3, r3, #7
 8000356:	2b04      	cmp	r3, #4
 8000358:	bf28      	it	cs
 800035a:	2304      	movcs	r3, #4
 800035c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800035e:	69fb      	ldr	r3, [r7, #28]
 8000360:	3304      	adds	r3, #4
 8000362:	2b06      	cmp	r3, #6
 8000364:	d902      	bls.n	800036c <NVIC_EncodePriority+0x30>
 8000366:	69fb      	ldr	r3, [r7, #28]
 8000368:	3b03      	subs	r3, #3
 800036a:	e000      	b.n	800036e <NVIC_EncodePriority+0x32>
 800036c:	2300      	movs	r3, #0
 800036e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000370:	2201      	movs	r2, #1
 8000372:	69bb      	ldr	r3, [r7, #24]
 8000374:	fa02 f303 	lsl.w	r3, r2, r3
 8000378:	1e5a      	subs	r2, r3, #1
 800037a:	68bb      	ldr	r3, [r7, #8]
 800037c:	401a      	ands	r2, r3
 800037e:	697b      	ldr	r3, [r7, #20]
 8000380:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000382:	2101      	movs	r1, #1
 8000384:	697b      	ldr	r3, [r7, #20]
 8000386:	fa01 f303 	lsl.w	r3, r1, r3
 800038a:	1e59      	subs	r1, r3, #1
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000390:	4313      	orrs	r3, r2
         );
}
 8000392:	4618      	mov	r0, r3
 8000394:	3724      	adds	r7, #36	; 0x24
 8000396:	46bd      	mov	sp, r7
 8000398:	bc80      	pop	{r7}
 800039a:	4770      	bx	lr

0800039c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	3b01      	subs	r3, #1
 80003a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003ac:	d301      	bcc.n	80003b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003ae:	2301      	movs	r3, #1
 80003b0:	e00f      	b.n	80003d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003b2:	4a0a      	ldr	r2, [pc, #40]	; (80003dc <SysTick_Config+0x40>)
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	3b01      	subs	r3, #1
 80003b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003ba:	210f      	movs	r1, #15
 80003bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80003c0:	f7ff ff92 	bl	80002e8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003c4:	4b05      	ldr	r3, [pc, #20]	; (80003dc <SysTick_Config+0x40>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003ca:	4b04      	ldr	r3, [pc, #16]	; (80003dc <SysTick_Config+0x40>)
 80003cc:	2207      	movs	r2, #7
 80003ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003d0:	2300      	movs	r3, #0
}
 80003d2:	4618      	mov	r0, r3
 80003d4:	3708      	adds	r7, #8
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	e000e010 	.word	0xe000e010

080003e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003e8:	6878      	ldr	r0, [r7, #4]
 80003ea:	f7ff ff33 	bl	8000254 <NVIC_SetPriorityGrouping>
}
 80003ee:	bf00      	nop
 80003f0:	3708      	adds	r7, #8
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}

080003f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003f6:	b580      	push	{r7, lr}
 80003f8:	b086      	sub	sp, #24
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	4603      	mov	r3, r0
 80003fe:	60b9      	str	r1, [r7, #8]
 8000400:	607a      	str	r2, [r7, #4]
 8000402:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000404:	2300      	movs	r3, #0
 8000406:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000408:	f7ff ff48 	bl	800029c <NVIC_GetPriorityGrouping>
 800040c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800040e:	687a      	ldr	r2, [r7, #4]
 8000410:	68b9      	ldr	r1, [r7, #8]
 8000412:	6978      	ldr	r0, [r7, #20]
 8000414:	f7ff ff92 	bl	800033c <NVIC_EncodePriority>
 8000418:	4602      	mov	r2, r0
 800041a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800041e:	4611      	mov	r1, r2
 8000420:	4618      	mov	r0, r3
 8000422:	f7ff ff61 	bl	80002e8 <NVIC_SetPriority>
}
 8000426:	bf00      	nop
 8000428:	3718      	adds	r7, #24
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}

0800042e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800042e:	b580      	push	{r7, lr}
 8000430:	b082      	sub	sp, #8
 8000432:	af00      	add	r7, sp, #0
 8000434:	4603      	mov	r3, r0
 8000436:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800043c:	4618      	mov	r0, r3
 800043e:	f7ff ff3b 	bl	80002b8 <NVIC_EnableIRQ>
}
 8000442:	bf00      	nop
 8000444:	3708      	adds	r7, #8
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}

0800044a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800044a:	b580      	push	{r7, lr}
 800044c:	b082      	sub	sp, #8
 800044e:	af00      	add	r7, sp, #0
 8000450:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000452:	6878      	ldr	r0, [r7, #4]
 8000454:	f7ff ffa2 	bl	800039c <SysTick_Config>
 8000458:	4603      	mov	r3, r0
}
 800045a:	4618      	mov	r0, r3
 800045c:	3708      	adds	r7, #8
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
	...

08000464 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	2b04      	cmp	r3, #4
 8000470:	d106      	bne.n	8000480 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000472:	4a09      	ldr	r2, [pc, #36]	; (8000498 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000474:	4b08      	ldr	r3, [pc, #32]	; (8000498 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	f043 0304 	orr.w	r3, r3, #4
 800047c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800047e:	e005      	b.n	800048c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000480:	4a05      	ldr	r2, [pc, #20]	; (8000498 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000482:	4b05      	ldr	r3, [pc, #20]	; (8000498 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	f023 0304 	bic.w	r3, r3, #4
 800048a:	6013      	str	r3, [r2, #0]
}
 800048c:	bf00      	nop
 800048e:	370c      	adds	r7, #12
 8000490:	46bd      	mov	sp, r7
 8000492:	bc80      	pop	{r7}
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	e000e010 	.word	0xe000e010

0800049c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80004a0:	f000 f802 	bl	80004a8 <HAL_SYSTICK_Callback>
}
 80004a4:	bf00      	nop
 80004a6:	bd80      	pop	{r7, pc}

080004a8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80004ac:	bf00      	nop
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr

080004b4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b085      	sub	sp, #20
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80004bc:	2300      	movs	r3, #0
 80004be:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d101      	bne.n	80004ca <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80004c6:	2301      	movs	r3, #1
 80004c8:	e04f      	b.n	800056a <HAL_DMA_Init+0xb6>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	461a      	mov	r2, r3
 80004d0:	4b28      	ldr	r3, [pc, #160]	; (8000574 <HAL_DMA_Init+0xc0>)
 80004d2:	4413      	add	r3, r2
 80004d4:	4a28      	ldr	r2, [pc, #160]	; (8000578 <HAL_DMA_Init+0xc4>)
 80004d6:	fba2 2303 	umull	r2, r3, r2, r3
 80004da:	091b      	lsrs	r3, r3, #4
 80004dc:	009a      	lsls	r2, r3, #2
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4a25      	ldr	r2, [pc, #148]	; (800057c <HAL_DMA_Init+0xc8>)
 80004e6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2202      	movs	r2, #2
 80004ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80004fe:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000502:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800050c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	68db      	ldr	r3, [r3, #12]
 8000512:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000518:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	695b      	ldr	r3, [r3, #20]
 800051e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000524:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	69db      	ldr	r3, [r3, #28]
 800052a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800052c:	68fa      	ldr	r2, [r7, #12]
 800052e:	4313      	orrs	r3, r2
 8000530:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	68fa      	ldr	r2, [r7, #12]
 8000538:	601a      	str	r2, [r3, #0]


  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2200      	movs	r2, #0
 800053e:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2200      	movs	r2, #0
 8000544:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	2200      	movs	r2, #0
 800054a:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	2200      	movs	r2, #0
 8000550:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2200      	movs	r2, #0
 8000556:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	2201      	movs	r2, #1
 800055c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2200      	movs	r2, #0
 8000564:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000568:	2300      	movs	r3, #0
}
 800056a:	4618      	mov	r0, r3
 800056c:	3714      	adds	r7, #20
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr
 8000574:	bffdfff8 	.word	0xbffdfff8
 8000578:	cccccccd 	.word	0xcccccccd
 800057c:	40020000 	.word	0x40020000

08000580 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
 800058c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800058e:	2300      	movs	r3, #0
 8000590:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000598:	2b01      	cmp	r3, #1
 800059a:	d101      	bne.n	80005a0 <HAL_DMA_Start_IT+0x20>
 800059c:	2302      	movs	r3, #2
 800059e:	e04a      	b.n	8000636 <HAL_DMA_Start_IT+0xb6>
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	2201      	movs	r2, #1
 80005a4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d13a      	bne.n	8000628 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	2202      	movs	r2, #2
 80005b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	2200      	movs	r2, #0
 80005be:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	68fa      	ldr	r2, [r7, #12]
 80005c6:	6812      	ldr	r2, [r2, #0]
 80005c8:	6812      	ldr	r2, [r2, #0]
 80005ca:	f022 0201 	bic.w	r2, r2, #1
 80005ce:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	68b9      	ldr	r1, [r7, #8]
 80005d6:	68f8      	ldr	r0, [r7, #12]
 80005d8:	f000 f9c0 	bl	800095c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d008      	beq.n	80005f6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	68fa      	ldr	r2, [r7, #12]
 80005ea:	6812      	ldr	r2, [r2, #0]
 80005ec:	6812      	ldr	r2, [r2, #0]
 80005ee:	f042 020e 	orr.w	r2, r2, #14
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	e00f      	b.n	8000616 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	68fa      	ldr	r2, [r7, #12]
 80005fc:	6812      	ldr	r2, [r2, #0]
 80005fe:	6812      	ldr	r2, [r2, #0]
 8000600:	f022 0204 	bic.w	r2, r2, #4
 8000604:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	68fa      	ldr	r2, [r7, #12]
 800060c:	6812      	ldr	r2, [r2, #0]
 800060e:	6812      	ldr	r2, [r2, #0]
 8000610:	f042 020a 	orr.w	r2, r2, #10
 8000614:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	6812      	ldr	r2, [r2, #0]
 800061e:	6812      	ldr	r2, [r2, #0]
 8000620:	f042 0201 	orr.w	r2, r2, #1
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	e005      	b.n	8000634 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	2200      	movs	r2, #0
 800062c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000630:	2302      	movs	r3, #2
 8000632:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000634:	7dfb      	ldrb	r3, [r7, #23]
}
 8000636:	4618      	mov	r0, r3
 8000638:	3718      	adds	r7, #24
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
	...

08000640 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000648:	2300      	movs	r3, #0
 800064a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000652:	2b02      	cmp	r3, #2
 8000654:	d005      	beq.n	8000662 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2204      	movs	r2, #4
 800065a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800065c:	2301      	movs	r3, #1
 800065e:	73fb      	strb	r3, [r7, #15]
 8000660:	e057      	b.n	8000712 <HAL_DMA_Abort_IT+0xd2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	6812      	ldr	r2, [r2, #0]
 800066a:	6812      	ldr	r2, [r2, #0]
 800066c:	f022 020e 	bic.w	r2, r2, #14
 8000670:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	687a      	ldr	r2, [r7, #4]
 8000678:	6812      	ldr	r2, [r2, #0]
 800067a:	6812      	ldr	r2, [r2, #0]
 800067c:	f022 0201 	bic.w	r2, r2, #1
 8000680:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000682:	4a26      	ldr	r2, [pc, #152]	; (800071c <HAL_DMA_Abort_IT+0xdc>)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4619      	mov	r1, r3
 800068a:	4b25      	ldr	r3, [pc, #148]	; (8000720 <HAL_DMA_Abort_IT+0xe0>)
 800068c:	4299      	cmp	r1, r3
 800068e:	d02e      	beq.n	80006ee <HAL_DMA_Abort_IT+0xae>
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4619      	mov	r1, r3
 8000696:	4b23      	ldr	r3, [pc, #140]	; (8000724 <HAL_DMA_Abort_IT+0xe4>)
 8000698:	4299      	cmp	r1, r3
 800069a:	d026      	beq.n	80006ea <HAL_DMA_Abort_IT+0xaa>
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4619      	mov	r1, r3
 80006a2:	4b21      	ldr	r3, [pc, #132]	; (8000728 <HAL_DMA_Abort_IT+0xe8>)
 80006a4:	4299      	cmp	r1, r3
 80006a6:	d01d      	beq.n	80006e4 <HAL_DMA_Abort_IT+0xa4>
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4619      	mov	r1, r3
 80006ae:	4b1f      	ldr	r3, [pc, #124]	; (800072c <HAL_DMA_Abort_IT+0xec>)
 80006b0:	4299      	cmp	r1, r3
 80006b2:	d014      	beq.n	80006de <HAL_DMA_Abort_IT+0x9e>
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4619      	mov	r1, r3
 80006ba:	4b1d      	ldr	r3, [pc, #116]	; (8000730 <HAL_DMA_Abort_IT+0xf0>)
 80006bc:	4299      	cmp	r1, r3
 80006be:	d00b      	beq.n	80006d8 <HAL_DMA_Abort_IT+0x98>
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4619      	mov	r1, r3
 80006c6:	4b1b      	ldr	r3, [pc, #108]	; (8000734 <HAL_DMA_Abort_IT+0xf4>)
 80006c8:	4299      	cmp	r1, r3
 80006ca:	d102      	bne.n	80006d2 <HAL_DMA_Abort_IT+0x92>
 80006cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80006d0:	e00e      	b.n	80006f0 <HAL_DMA_Abort_IT+0xb0>
 80006d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80006d6:	e00b      	b.n	80006f0 <HAL_DMA_Abort_IT+0xb0>
 80006d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006dc:	e008      	b.n	80006f0 <HAL_DMA_Abort_IT+0xb0>
 80006de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e2:	e005      	b.n	80006f0 <HAL_DMA_Abort_IT+0xb0>
 80006e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006e8:	e002      	b.n	80006f0 <HAL_DMA_Abort_IT+0xb0>
 80006ea:	2310      	movs	r3, #16
 80006ec:	e000      	b.n	80006f0 <HAL_DMA_Abort_IT+0xb0>
 80006ee:	2301      	movs	r3, #1
 80006f0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	2201      	movs	r2, #1
 80006f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	2200      	movs	r2, #0
 80006fe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000706:	2b00      	cmp	r3, #0
 8000708:	d003      	beq.n	8000712 <HAL_DMA_Abort_IT+0xd2>
    {
      hdma->XferAbortCallback(hdma);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	4798      	blx	r3
    } 
  }
  return status;
 8000712:	7bfb      	ldrb	r3, [r7, #15]
}
 8000714:	4618      	mov	r0, r3
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40020000 	.word	0x40020000
 8000720:	40020008 	.word	0x40020008
 8000724:	4002001c 	.word	0x4002001c
 8000728:	40020030 	.word	0x40020030
 800072c:	40020044 	.word	0x40020044
 8000730:	40020058 	.word	0x40020058
 8000734:	4002006c 	.word	0x4002006c

08000738 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000754:	2204      	movs	r2, #4
 8000756:	409a      	lsls	r2, r3
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	4013      	ands	r3, r2
 800075c:	2b00      	cmp	r3, #0
 800075e:	d055      	beq.n	800080c <HAL_DMA_IRQHandler+0xd4>
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	f003 0304 	and.w	r3, r3, #4
 8000766:	2b00      	cmp	r3, #0
 8000768:	d050      	beq.n	800080c <HAL_DMA_IRQHandler+0xd4>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f003 0320 	and.w	r3, r3, #32
 8000774:	2b00      	cmp	r3, #0
 8000776:	d107      	bne.n	8000788 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	6812      	ldr	r2, [r2, #0]
 8000780:	6812      	ldr	r2, [r2, #0]
 8000782:	f022 0204 	bic.w	r2, r2, #4
 8000786:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000788:	4a6d      	ldr	r2, [pc, #436]	; (8000940 <HAL_DMA_IRQHandler+0x208>)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4619      	mov	r1, r3
 8000790:	4b6c      	ldr	r3, [pc, #432]	; (8000944 <HAL_DMA_IRQHandler+0x20c>)
 8000792:	4299      	cmp	r1, r3
 8000794:	d02e      	beq.n	80007f4 <HAL_DMA_IRQHandler+0xbc>
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4619      	mov	r1, r3
 800079c:	4b6a      	ldr	r3, [pc, #424]	; (8000948 <HAL_DMA_IRQHandler+0x210>)
 800079e:	4299      	cmp	r1, r3
 80007a0:	d026      	beq.n	80007f0 <HAL_DMA_IRQHandler+0xb8>
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4619      	mov	r1, r3
 80007a8:	4b68      	ldr	r3, [pc, #416]	; (800094c <HAL_DMA_IRQHandler+0x214>)
 80007aa:	4299      	cmp	r1, r3
 80007ac:	d01d      	beq.n	80007ea <HAL_DMA_IRQHandler+0xb2>
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4619      	mov	r1, r3
 80007b4:	4b66      	ldr	r3, [pc, #408]	; (8000950 <HAL_DMA_IRQHandler+0x218>)
 80007b6:	4299      	cmp	r1, r3
 80007b8:	d014      	beq.n	80007e4 <HAL_DMA_IRQHandler+0xac>
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4619      	mov	r1, r3
 80007c0:	4b64      	ldr	r3, [pc, #400]	; (8000954 <HAL_DMA_IRQHandler+0x21c>)
 80007c2:	4299      	cmp	r1, r3
 80007c4:	d00b      	beq.n	80007de <HAL_DMA_IRQHandler+0xa6>
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4619      	mov	r1, r3
 80007cc:	4b62      	ldr	r3, [pc, #392]	; (8000958 <HAL_DMA_IRQHandler+0x220>)
 80007ce:	4299      	cmp	r1, r3
 80007d0:	d102      	bne.n	80007d8 <HAL_DMA_IRQHandler+0xa0>
 80007d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007d6:	e00e      	b.n	80007f6 <HAL_DMA_IRQHandler+0xbe>
 80007d8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80007dc:	e00b      	b.n	80007f6 <HAL_DMA_IRQHandler+0xbe>
 80007de:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80007e2:	e008      	b.n	80007f6 <HAL_DMA_IRQHandler+0xbe>
 80007e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007e8:	e005      	b.n	80007f6 <HAL_DMA_IRQHandler+0xbe>
 80007ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ee:	e002      	b.n	80007f6 <HAL_DMA_IRQHandler+0xbe>
 80007f0:	2340      	movs	r3, #64	; 0x40
 80007f2:	e000      	b.n	80007f6 <HAL_DMA_IRQHandler+0xbe>
 80007f4:	2304      	movs	r3, #4
 80007f6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	f000 809a 	beq.w	8000936 <HAL_DMA_IRQHandler+0x1fe>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800080a:	e094      	b.n	8000936 <HAL_DMA_IRQHandler+0x1fe>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000810:	2202      	movs	r2, #2
 8000812:	409a      	lsls	r2, r3
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	4013      	ands	r3, r2
 8000818:	2b00      	cmp	r3, #0
 800081a:	d05c      	beq.n	80008d6 <HAL_DMA_IRQHandler+0x19e>
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	f003 0302 	and.w	r3, r3, #2
 8000822:	2b00      	cmp	r3, #0
 8000824:	d057      	beq.n	80008d6 <HAL_DMA_IRQHandler+0x19e>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f003 0320 	and.w	r3, r3, #32
 8000830:	2b00      	cmp	r3, #0
 8000832:	d10b      	bne.n	800084c <HAL_DMA_IRQHandler+0x114>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	687a      	ldr	r2, [r7, #4]
 800083a:	6812      	ldr	r2, [r2, #0]
 800083c:	6812      	ldr	r2, [r2, #0]
 800083e:	f022 020a 	bic.w	r2, r2, #10
 8000842:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2201      	movs	r2, #1
 8000848:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800084c:	4a3c      	ldr	r2, [pc, #240]	; (8000940 <HAL_DMA_IRQHandler+0x208>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4619      	mov	r1, r3
 8000854:	4b3b      	ldr	r3, [pc, #236]	; (8000944 <HAL_DMA_IRQHandler+0x20c>)
 8000856:	4299      	cmp	r1, r3
 8000858:	d02e      	beq.n	80008b8 <HAL_DMA_IRQHandler+0x180>
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4619      	mov	r1, r3
 8000860:	4b39      	ldr	r3, [pc, #228]	; (8000948 <HAL_DMA_IRQHandler+0x210>)
 8000862:	4299      	cmp	r1, r3
 8000864:	d026      	beq.n	80008b4 <HAL_DMA_IRQHandler+0x17c>
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4619      	mov	r1, r3
 800086c:	4b37      	ldr	r3, [pc, #220]	; (800094c <HAL_DMA_IRQHandler+0x214>)
 800086e:	4299      	cmp	r1, r3
 8000870:	d01d      	beq.n	80008ae <HAL_DMA_IRQHandler+0x176>
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4619      	mov	r1, r3
 8000878:	4b35      	ldr	r3, [pc, #212]	; (8000950 <HAL_DMA_IRQHandler+0x218>)
 800087a:	4299      	cmp	r1, r3
 800087c:	d014      	beq.n	80008a8 <HAL_DMA_IRQHandler+0x170>
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4619      	mov	r1, r3
 8000884:	4b33      	ldr	r3, [pc, #204]	; (8000954 <HAL_DMA_IRQHandler+0x21c>)
 8000886:	4299      	cmp	r1, r3
 8000888:	d00b      	beq.n	80008a2 <HAL_DMA_IRQHandler+0x16a>
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4619      	mov	r1, r3
 8000890:	4b31      	ldr	r3, [pc, #196]	; (8000958 <HAL_DMA_IRQHandler+0x220>)
 8000892:	4299      	cmp	r1, r3
 8000894:	d102      	bne.n	800089c <HAL_DMA_IRQHandler+0x164>
 8000896:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800089a:	e00e      	b.n	80008ba <HAL_DMA_IRQHandler+0x182>
 800089c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80008a0:	e00b      	b.n	80008ba <HAL_DMA_IRQHandler+0x182>
 80008a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008a6:	e008      	b.n	80008ba <HAL_DMA_IRQHandler+0x182>
 80008a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ac:	e005      	b.n	80008ba <HAL_DMA_IRQHandler+0x182>
 80008ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008b2:	e002      	b.n	80008ba <HAL_DMA_IRQHandler+0x182>
 80008b4:	2320      	movs	r3, #32
 80008b6:	e000      	b.n	80008ba <HAL_DMA_IRQHandler+0x182>
 80008b8:	2302      	movs	r3, #2
 80008ba:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2200      	movs	r2, #0
 80008c0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d034      	beq.n	8000936 <HAL_DMA_IRQHandler+0x1fe>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008d0:	6878      	ldr	r0, [r7, #4]
 80008d2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80008d4:	e02f      	b.n	8000936 <HAL_DMA_IRQHandler+0x1fe>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008da:	2208      	movs	r2, #8
 80008dc:	409a      	lsls	r2, r3
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	4013      	ands	r3, r2
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d028      	beq.n	8000938 <HAL_DMA_IRQHandler+0x200>
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	f003 0308 	and.w	r3, r3, #8
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d023      	beq.n	8000938 <HAL_DMA_IRQHandler+0x200>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	687a      	ldr	r2, [r7, #4]
 80008f6:	6812      	ldr	r2, [r2, #0]
 80008f8:	6812      	ldr	r2, [r2, #0]
 80008fa:	f022 020e 	bic.w	r2, r2, #14
 80008fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000904:	687a      	ldr	r2, [r7, #4]
 8000906:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000908:	2101      	movs	r1, #1
 800090a:	fa01 f202 	lsl.w	r2, r1, r2
 800090e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2201      	movs	r2, #1
 8000914:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2201      	movs	r2, #1
 800091a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2200      	movs	r2, #0
 8000922:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	2b00      	cmp	r3, #0
 800092c:	d004      	beq.n	8000938 <HAL_DMA_IRQHandler+0x200>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	4798      	blx	r3
    }
  }
  return;
 8000936:	bf00      	nop
 8000938:	bf00      	nop
}
 800093a:	3710      	adds	r7, #16
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40020000 	.word	0x40020000
 8000944:	40020008 	.word	0x40020008
 8000948:	4002001c 	.word	0x4002001c
 800094c:	40020030 	.word	0x40020030
 8000950:	40020044 	.word	0x40020044
 8000954:	40020058 	.word	0x40020058
 8000958:	4002006c 	.word	0x4002006c

0800095c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
 8000968:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800096e:	68fa      	ldr	r2, [r7, #12]
 8000970:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000972:	2101      	movs	r1, #1
 8000974:	fa01 f202 	lsl.w	r2, r1, r2
 8000978:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	683a      	ldr	r2, [r7, #0]
 8000980:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	2b10      	cmp	r3, #16
 8000988:	d108      	bne.n	800099c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	68ba      	ldr	r2, [r7, #8]
 8000998:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800099a:	e007      	b.n	80009ac <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	68ba      	ldr	r2, [r7, #8]
 80009a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	687a      	ldr	r2, [r7, #4]
 80009aa:	60da      	str	r2, [r3, #12]
}
 80009ac:	bf00      	nop
 80009ae:	3714      	adds	r7, #20
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bc80      	pop	{r7}
 80009b4:	4770      	bx	lr
	...

080009b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b08b      	sub	sp, #44	; 0x2c
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 80009ca:	2300      	movs	r3, #0
 80009cc:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 80009ce:	2300      	movs	r3, #0
 80009d0:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
 80009da:	e127      	b.n	8000c2c <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 80009dc:	2201      	movs	r2, #1
 80009de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e0:	fa02 f303 	lsl.w	r3, r2, r3
 80009e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	4013      	ands	r3, r2
 80009ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009f0:	69ba      	ldr	r2, [r7, #24]
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	f040 8116 	bne.w	8000c26 <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	2b12      	cmp	r3, #18
 8000a00:	d034      	beq.n	8000a6c <HAL_GPIO_Init+0xb4>
 8000a02:	2b12      	cmp	r3, #18
 8000a04:	d80d      	bhi.n	8000a22 <HAL_GPIO_Init+0x6a>
 8000a06:	2b02      	cmp	r3, #2
 8000a08:	d02b      	beq.n	8000a62 <HAL_GPIO_Init+0xaa>
 8000a0a:	2b02      	cmp	r3, #2
 8000a0c:	d804      	bhi.n	8000a18 <HAL_GPIO_Init+0x60>
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d031      	beq.n	8000a76 <HAL_GPIO_Init+0xbe>
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d01c      	beq.n	8000a50 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a16:	e048      	b.n	8000aaa <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000a18:	2b03      	cmp	r3, #3
 8000a1a:	d043      	beq.n	8000aa4 <HAL_GPIO_Init+0xec>
 8000a1c:	2b11      	cmp	r3, #17
 8000a1e:	d01b      	beq.n	8000a58 <HAL_GPIO_Init+0xa0>
          break;
 8000a20:	e043      	b.n	8000aaa <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000a22:	4a87      	ldr	r2, [pc, #540]	; (8000c40 <HAL_GPIO_Init+0x288>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d026      	beq.n	8000a76 <HAL_GPIO_Init+0xbe>
 8000a28:	4a85      	ldr	r2, [pc, #532]	; (8000c40 <HAL_GPIO_Init+0x288>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d806      	bhi.n	8000a3c <HAL_GPIO_Init+0x84>
 8000a2e:	4a85      	ldr	r2, [pc, #532]	; (8000c44 <HAL_GPIO_Init+0x28c>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d020      	beq.n	8000a76 <HAL_GPIO_Init+0xbe>
 8000a34:	4a84      	ldr	r2, [pc, #528]	; (8000c48 <HAL_GPIO_Init+0x290>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d01d      	beq.n	8000a76 <HAL_GPIO_Init+0xbe>
          break;
 8000a3a:	e036      	b.n	8000aaa <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000a3c:	4a83      	ldr	r2, [pc, #524]	; (8000c4c <HAL_GPIO_Init+0x294>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d019      	beq.n	8000a76 <HAL_GPIO_Init+0xbe>
 8000a42:	4a83      	ldr	r2, [pc, #524]	; (8000c50 <HAL_GPIO_Init+0x298>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d016      	beq.n	8000a76 <HAL_GPIO_Init+0xbe>
 8000a48:	4a82      	ldr	r2, [pc, #520]	; (8000c54 <HAL_GPIO_Init+0x29c>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d013      	beq.n	8000a76 <HAL_GPIO_Init+0xbe>
          break;
 8000a4e:	e02c      	b.n	8000aaa <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	623b      	str	r3, [r7, #32]
          break;
 8000a56:	e028      	b.n	8000aaa <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	623b      	str	r3, [r7, #32]
          break;
 8000a60:	e023      	b.n	8000aaa <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	68db      	ldr	r3, [r3, #12]
 8000a66:	3308      	adds	r3, #8
 8000a68:	623b      	str	r3, [r7, #32]
          break;
 8000a6a:	e01e      	b.n	8000aaa <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	330c      	adds	r3, #12
 8000a72:	623b      	str	r3, [r7, #32]
          break;
 8000a74:	e019      	b.n	8000aaa <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	689b      	ldr	r3, [r3, #8]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d102      	bne.n	8000a84 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a7e:	2304      	movs	r3, #4
 8000a80:	623b      	str	r3, [r7, #32]
          break;
 8000a82:	e012      	b.n	8000aaa <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d105      	bne.n	8000a98 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a8c:	2308      	movs	r3, #8
 8000a8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	69fa      	ldr	r2, [r7, #28]
 8000a94:	611a      	str	r2, [r3, #16]
          break;
 8000a96:	e008      	b.n	8000aaa <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a98:	2308      	movs	r3, #8
 8000a9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	69fa      	ldr	r2, [r7, #28]
 8000aa0:	615a      	str	r2, [r3, #20]
          break;
 8000aa2:	e002      	b.n	8000aaa <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
          break;
 8000aa8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	2bff      	cmp	r3, #255	; 0xff
 8000aae:	d801      	bhi.n	8000ab4 <HAL_GPIO_Init+0xfc>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	e001      	b.n	8000ab8 <HAL_GPIO_Init+0x100>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	3304      	adds	r3, #4
 8000ab8:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000aba:	69bb      	ldr	r3, [r7, #24]
 8000abc:	2bff      	cmp	r3, #255	; 0xff
 8000abe:	d802      	bhi.n	8000ac6 <HAL_GPIO_Init+0x10e>
 8000ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	e002      	b.n	8000acc <HAL_GPIO_Init+0x114>
 8000ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac8:	3b08      	subs	r3, #8
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	210f      	movs	r1, #15
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ada:	43db      	mvns	r3, r3
 8000adc:	401a      	ands	r2, r3
 8000ade:	6a39      	ldr	r1, [r7, #32]
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae6:	431a      	orrs	r2, r3
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	f000 8096 	beq.w	8000c26 <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000afa:	4a57      	ldr	r2, [pc, #348]	; (8000c58 <HAL_GPIO_Init+0x2a0>)
 8000afc:	4b56      	ldr	r3, [pc, #344]	; (8000c58 <HAL_GPIO_Init+0x2a0>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	6193      	str	r3, [r2, #24]
 8000b06:	4b54      	ldr	r3, [pc, #336]	; (8000c58 <HAL_GPIO_Init+0x2a0>)
 8000b08:	699b      	ldr	r3, [r3, #24]
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8000b12:	4a52      	ldr	r2, [pc, #328]	; (8000c5c <HAL_GPIO_Init+0x2a4>)
 8000b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b16:	089b      	lsrs	r3, r3, #2
 8000b18:	3302      	adds	r3, #2
 8000b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b1e:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b22:	f003 0303 	and.w	r3, r3, #3
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	220f      	movs	r2, #15
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	43db      	mvns	r3, r3
 8000b30:	697a      	ldr	r2, [r7, #20]
 8000b32:	4013      	ands	r3, r2
 8000b34:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4a49      	ldr	r2, [pc, #292]	; (8000c60 <HAL_GPIO_Init+0x2a8>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d013      	beq.n	8000b66 <HAL_GPIO_Init+0x1ae>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4a48      	ldr	r2, [pc, #288]	; (8000c64 <HAL_GPIO_Init+0x2ac>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d00d      	beq.n	8000b62 <HAL_GPIO_Init+0x1aa>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4a47      	ldr	r2, [pc, #284]	; (8000c68 <HAL_GPIO_Init+0x2b0>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d007      	beq.n	8000b5e <HAL_GPIO_Init+0x1a6>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4a46      	ldr	r2, [pc, #280]	; (8000c6c <HAL_GPIO_Init+0x2b4>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d101      	bne.n	8000b5a <HAL_GPIO_Init+0x1a2>
 8000b56:	2303      	movs	r3, #3
 8000b58:	e006      	b.n	8000b68 <HAL_GPIO_Init+0x1b0>
 8000b5a:	2304      	movs	r3, #4
 8000b5c:	e004      	b.n	8000b68 <HAL_GPIO_Init+0x1b0>
 8000b5e:	2302      	movs	r3, #2
 8000b60:	e002      	b.n	8000b68 <HAL_GPIO_Init+0x1b0>
 8000b62:	2301      	movs	r3, #1
 8000b64:	e000      	b.n	8000b68 <HAL_GPIO_Init+0x1b0>
 8000b66:	2300      	movs	r3, #0
 8000b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b6a:	f002 0203 	and.w	r2, r2, #3
 8000b6e:	0092      	lsls	r2, r2, #2
 8000b70:	4093      	lsls	r3, r2
 8000b72:	697a      	ldr	r2, [r7, #20]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8000b78:	4938      	ldr	r1, [pc, #224]	; (8000c5c <HAL_GPIO_Init+0x2a4>)
 8000b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7c:	089b      	lsrs	r3, r3, #2
 8000b7e:	3302      	adds	r3, #2
 8000b80:	697a      	ldr	r2, [r7, #20]
 8000b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d006      	beq.n	8000ba0 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b92:	4937      	ldr	r1, [pc, #220]	; (8000c70 <HAL_GPIO_Init+0x2b8>)
 8000b94:	4b36      	ldr	r3, [pc, #216]	; (8000c70 <HAL_GPIO_Init+0x2b8>)
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	69bb      	ldr	r3, [r7, #24]
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	600b      	str	r3, [r1, #0]
 8000b9e:	e006      	b.n	8000bae <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ba0:	4933      	ldr	r1, [pc, #204]	; (8000c70 <HAL_GPIO_Init+0x2b8>)
 8000ba2:	4b33      	ldr	r3, [pc, #204]	; (8000c70 <HAL_GPIO_Init+0x2b8>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	69bb      	ldr	r3, [r7, #24]
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	4013      	ands	r3, r2
 8000bac:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d006      	beq.n	8000bc8 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bba:	492d      	ldr	r1, [pc, #180]	; (8000c70 <HAL_GPIO_Init+0x2b8>)
 8000bbc:	4b2c      	ldr	r3, [pc, #176]	; (8000c70 <HAL_GPIO_Init+0x2b8>)
 8000bbe:	685a      	ldr	r2, [r3, #4]
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	604b      	str	r3, [r1, #4]
 8000bc6:	e006      	b.n	8000bd6 <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bc8:	4929      	ldr	r1, [pc, #164]	; (8000c70 <HAL_GPIO_Init+0x2b8>)
 8000bca:	4b29      	ldr	r3, [pc, #164]	; (8000c70 <HAL_GPIO_Init+0x2b8>)
 8000bcc:	685a      	ldr	r2, [r3, #4]
 8000bce:	69bb      	ldr	r3, [r7, #24]
 8000bd0:	43db      	mvns	r3, r3
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d006      	beq.n	8000bf0 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000be2:	4923      	ldr	r1, [pc, #140]	; (8000c70 <HAL_GPIO_Init+0x2b8>)
 8000be4:	4b22      	ldr	r3, [pc, #136]	; (8000c70 <HAL_GPIO_Init+0x2b8>)
 8000be6:	689a      	ldr	r2, [r3, #8]
 8000be8:	69bb      	ldr	r3, [r7, #24]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	608b      	str	r3, [r1, #8]
 8000bee:	e006      	b.n	8000bfe <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bf0:	491f      	ldr	r1, [pc, #124]	; (8000c70 <HAL_GPIO_Init+0x2b8>)
 8000bf2:	4b1f      	ldr	r3, [pc, #124]	; (8000c70 <HAL_GPIO_Init+0x2b8>)
 8000bf4:	689a      	ldr	r2, [r3, #8]
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	43db      	mvns	r3, r3
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d006      	beq.n	8000c18 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c0a:	4919      	ldr	r1, [pc, #100]	; (8000c70 <HAL_GPIO_Init+0x2b8>)
 8000c0c:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <HAL_GPIO_Init+0x2b8>)
 8000c0e:	68da      	ldr	r2, [r3, #12]
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	60cb      	str	r3, [r1, #12]
 8000c16:	e006      	b.n	8000c26 <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c18:	4915      	ldr	r1, [pc, #84]	; (8000c70 <HAL_GPIO_Init+0x2b8>)
 8000c1a:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <HAL_GPIO_Init+0x2b8>)
 8000c1c:	68da      	ldr	r2, [r3, #12]
 8000c1e:	69bb      	ldr	r3, [r7, #24]
 8000c20:	43db      	mvns	r3, r3
 8000c22:	4013      	ands	r3, r2
 8000c24:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c28:	3301      	adds	r3, #1
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8000c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2e:	2b0f      	cmp	r3, #15
 8000c30:	f67f aed4 	bls.w	80009dc <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000c34:	bf00      	nop
 8000c36:	372c      	adds	r7, #44	; 0x2c
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bc80      	pop	{r7}
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	10210000 	.word	0x10210000
 8000c44:	10110000 	.word	0x10110000
 8000c48:	10120000 	.word	0x10120000
 8000c4c:	10310000 	.word	0x10310000
 8000c50:	10320000 	.word	0x10320000
 8000c54:	10220000 	.word	0x10220000
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	40010000 	.word	0x40010000
 8000c60:	40010800 	.word	0x40010800
 8000c64:	40010c00 	.word	0x40010c00
 8000c68:	40011000 	.word	0x40011000
 8000c6c:	40011400 	.word	0x40011400
 8000c70:	40010400 	.word	0x40010400

08000c74 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8000c80:	2300      	movs	r3, #0
 8000c82:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d101      	bne.n	8000c8e <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e0e7      	b.n	8000e5e <HAL_I2C_Init+0x1ea>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d106      	bne.n	8000ca8 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f002 fb4c 	bl	8003340 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2224      	movs	r2, #36	; 0x24
 8000cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	6812      	ldr	r2, [r2, #0]
 8000cb8:	6812      	ldr	r2, [r2, #0]
 8000cba:	f022 0201 	bic.w	r2, r2, #1
 8000cbe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000cc0:	f002 f854 	bl	8002d6c <HAL_RCC_GetPCLK1Freq>
 8000cc4:	60b8      	str	r0, [r7, #8]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	4a67      	ldr	r2, [pc, #412]	; (8000e68 <HAL_I2C_Init+0x1f4>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d807      	bhi.n	8000ce0 <HAL_I2C_Init+0x6c>
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	4a66      	ldr	r2, [pc, #408]	; (8000e6c <HAL_I2C_Init+0x1f8>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	bf94      	ite	ls
 8000cd8:	2301      	movls	r3, #1
 8000cda:	2300      	movhi	r3, #0
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	e006      	b.n	8000cee <HAL_I2C_Init+0x7a>
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	4a63      	ldr	r2, [pc, #396]	; (8000e70 <HAL_I2C_Init+0x1fc>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	bf94      	ite	ls
 8000ce8:	2301      	movls	r3, #1
 8000cea:	2300      	movhi	r3, #0
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <HAL_I2C_Init+0x82>
  {
    return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e0b3      	b.n	8000e5e <HAL_I2C_Init+0x1ea>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	4a5e      	ldr	r2, [pc, #376]	; (8000e74 <HAL_I2C_Init+0x200>)
 8000cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8000cfe:	0c9b      	lsrs	r3, r3, #18
 8000d00:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	68fa      	ldr	r2, [r7, #12]
 8000d08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	4955      	ldr	r1, [pc, #340]	; (8000e68 <HAL_I2C_Init+0x1f4>)
 8000d14:	428b      	cmp	r3, r1
 8000d16:	d802      	bhi.n	8000d1e <HAL_I2C_Init+0xaa>
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	e009      	b.n	8000d32 <HAL_I2C_Init+0xbe>
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000d24:	fb01 f303 	mul.w	r3, r1, r3
 8000d28:	4953      	ldr	r1, [pc, #332]	; (8000e78 <HAL_I2C_Init+0x204>)
 8000d2a:	fba1 1303 	umull	r1, r3, r1, r3
 8000d2e:	099b      	lsrs	r3, r3, #6
 8000d30:	3301      	adds	r3, #1
 8000d32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6819      	ldr	r1, [r3, #0]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	4a4a      	ldr	r2, [pc, #296]	; (8000e68 <HAL_I2C_Init+0x1f4>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d80d      	bhi.n	8000d5e <HAL_I2C_Init+0xea>
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	1e5a      	subs	r2, r3, #1
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d50:	3301      	adds	r3, #1
 8000d52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d56:	2b04      	cmp	r3, #4
 8000d58:	bf38      	it	cc
 8000d5a:	2304      	movcc	r3, #4
 8000d5c:	e04f      	b.n	8000dfe <HAL_I2C_Init+0x18a>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d111      	bne.n	8000d8a <HAL_I2C_Init+0x116>
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	1e58      	subs	r0, r3, #1
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	685a      	ldr	r2, [r3, #4]
 8000d6e:	4613      	mov	r3, r2
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	4413      	add	r3, r2
 8000d74:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d78:	3301      	adds	r3, #1
 8000d7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	bf0c      	ite	eq
 8000d82:	2301      	moveq	r3, #1
 8000d84:	2300      	movne	r3, #0
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	e012      	b.n	8000db0 <HAL_I2C_Init+0x13c>
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	1e58      	subs	r0, r3, #1
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	685a      	ldr	r2, [r3, #4]
 8000d92:	4613      	mov	r3, r2
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	4413      	add	r3, r2
 8000d98:	009a      	lsls	r2, r3, #2
 8000d9a:	4413      	add	r3, r2
 8000d9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8000da0:	3301      	adds	r3, #1
 8000da2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	bf0c      	ite	eq
 8000daa:	2301      	moveq	r3, #1
 8000dac:	2300      	movne	r3, #0
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <HAL_I2C_Init+0x144>
 8000db4:	2301      	movs	r3, #1
 8000db6:	e022      	b.n	8000dfe <HAL_I2C_Init+0x18a>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d10e      	bne.n	8000dde <HAL_I2C_Init+0x16a>
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	1e58      	subs	r0, r3, #1
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	685a      	ldr	r2, [r3, #4]
 8000dc8:	4613      	mov	r3, r2
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	4413      	add	r3, r2
 8000dce:	fbb0 f3f3 	udiv	r3, r0, r3
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ddc:	e00f      	b.n	8000dfe <HAL_I2C_Init+0x18a>
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	1e58      	subs	r0, r3, #1
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	685a      	ldr	r2, [r3, #4]
 8000de6:	4613      	mov	r3, r2
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	4413      	add	r3, r2
 8000dec:	009a      	lsls	r2, r3, #2
 8000dee:	4413      	add	r3, r2
 8000df0:	fbb0 f3f3 	udiv	r3, r0, r3
 8000df4:	3301      	adds	r3, #1
 8000df6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dfe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	687a      	ldr	r2, [r7, #4]
 8000e06:	69d1      	ldr	r1, [r2, #28]
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	6a12      	ldr	r2, [r2, #32]
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	687a      	ldr	r2, [r7, #4]
 8000e16:	6911      	ldr	r1, [r2, #16]
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	68d2      	ldr	r2, [r2, #12]
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	6951      	ldr	r1, [r2, #20]
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	6992      	ldr	r2, [r2, #24]
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	6812      	ldr	r2, [r2, #0]
 8000e38:	6812      	ldr	r2, [r2, #0]
 8000e3a:	f042 0201 	orr.w	r2, r2, #1
 8000e3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2200      	movs	r2, #0
 8000e44:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2220      	movs	r2, #32
 8000e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2200      	movs	r2, #0
 8000e52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2200      	movs	r2, #0
 8000e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000e5c:	2300      	movs	r3, #0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	000186a0 	.word	0x000186a0
 8000e6c:	001e847f 	.word	0x001e847f
 8000e70:	003d08ff 	.word	0x003d08ff
 8000e74:	431bde83 	.word	0x431bde83
 8000e78:	10624dd3 	.word	0x10624dd3

08000e7c <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	607a      	str	r2, [r7, #4]
 8000e86:	461a      	mov	r2, r3
 8000e88:	460b      	mov	r3, r1
 8000e8a:	817b      	strh	r3, [r7, #10]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8000e90:	2300      	movs	r3, #0
 8000e92:	617b      	str	r3, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	2b20      	cmp	r3, #32
 8000e9e:	f040 80c8 	bne.w	8001032 <HAL_I2C_Master_Transmit_DMA+0x1b6>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 8000ea2:	4b66      	ldr	r3, [pc, #408]	; (800103c <HAL_I2C_Master_Transmit_DMA+0x1c0>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	08db      	lsrs	r3, r3, #3
 8000ea8:	4a65      	ldr	r2, [pc, #404]	; (8001040 <HAL_I2C_Master_Transmit_DMA+0x1c4>)
 8000eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8000eae:	0a1a      	lsrs	r2, r3, #8
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	4413      	add	r3, r2
 8000eb6:	009a      	lsls	r2, r3, #2
 8000eb8:	4413      	add	r3, r2
 8000eba:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	1e5a      	subs	r2, r3, #1
 8000ec0:	617a      	str	r2, [r7, #20]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d10c      	bne.n	8000ee0 <HAL_I2C_Master_Transmit_DMA+0x64>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	2220      	movs	r2, #32
 8000ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT; 
 8000edc:	2303      	movs	r3, #3
 8000ede:	e0a9      	b.n	8001034 <HAL_I2C_Master_Transmit_DMA+0x1b8>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	f003 0302 	and.w	r3, r3, #2
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d0e6      	beq.n	8000ebc <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d101      	bne.n	8000efc <HAL_I2C_Master_Transmit_DMA+0x80>
 8000ef8:	2302      	movs	r3, #2
 8000efa:	e09b      	b.n	8001034 <HAL_I2C_Master_Transmit_DMA+0x1b8>
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	2201      	movs	r2, #1
 8000f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d007      	beq.n	8000f22 <HAL_I2C_Master_Transmit_DMA+0xa6>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	6812      	ldr	r2, [r2, #0]
 8000f1a:	6812      	ldr	r2, [r2, #0]
 8000f1c:	f042 0201 	orr.w	r2, r2, #1
 8000f20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	6812      	ldr	r2, [r2, #0]
 8000f2a:	6812      	ldr	r2, [r2, #0]
 8000f2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f30:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2221      	movs	r2, #33	; 0x21
 8000f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	2210      	movs	r2, #16
 8000f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	2200      	movs	r2, #0
 8000f46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	893a      	ldrh	r2, [r7, #8]
 8000f52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4a3b      	ldr	r2, [pc, #236]	; (8001044 <HAL_I2C_Master_Transmit_DMA+0x1c8>)
 8000f58:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->Devaddress  = DevAddress;
 8000f64:	897a      	ldrh	r2, [r7, #10]
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	645a      	str	r2, [r3, #68]	; 0x44

    if(hi2c->XferSize > 0U)
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d041      	beq.n	8000ff6 <HAL_I2C_Master_Transmit_DMA+0x17a>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f76:	4a34      	ldr	r2, [pc, #208]	; (8001048 <HAL_I2C_Master_Transmit_DMA+0x1cc>)
 8000f78:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */      
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f7e:	4a33      	ldr	r2, [pc, #204]	; (800104c <HAL_I2C_Master_Transmit_DMA+0x1d0>)
 8000f80:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f86:	2200      	movs	r2, #0
 8000f88:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->hdmatx->XferAbortCallback = NULL;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f8e:	2200      	movs	r2, #0
 8000f90:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	3310      	adds	r3, #16
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fa8:	f7ff faea 	bl	8000580 <HAL_DMA_Start_IT>

      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	68fa      	ldr	r2, [r7, #12]
 8000fb2:	6812      	ldr	r2, [r2, #0]
 8000fb4:	6812      	ldr	r2, [r2, #0]
 8000fb6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000fba:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	68fa      	ldr	r2, [r7, #12]
 8000fc2:	6812      	ldr	r2, [r2, #0]
 8000fc4:	6812      	ldr	r2, [r2, #0]
 8000fc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fca:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	68fa      	ldr	r2, [r7, #12]
 8000fda:	6812      	ldr	r2, [r2, #0]
 8000fdc:	6852      	ldr	r2, [r2, #4]
 8000fde:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8000fe2:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	68fa      	ldr	r2, [r7, #12]
 8000fea:	6812      	ldr	r2, [r2, #0]
 8000fec:	6852      	ldr	r2, [r2, #4]
 8000fee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	e01b      	b.n	800102e <HAL_I2C_Master_Transmit_DMA+0x1b2>
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	6812      	ldr	r2, [r2, #0]
 8000ffe:	6812      	ldr	r2, [r2, #0]
 8001000:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001004:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	6812      	ldr	r2, [r2, #0]
 800100e:	6812      	ldr	r2, [r2, #0]
 8001010:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001014:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	2200      	movs	r2, #0
 800101a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

     /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	6812      	ldr	r2, [r2, #0]
 8001026:	6852      	ldr	r2, [r2, #4]
 8001028:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800102c:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 800102e:	2300      	movs	r3, #0
 8001030:	e000      	b.n	8001034 <HAL_I2C_Master_Transmit_DMA+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 8001032:	2302      	movs	r3, #2
  }
}
 8001034:	4618      	mov	r0, r3
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000008 	.word	0x20000008
 8001040:	14f8b589 	.word	0x14f8b589
 8001044:	ffff0000 	.word	0xffff0000
 8001048:	0800240d 	.word	0x0800240d
 800104c:	080024f9 	.word	0x080024f9

08001050 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	617b      	str	r3, [r7, #20]
  uint32_t sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	613b      	str	r3, [r7, #16]
  uint32_t itsources    = READ_REG(hi2c->Instance->CR2);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	60fb      	str	r3, [r7, #12]

  uint32_t CurrentMode  = hi2c->Mode;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001076:	b2db      	uxtb	r3, r3
 8001078:	60bb      	str	r3, [r7, #8]

  /* Master or Memory mode selected */
  if((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	2b10      	cmp	r3, #16
 800107e:	d002      	beq.n	8001086 <HAL_I2C_EV_IRQHandler+0x36>
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	2b40      	cmp	r3, #64	; 0x40
 8001084:	d172      	bne.n	800116c <HAL_I2C_EV_IRQHandler+0x11c>
  {
    /* SB Set ----------------------------------------------------------------*/
    if(((sr1itflags & I2C_FLAG_SB) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
 800108c:	2b00      	cmp	r3, #0
 800108e:	d008      	beq.n	80010a2 <HAL_I2C_EV_IRQHandler+0x52>
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <HAL_I2C_EV_IRQHandler+0x52>
    {
      I2C_Master_SB(hi2c);
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f000 fcaf 	bl	80019fe <I2C_Master_SB>
 80010a0:	e01a      	b.n	80010d8 <HAL_I2C_EV_IRQHandler+0x88>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if(((sr1itflags & I2C_FLAG_ADD10) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4b65      	ldr	r3, [pc, #404]	; (800123c <HAL_I2C_EV_IRQHandler+0x1ec>)
 80010a6:	4013      	ands	r3, r2
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d008      	beq.n	80010be <HAL_I2C_EV_IRQHandler+0x6e>
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <HAL_I2C_EV_IRQHandler+0x6e>
    {
      I2C_Master_ADD10(hi2c);
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f000 fd0b 	bl	8001ad2 <I2C_Master_ADD10>
 80010bc:	e00c      	b.n	80010d8 <HAL_I2C_EV_IRQHandler+0x88>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	4b5f      	ldr	r3, [pc, #380]	; (8001240 <HAL_I2C_EV_IRQHandler+0x1f0>)
 80010c2:	4013      	ands	r3, r2
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d007      	beq.n	80010d8 <HAL_I2C_EV_IRQHandler+0x88>
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d002      	beq.n	80010d8 <HAL_I2C_EV_IRQHandler+0x88>
    {
      I2C_Master_ADDR(hi2c);
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f000 fd0d 	bl	8001af2 <I2C_Master_ADDR>
    }

    /* I2C in mode Transmitter -----------------------------------------------*/
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 80010d8:	697a      	ldr	r2, [r7, #20]
 80010da:	4b5a      	ldr	r3, [pc, #360]	; (8001244 <HAL_I2C_EV_IRQHandler+0x1f4>)
 80010dc:	4013      	ands	r3, r2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d022      	beq.n	8001128 <HAL_I2C_EV_IRQHandler+0xd8>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4b58      	ldr	r3, [pc, #352]	; (8001248 <HAL_I2C_EV_IRQHandler+0x1f8>)
 80010e6:	4013      	ands	r3, r2
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d00d      	beq.n	8001108 <HAL_I2C_EV_IRQHandler+0xb8>
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d008      	beq.n	8001108 <HAL_I2C_EV_IRQHandler+0xb8>
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	4b54      	ldr	r3, [pc, #336]	; (800124c <HAL_I2C_EV_IRQHandler+0x1fc>)
 80010fa:	4013      	ands	r3, r2
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d103      	bne.n	8001108 <HAL_I2C_EV_IRQHandler+0xb8>
      {
        I2C_MasterTransmit_TXE(hi2c);
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f000 f9b0 	bl	8001466 <I2C_MasterTransmit_TXE>
 8001106:	e030      	b.n	800116a <HAL_I2C_EV_IRQHandler+0x11a>
      }
      /* BTF set -------------------------------------------------------------*/
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	4b50      	ldr	r3, [pc, #320]	; (800124c <HAL_I2C_EV_IRQHandler+0x1fc>)
 800110c:	4013      	ands	r3, r2
 800110e:	2b00      	cmp	r3, #0
 8001110:	f000 808f 	beq.w	8001232 <HAL_I2C_EV_IRQHandler+0x1e2>
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800111a:	2b00      	cmp	r3, #0
 800111c:	f000 8089 	beq.w	8001232 <HAL_I2C_EV_IRQHandler+0x1e2>
      {
        I2C_MasterTransmit_BTF(hi2c);
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f000 fa95 	bl	8001650 <I2C_MasterTransmit_BTF>
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 8001126:	e084      	b.n	8001232 <HAL_I2C_EV_IRQHandler+0x1e2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset -----------------------------------------------*/
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	4b49      	ldr	r3, [pc, #292]	; (8001250 <HAL_I2C_EV_IRQHandler+0x200>)
 800112c:	4013      	ands	r3, r2
 800112e:	2b00      	cmp	r3, #0
 8001130:	d00d      	beq.n	800114e <HAL_I2C_EV_IRQHandler+0xfe>
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001138:	2b00      	cmp	r3, #0
 800113a:	d008      	beq.n	800114e <HAL_I2C_EV_IRQHandler+0xfe>
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	4b43      	ldr	r3, [pc, #268]	; (800124c <HAL_I2C_EV_IRQHandler+0x1fc>)
 8001140:	4013      	ands	r3, r2
 8001142:	2b00      	cmp	r3, #0
 8001144:	d103      	bne.n	800114e <HAL_I2C_EV_IRQHandler+0xfe>
      {
        I2C_MasterReceive_RXNE(hi2c);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f000 faf7 	bl	800173a <I2C_MasterReceive_RXNE>
 800114c:	e00d      	b.n	800116a <HAL_I2C_EV_IRQHandler+0x11a>
      }
      /* BTF set -------------------------------------------------------------*/
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	4b3e      	ldr	r3, [pc, #248]	; (800124c <HAL_I2C_EV_IRQHandler+0x1fc>)
 8001152:	4013      	ands	r3, r2
 8001154:	2b00      	cmp	r3, #0
 8001156:	d06c      	beq.n	8001232 <HAL_I2C_EV_IRQHandler+0x1e2>
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800115e:	2b00      	cmp	r3, #0
 8001160:	d067      	beq.n	8001232 <HAL_I2C_EV_IRQHandler+0x1e2>
      {
        I2C_MasterReceive_BTF(hi2c);
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f000 fb8a 	bl	800187c <I2C_MasterReceive_BTF>
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 8001168:	e063      	b.n	8001232 <HAL_I2C_EV_IRQHandler+0x1e2>
 800116a:	e062      	b.n	8001232 <HAL_I2C_EV_IRQHandler+0x1e2>
  }
  /* Slave mode selected */
  else
  {
    /* ADDR set --------------------------------------------------------------*/
    if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	4b34      	ldr	r3, [pc, #208]	; (8001240 <HAL_I2C_EV_IRQHandler+0x1f0>)
 8001170:	4013      	ands	r3, r2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d008      	beq.n	8001188 <HAL_I2C_EV_IRQHandler+0x138>
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800117c:	2b00      	cmp	r3, #0
 800117e:	d003      	beq.n	8001188 <HAL_I2C_EV_IRQHandler+0x138>
    {
      I2C_Slave_ADDR(hi2c);
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f000 fedd 	bl	8001f40 <I2C_Slave_ADDR>
 8001186:	e055      	b.n	8001234 <HAL_I2C_EV_IRQHandler+0x1e4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if(((sr1itflags & I2C_FLAG_STOPF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4b32      	ldr	r3, [pc, #200]	; (8001254 <HAL_I2C_EV_IRQHandler+0x204>)
 800118c:	4013      	ands	r3, r2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d008      	beq.n	80011a4 <HAL_I2C_EV_IRQHandler+0x154>
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001198:	2b00      	cmp	r3, #0
 800119a:	d003      	beq.n	80011a4 <HAL_I2C_EV_IRQHandler+0x154>
    {
      I2C_Slave_STOPF(hi2c);
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f000 fef9 	bl	8001f94 <I2C_Slave_STOPF>
 80011a2:	e047      	b.n	8001234 <HAL_I2C_EV_IRQHandler+0x1e4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if((sr2itflags & I2C_FLAG_TRA) != RESET)
 80011a4:	697a      	ldr	r2, [r7, #20]
 80011a6:	4b27      	ldr	r3, [pc, #156]	; (8001244 <HAL_I2C_EV_IRQHandler+0x1f4>)
 80011a8:	4013      	ands	r3, r2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d020      	beq.n	80011f0 <HAL_I2C_EV_IRQHandler+0x1a0>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4b25      	ldr	r3, [pc, #148]	; (8001248 <HAL_I2C_EV_IRQHandler+0x1f8>)
 80011b2:	4013      	ands	r3, r2
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d00d      	beq.n	80011d4 <HAL_I2C_EV_IRQHandler+0x184>
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d008      	beq.n	80011d4 <HAL_I2C_EV_IRQHandler+0x184>
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4b21      	ldr	r3, [pc, #132]	; (800124c <HAL_I2C_EV_IRQHandler+0x1fc>)
 80011c6:	4013      	ands	r3, r2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d103      	bne.n	80011d4 <HAL_I2C_EV_IRQHandler+0x184>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f000 fdfd 	bl	8001dcc <I2C_SlaveTransmit_TXE>
 80011d2:	e02f      	b.n	8001234 <HAL_I2C_EV_IRQHandler+0x1e4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	4b1d      	ldr	r3, [pc, #116]	; (800124c <HAL_I2C_EV_IRQHandler+0x1fc>)
 80011d8:	4013      	ands	r3, r2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d02a      	beq.n	8001234 <HAL_I2C_EV_IRQHandler+0x1e4>
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d025      	beq.n	8001234 <HAL_I2C_EV_IRQHandler+0x1e4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f000 fe2c 	bl	8001e46 <I2C_SlaveTransmit_BTF>
      {
        I2C_SlaveReceive_BTF(hi2c);
      }
    }
  }
}
 80011ee:	e021      	b.n	8001234 <HAL_I2C_EV_IRQHandler+0x1e4>
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	4b17      	ldr	r3, [pc, #92]	; (8001250 <HAL_I2C_EV_IRQHandler+0x200>)
 80011f4:	4013      	ands	r3, r2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d00d      	beq.n	8001216 <HAL_I2C_EV_IRQHandler+0x1c6>
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001200:	2b00      	cmp	r3, #0
 8001202:	d008      	beq.n	8001216 <HAL_I2C_EV_IRQHandler+0x1c6>
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	4b11      	ldr	r3, [pc, #68]	; (800124c <HAL_I2C_EV_IRQHandler+0x1fc>)
 8001208:	4013      	ands	r3, r2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d103      	bne.n	8001216 <HAL_I2C_EV_IRQHandler+0x1c6>
        I2C_SlaveReceive_RXNE(hi2c);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f000 fe38 	bl	8001e84 <I2C_SlaveReceive_RXNE>
 8001214:	e00e      	b.n	8001234 <HAL_I2C_EV_IRQHandler+0x1e4>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4b0c      	ldr	r3, [pc, #48]	; (800124c <HAL_I2C_EV_IRQHandler+0x1fc>)
 800121a:	4013      	ands	r3, r2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d009      	beq.n	8001234 <HAL_I2C_EV_IRQHandler+0x1e4>
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001226:	2b00      	cmp	r3, #0
 8001228:	d004      	beq.n	8001234 <HAL_I2C_EV_IRQHandler+0x1e4>
        I2C_SlaveReceive_BTF(hi2c);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f000 fe68 	bl	8001f00 <I2C_SlaveReceive_BTF>
}
 8001230:	e000      	b.n	8001234 <HAL_I2C_EV_IRQHandler+0x1e4>
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 8001232:	bf00      	nop
}
 8001234:	bf00      	nop
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	00010008 	.word	0x00010008
 8001240:	00010002 	.word	0x00010002
 8001244:	00100004 	.word	0x00100004
 8001248:	00010080 	.word	0x00010080
 800124c:	00010004 	.word	0x00010004
 8001250:	00010040 	.word	0x00010040
 8001254:	00010010 	.word	0x00010010

08001258 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b088      	sub	sp, #32
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U, tmp3 = 0U, tmp4 = 0U;
 8001260:	2300      	movs	r3, #0
 8001262:	61fb      	str	r3, [r7, #28]
 8001264:	2300      	movs	r3, #0
 8001266:	61bb      	str	r3, [r7, #24]
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	2300      	movs	r3, #0
 800126e:	613b      	str	r3, [r7, #16]
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	60fb      	str	r3, [r7, #12]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	60bb      	str	r3, [r7, #8]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	4b4d      	ldr	r3, [pc, #308]	; (80013b8 <HAL_I2C_ER_IRQHandler+0x160>)
 8001284:	4013      	ands	r3, r2
 8001286:	2b00      	cmp	r3, #0
 8001288:	d017      	beq.n	80012ba <HAL_I2C_ER_IRQHandler+0x62>
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001290:	2b00      	cmp	r3, #0
 8001292:	d012      	beq.n	80012ba <HAL_I2C_ER_IRQHandler+0x62>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001298:	f043 0201 	orr.w	r2, r3, #1
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80012a8:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	6812      	ldr	r2, [r2, #0]
 80012b2:	6812      	ldr	r2, [r2, #0]
 80012b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012b8:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Loss error interrupt occurred ---------------------------*/
  if(((sr1itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f403 3381 	and.w	r3, r3, #66048	; 0x10200
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d00f      	beq.n	80012e4 <HAL_I2C_ER_IRQHandler+0x8c>
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d00a      	beq.n	80012e4 <HAL_I2C_ER_IRQHandler+0x8c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	f043 0202 	orr.w	r2, r3, #2
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80012e2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if(((sr1itflags & I2C_FLAG_AF) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f403 3382 	and.w	r3, r3, #66560	; 0x10400
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d044      	beq.n	8001378 <HAL_I2C_ER_IRQHandler+0x120>
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d03f      	beq.n	8001378 <HAL_I2C_ER_IRQHandler+0x120>
  {
    tmp1 = hi2c->Mode;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	61fb      	str	r3, [r7, #28]
    tmp2 = hi2c->XferCount;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001306:	b29b      	uxth	r3, r3
 8001308:	61bb      	str	r3, [r7, #24]
    tmp3 = hi2c->State;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001310:	b2db      	uxtb	r3, r3
 8001312:	617b      	str	r3, [r7, #20]
    tmp4 = hi2c->PreviousState;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001318:	613b      	str	r3, [r7, #16]
    if((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	2b20      	cmp	r3, #32
 800131e:	d112      	bne.n	8001346 <HAL_I2C_ER_IRQHandler+0xee>
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d10f      	bne.n	8001346 <HAL_I2C_ER_IRQHandler+0xee>
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	2b21      	cmp	r3, #33	; 0x21
 800132a:	d008      	beq.n	800133e <HAL_I2C_ER_IRQHandler+0xe6>
      ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	2b29      	cmp	r3, #41	; 0x29
 8001330:	d005      	beq.n	800133e <HAL_I2C_ER_IRQHandler+0xe6>
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	2b28      	cmp	r3, #40	; 0x28
 8001336:	d106      	bne.n	8001346 <HAL_I2C_ER_IRQHandler+0xee>
      ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	2b21      	cmp	r3, #33	; 0x21
 800133c:	d103      	bne.n	8001346 <HAL_I2C_ER_IRQHandler+0xee>
    {
      I2C_Slave_AF(hi2c);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f000 feee 	bl	8002120 <I2C_Slave_AF>
 8001344:	e018      	b.n	8001378 <HAL_I2C_ER_IRQHandler+0x120>
    }
    else
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	f043 0204 	orr.w	r2, r3, #4
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	641a      	str	r2, [r3, #64]	; 0x40

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if(hi2c->Mode == HAL_I2C_MODE_MASTER)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b10      	cmp	r3, #16
 800135c:	d107      	bne.n	800136e <HAL_I2C_ER_IRQHandler+0x116>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	6812      	ldr	r2, [r2, #0]
 8001366:	6812      	ldr	r2, [r2, #0]
 8001368:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800136c:	601a      	str	r2, [r3, #0]
      }

      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001376:	615a      	str	r2, [r3, #20]
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if(((sr1itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f403 3384 	and.w	r3, r3, #67584	; 0x10800
 800137e:	2b00      	cmp	r3, #0
 8001380:	d00f      	beq.n	80013a2 <HAL_I2C_ER_IRQHandler+0x14a>
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001388:	2b00      	cmp	r3, #0
 800138a:	d00a      	beq.n	80013a2 <HAL_I2C_ER_IRQHandler+0x14a>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001390:	f043 0208 	orr.w	r2, r3, #8
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	641a      	str	r2, [r3, #64]	; 0x40
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80013a0:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d002      	beq.n	80013b0 <HAL_I2C_ER_IRQHandler+0x158>
  {
    I2C_ITError(hi2c);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f000 ff2a 	bl	8002204 <I2C_ITError>
  }
}
 80013b0:	bf00      	nop
 80013b2:	3720      	adds	r7, #32
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	00010100 	.word	0x00010100

080013bc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback can be implemented in the user file
   */
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr

080013ce <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b083      	sub	sp, #12
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback can be implemented in the user file
   */
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr

080013e0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback can be implemented in the user file
   */
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr

080013f2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback can be implemented in the user file
   */
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr

08001404 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferOptions_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	460b      	mov	r3, r1
 800140e:	70fb      	strb	r3, [r7, #3]
 8001410:	4613      	mov	r3, r2
 8001412:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback can be implemented in the user file
   */
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr

0800141e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800141e:	b480      	push	{r7}
 8001420:	b083      	sub	sp, #12
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

    /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback can be implemented in the user file
   */
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr

08001430 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback can be implemented in the user file
   */
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr

08001442 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001442:	b480      	push	{r7}
 8001444:	b083      	sub	sp, #12
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback can be implemented in the user file
   */
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr

08001454 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr

08001466 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b086      	sub	sp, #24
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState       = hi2c->State;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001474:	b2db      	uxtb	r3, r3
 8001476:	617b      	str	r3, [r7, #20]
  uint32_t CurrentMode        = hi2c->Mode;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800147e:	b2db      	uxtb	r3, r3
 8001480:	613b      	str	r3, [r7, #16]
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001486:	60fb      	str	r3, [r7, #12]

  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800148c:	2b00      	cmp	r3, #0
 800148e:	d150      	bne.n	8001532 <I2C_MasterTransmit_TXE+0xcc>
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	2b21      	cmp	r3, #33	; 0x21
 8001494:	d14d      	bne.n	8001532 <I2C_MasterTransmit_TXE+0xcc>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2b04      	cmp	r3, #4
 800149a:	d01d      	beq.n	80014d8 <I2C_MasterTransmit_TXE+0x72>
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2b08      	cmp	r3, #8
 80014a0:	d01a      	beq.n	80014d8 <I2C_MasterTransmit_TXE+0x72>
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80014a8:	d016      	beq.n	80014d8 <I2C_MasterTransmit_TXE+0x72>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	6812      	ldr	r2, [r2, #0]
 80014b2:	6852      	ldr	r2, [r2, #4]
 80014b4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80014b8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2211      	movs	r2, #17
 80014be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2220      	movs	r2, #32
 80014cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      HAL_I2C_MasterTxCpltCallback(hi2c);
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f7ff ff73 	bl	80013bc <HAL_I2C_MasterTxCpltCallback>
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80014d6:	e0b6      	b.n	8001646 <I2C_MasterTransmit_TXE+0x1e0>
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	6812      	ldr	r2, [r2, #0]
 80014e0:	6852      	ldr	r2, [r2, #4]
 80014e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80014e6:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	6812      	ldr	r2, [r2, #0]
 80014f0:	6812      	ldr	r2, [r2, #0]
 80014f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014f6:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2220      	movs	r2, #32
 8001502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b40      	cmp	r3, #64	; 0x40
 8001510:	d107      	bne.n	8001522 <I2C_MasterTransmit_TXE+0xbc>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MemTxCpltCallback(hi2c);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff ff88 	bl	8001430 <HAL_I2C_MemTxCpltCallback>
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001520:	e091      	b.n	8001646 <I2C_MasterTransmit_TXE+0x1e0>
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff ff46 	bl	80013bc <HAL_I2C_MasterTxCpltCallback>
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001530:	e089      	b.n	8001646 <I2C_MasterTransmit_TXE+0x1e0>
      }
    }
  }
  else if((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	2b21      	cmp	r3, #33	; 0x21
 8001536:	d006      	beq.n	8001546 <I2C_MasterTransmit_TXE+0xe0>
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	2b40      	cmp	r3, #64	; 0x40
 800153c:	f040 8083 	bne.w	8001646 <I2C_MasterTransmit_TXE+0x1e0>
    ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	2b22      	cmp	r3, #34	; 0x22
 8001544:	d17f      	bne.n	8001646 <I2C_MasterTransmit_TXE+0x1e0>
  {
    if(hi2c->XferCount == 0U)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800154a:	b29b      	uxth	r3, r3
 800154c:	2b00      	cmp	r3, #0
 800154e:	d108      	bne.n	8001562 <I2C_MasterTransmit_TXE+0xfc>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	6812      	ldr	r2, [r2, #0]
 8001558:	6852      	ldr	r2, [r2, #4]
 800155a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	e071      	b.n	8001646 <I2C_MasterTransmit_TXE+0x1e0>
    }
    else
    {
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b40      	cmp	r3, #64	; 0x40
 800156c:	d15b      	bne.n	8001626 <I2C_MasterTransmit_TXE+0x1c0>
      {
        if(hi2c->EventCount == 0)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001572:	2b00      	cmp	r3, #0
 8001574:	d11d      	bne.n	80015b2 <I2C_MasterTransmit_TXE+0x14c>
        {
          /* If Memory address size is 8Bit */
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157a:	2b01      	cmp	r3, #1
 800157c:	d10b      	bne.n	8001596 <I2C_MasterTransmit_TXE+0x130>
          {
            /* Send Memory Address */
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	611a      	str	r2, [r3, #16]
            
            hi2c->EventCount += 2;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800158e:	1c9a      	adds	r2, r3, #2
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	651a      	str	r2, [r3, #80]	; 0x50
 8001594:	e057      	b.n	8001646 <I2C_MasterTransmit_TXE+0x1e0>
          }
          /* If Memory address size is 16Bit */
          else
          {
            /* Send MSB of Memory Address */
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800159e:	b292      	uxth	r2, r2
 80015a0:	1212      	asrs	r2, r2, #8
 80015a2:	b2d2      	uxtb	r2, r2
 80015a4:	611a      	str	r2, [r3, #16]
            
            hi2c->EventCount++;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015aa:	1c5a      	adds	r2, r3, #1
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	651a      	str	r2, [r3, #80]	; 0x50
 80015b0:	e049      	b.n	8001646 <I2C_MasterTransmit_TXE+0x1e0>
          }
        }
        else if(hi2c->EventCount == 1)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d10b      	bne.n	80015d2 <I2C_MasterTransmit_TXE+0x16c>
        {
          /* Send LSB of Memory Address */
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	611a      	str	r2, [r3, #16]
          
          hi2c->EventCount++;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015ca:	1c5a      	adds	r2, r3, #1
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	651a      	str	r2, [r3, #80]	; 0x50
 80015d0:	e039      	b.n	8001646 <I2C_MasterTransmit_TXE+0x1e0>
        }
        else if(hi2c->EventCount == 2)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d135      	bne.n	8001646 <I2C_MasterTransmit_TXE+0x1e0>
        {
          if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b22      	cmp	r3, #34	; 0x22
 80015e4:	d108      	bne.n	80015f8 <I2C_MasterTransmit_TXE+0x192>
          {
            /* Generate Restart */
            hi2c->Instance->CR1 |= I2C_CR1_START;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	6812      	ldr	r2, [r2, #0]
 80015ee:	6812      	ldr	r2, [r2, #0]
 80015f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	e026      	b.n	8001646 <I2C_MasterTransmit_TXE+0x1e0>
          }
          else if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	2b21      	cmp	r3, #33	; 0x21
 8001602:	d120      	bne.n	8001646 <I2C_MasterTransmit_TXE+0x1e0>
          {
            /* Write data to DR */
            hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160c:	1c58      	adds	r0, r3, #1
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	6248      	str	r0, [r1, #36]	; 0x24
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	6113      	str	r3, [r2, #16]
            hi2c->XferCount--;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800161a:	b29b      	uxth	r3, r3
 800161c:	3b01      	subs	r3, #1
 800161e:	b29a      	uxth	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001624:	e00f      	b.n	8001646 <I2C_MasterTransmit_TXE+0x1e0>
        }
      }
      else
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162e:	1c58      	adds	r0, r3, #1
 8001630:	6879      	ldr	r1, [r7, #4]
 8001632:	6248      	str	r0, [r1, #36]	; 0x24
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	6113      	str	r3, [r2, #16]
        hi2c->XferCount--;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800163c:	b29b      	uxth	r3, r3
 800163e:	3b01      	subs	r3, #1
 8001640:	b29a      	uxth	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	855a      	strh	r2, [r3, #42]	; 0x2a
      }
    }
  }
  return HAL_OK;
 8001646:	2300      	movs	r3, #0
}
 8001648:	4618      	mov	r0, r3
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165c:	60fb      	str	r3, [r7, #12]

  if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b21      	cmp	r3, #33	; 0x21
 8001668:	d162      	bne.n	8001730 <I2C_MasterTransmit_BTF+0xe0>
  {    
    if(hi2c->XferCount != 0U)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800166e:	b29b      	uxth	r3, r3
 8001670:	2b00      	cmp	r3, #0
 8001672:	d010      	beq.n	8001696 <I2C_MasterTransmit_BTF+0x46>
    {
      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167c:	1c58      	adds	r0, r3, #1
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	6248      	str	r0, [r1, #36]	; 0x24
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	6113      	str	r3, [r2, #16]
      hi2c->XferCount--;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800168a:	b29b      	uxth	r3, r3
 800168c:	3b01      	subs	r3, #1
 800168e:	b29a      	uxth	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001694:	e04c      	b.n	8001730 <I2C_MasterTransmit_BTF+0xe0>
    }
    else
    {
      /* Call TxCpltCallback() directly if no stop mode is set */
      if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2b04      	cmp	r3, #4
 800169a:	d01d      	beq.n	80016d8 <I2C_MasterTransmit_BTF+0x88>
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2b08      	cmp	r3, #8
 80016a0:	d01a      	beq.n	80016d8 <I2C_MasterTransmit_BTF+0x88>
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80016a8:	d016      	beq.n	80016d8 <I2C_MasterTransmit_BTF+0x88>
      {
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	6812      	ldr	r2, [r2, #0]
 80016b2:	6852      	ldr	r2, [r2, #4]
 80016b4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80016b8:	605a      	str	r2, [r3, #4]
        
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2211      	movs	r2, #17
 80016be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2220      	movs	r2, #32
 80016cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff fe73 	bl	80013bc <HAL_I2C_MasterTxCpltCallback>
 80016d6:	e02b      	b.n	8001730 <I2C_MasterTransmit_BTF+0xe0>
      }
      else /* Generate Stop condition then Call TxCpltCallback() */
      {
        /* Disable EVT, BUF and ERR interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	6812      	ldr	r2, [r2, #0]
 80016e0:	6852      	ldr	r2, [r2, #4]
 80016e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80016e6:	605a      	str	r2, [r3, #4]
        
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	6812      	ldr	r2, [r2, #0]
 80016f0:	6812      	ldr	r2, [r2, #0]
 80016f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016f6:	601a      	str	r2, [r3, #0]
        
        hi2c->PreviousState = I2C_STATE_NONE;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2220      	movs	r2, #32
 8001702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b40      	cmp	r3, #64	; 0x40
 8001710:	d107      	bne.n	8001722 <I2C_MasterTransmit_BTF+0xd2>
        {
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          
          HAL_I2C_MemTxCpltCallback(hi2c);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff fe88 	bl	8001430 <HAL_I2C_MemTxCpltCallback>
 8001720:	e006      	b.n	8001730 <I2C_MasterTransmit_BTF+0xe0>
        }
        else
        {
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7ff fe46 	bl	80013bc <HAL_I2C_MasterTxCpltCallback>
        }
      }
    }
  }
  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b084      	sub	sp, #16
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b22      	cmp	r3, #34	; 0x22
 800174c:	f040 8091 	bne.w	8001872 <I2C_MasterReceive_RXNE+0x138>
  {
    uint32_t tmp = 0U;
 8001750:	2300      	movs	r3, #0
 8001752:	60fb      	str	r3, [r7, #12]
    
    tmp = hi2c->XferCount;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001758:	b29b      	uxth	r3, r3
 800175a:	60fb      	str	r3, [r7, #12]
    if(tmp > 3U)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2b03      	cmp	r3, #3
 8001760:	d911      	bls.n	8001786 <I2C_MasterReceive_RXNE+0x4c>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001766:	1c59      	adds	r1, r3, #1
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	6251      	str	r1, [r2, #36]	; 0x24
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	6812      	ldr	r2, [r2, #0]
 8001770:	6912      	ldr	r2, [r2, #16]
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800177a:	b29b      	uxth	r3, r3
 800177c:	3b01      	subs	r3, #1
 800177e:	b29a      	uxth	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001784:	e075      	b.n	8001872 <I2C_MasterReceive_RXNE+0x138>
    }
    else if((tmp == 2U) || (tmp == 3U))
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2b02      	cmp	r3, #2
 800178a:	d002      	beq.n	8001792 <I2C_MasterReceive_RXNE+0x58>
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2b03      	cmp	r3, #3
 8001790:	d125      	bne.n	80017de <I2C_MasterReceive_RXNE+0xa4>
    {
      if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001796:	2b02      	cmp	r3, #2
 8001798:	d010      	beq.n	80017bc <I2C_MasterReceive_RXNE+0x82>
      {
        /* Disable Acknowledge */
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	6812      	ldr	r2, [r2, #0]
 80017a2:	6812      	ldr	r2, [r2, #0]
 80017a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017a8:	601a      	str	r2, [r3, #0]
        
        /* Enable Pos */
        hi2c->Instance->CR1 |= I2C_CR1_POS;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	6812      	ldr	r2, [r2, #0]
 80017b2:	6812      	ldr	r2, [r2, #0]
 80017b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	e007      	b.n	80017cc <I2C_MasterReceive_RXNE+0x92>
      }
      else
      {
        /* Enable Acknowledge */
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	6812      	ldr	r2, [r2, #0]
 80017c4:	6812      	ldr	r2, [r2, #0]
 80017c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80017ca:	601a      	str	r2, [r3, #0]
      }
      
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	6812      	ldr	r2, [r2, #0]
 80017d4:	6852      	ldr	r2, [r2, #4]
 80017d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017da:	605a      	str	r2, [r3, #4]
 80017dc:	e049      	b.n	8001872 <I2C_MasterReceive_RXNE+0x138>
    }
    else
    {
      if(hi2c->XferOptions != I2C_NEXT_FRAME)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d008      	beq.n	80017f8 <I2C_MasterReceive_RXNE+0xbe>
      {
        /* Disable Acknowledge */
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	6812      	ldr	r2, [r2, #0]
 80017ee:	6812      	ldr	r2, [r2, #0]
 80017f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	e007      	b.n	8001808 <I2C_MasterReceive_RXNE+0xce>
      }
      else
      {
        /* Enable Acknowledge */
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	6812      	ldr	r2, [r2, #0]
 8001800:	6812      	ldr	r2, [r2, #0]
 8001802:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001806:	601a      	str	r2, [r3, #0]
      }

      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	6812      	ldr	r2, [r2, #0]
 8001810:	6852      	ldr	r2, [r2, #4]
 8001812:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001816:	605a      	str	r2, [r3, #4]
      
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181c:	1c59      	adds	r1, r3, #1
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	6251      	str	r1, [r2, #36]	; 0x24
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	6812      	ldr	r2, [r2, #0]
 8001826:	6912      	ldr	r2, [r2, #16]
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001830:	b29b      	uxth	r3, r3
 8001832:	3b01      	subs	r3, #1
 8001834:	b29a      	uxth	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	855a      	strh	r2, [r3, #42]	; 0x2a

      hi2c->State = HAL_I2C_STATE_READY;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2220      	movs	r2, #32
 800183e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->PreviousState = I2C_STATE_NONE;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	631a      	str	r2, [r3, #48]	; 0x30

      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800184e:	b2db      	uxtb	r3, r3
 8001850:	2b40      	cmp	r3, #64	; 0x40
 8001852:	d107      	bne.n	8001864 <I2C_MasterReceive_RXNE+0x12a>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MemRxCpltCallback(hi2c);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7ff fdf0 	bl	8001442 <HAL_I2C_MemRxCpltCallback>
 8001862:	e006      	b.n	8001872 <I2C_MasterReceive_RXNE+0x138>
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff fdae 	bl	80013ce <HAL_I2C_MasterRxCpltCallback>
      }
    }
  }
  return HAL_OK;
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	3710      	adds	r7, #16
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001888:	60fb      	str	r3, [r7, #12]

  if(hi2c->XferCount == 3U)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800188e:	b29b      	uxth	r3, r3
 8001890:	2b03      	cmp	r3, #3
 8001892:	d123      	bne.n	80018dc <I2C_MasterReceive_BTF+0x60>
  {
    if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2b04      	cmp	r3, #4
 8001898:	d006      	beq.n	80018a8 <I2C_MasterReceive_BTF+0x2c>
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2b08      	cmp	r3, #8
 800189e:	d003      	beq.n	80018a8 <I2C_MasterReceive_BTF+0x2c>
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80018a6:	d107      	bne.n	80018b8 <I2C_MasterReceive_BTF+0x3c>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	6812      	ldr	r2, [r2, #0]
 80018b0:	6812      	ldr	r2, [r2, #0]
 80018b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018b6:	601a      	str	r2, [r3, #0]
    }

    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018bc:	1c59      	adds	r1, r3, #1
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	6251      	str	r1, [r2, #36]	; 0x24
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	6812      	ldr	r2, [r2, #0]
 80018c6:	6912      	ldr	r2, [r2, #16]
 80018c8:	b2d2      	uxtb	r2, r2
 80018ca:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	3b01      	subs	r3, #1
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80018da:	e08b      	b.n	80019f4 <I2C_MasterReceive_BTF+0x178>
  }
  else if(hi2c->XferCount == 2U)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d175      	bne.n	80019d2 <I2C_MasterReceive_BTF+0x156>
  {
    /* Prepare next transfer or stop current transfer */
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2b04      	cmp	r3, #4
 80018ea:	d023      	beq.n	8001934 <I2C_MasterReceive_BTF+0xb8>
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2b08      	cmp	r3, #8
 80018f0:	d020      	beq.n	8001934 <I2C_MasterReceive_BTF+0xb8>
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80018f8:	d01c      	beq.n	8001934 <I2C_MasterReceive_BTF+0xb8>
    {
      if(CurrentXferOptions != I2C_NEXT_FRAME)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d008      	beq.n	8001912 <I2C_MasterReceive_BTF+0x96>
      {
        /* Disable Acknowledge */
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	6812      	ldr	r2, [r2, #0]
 8001908:	6812      	ldr	r2, [r2, #0]
 800190a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	e007      	b.n	8001922 <I2C_MasterReceive_BTF+0xa6>
      }
      else
      {
        /* Enable Acknowledge */
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	6812      	ldr	r2, [r2, #0]
 800191a:	6812      	ldr	r2, [r2, #0]
 800191c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001920:	601a      	str	r2, [r3, #0]
      }

      /* Disable EVT and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	6812      	ldr	r2, [r2, #0]
 800192a:	6852      	ldr	r2, [r2, #4]
 800192c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	e00f      	b.n	8001954 <I2C_MasterReceive_BTF+0xd8>
    }
    else
    {
      /* Disable EVT and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	6812      	ldr	r2, [r2, #0]
 800193c:	6852      	ldr	r2, [r2, #4]
 800193e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001942:	605a      	str	r2, [r3, #4]
      
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	6812      	ldr	r2, [r2, #0]
 800194c:	6812      	ldr	r2, [r2, #0]
 800194e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001952:	601a      	str	r2, [r3, #0]
    }

    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001958:	1c59      	adds	r1, r3, #1
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	6251      	str	r1, [r2, #36]	; 0x24
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	6812      	ldr	r2, [r2, #0]
 8001962:	6912      	ldr	r2, [r2, #16]
 8001964:	b2d2      	uxtb	r2, r2
 8001966:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800196c:	b29b      	uxth	r3, r3
 800196e:	3b01      	subs	r3, #1
 8001970:	b29a      	uxth	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197a:	1c59      	adds	r1, r3, #1
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	6251      	str	r1, [r2, #36]	; 0x24
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	6812      	ldr	r2, [r2, #0]
 8001984:	6912      	ldr	r2, [r2, #16]
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800198e:	b29b      	uxth	r3, r3
 8001990:	3b01      	subs	r3, #1
 8001992:	b29a      	uxth	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2220      	movs	r2, #32
 800199c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	631a      	str	r2, [r3, #48]	; 0x30

    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b40      	cmp	r3, #64	; 0x40
 80019b0:	d107      	bne.n	80019c2 <I2C_MasterReceive_BTF+0x146>
    {
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      HAL_I2C_MemRxCpltCallback(hi2c);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7ff fd41 	bl	8001442 <HAL_I2C_MemRxCpltCallback>
 80019c0:	e018      	b.n	80019f4 <I2C_MasterReceive_BTF+0x178>
    }
    else
    {
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      HAL_I2C_MasterRxCpltCallback(hi2c);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff fcff 	bl	80013ce <HAL_I2C_MasterRxCpltCallback>
 80019d0:	e010      	b.n	80019f4 <I2C_MasterReceive_BTF+0x178>
    }
  }
  else
  {
    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d6:	1c59      	adds	r1, r3, #1
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	6251      	str	r1, [r2, #36]	; 0x24
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	6812      	ldr	r2, [r2, #0]
 80019e0:	6912      	ldr	r2, [r2, #16]
 80019e2:	b2d2      	uxtb	r2, r2
 80019e4:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	3b01      	subs	r3, #1
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b083      	sub	sp, #12
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
  if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b40      	cmp	r3, #64	; 0x40
 8001a10:	d116      	bne.n	8001a40 <I2C_Master_SB+0x42>
  {
    if(hi2c->EventCount == 0U)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d108      	bne.n	8001a2c <I2C_Master_SB+0x2e>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001a28:	611a      	str	r2, [r3, #16]
 8001a2a:	e04c      	b.n	8001ac6 <I2C_Master_SB+0xc8>
    }
    else
    {
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a34:	b2d2      	uxtb	r2, r2
 8001a36:	f042 0201 	orr.w	r2, r2, #1
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	611a      	str	r2, [r3, #16]
 8001a3e:	e042      	b.n	8001ac6 <I2C_Master_SB+0xc8>
    }
  }
  else
  {
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a48:	d118      	bne.n	8001a7c <I2C_Master_SB+0x7e>
    {
      /* Send slave 7 Bits address */
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b21      	cmp	r3, #33	; 0x21
 8001a54:	d108      	bne.n	8001a68 <I2C_Master_SB+0x6a>
      {
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001a64:	611a      	str	r2, [r3, #16]
 8001a66:	e02e      	b.n	8001ac6 <I2C_Master_SB+0xc8>
      }
      else
      {
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a70:	b2d2      	uxtb	r2, r2
 8001a72:	f042 0201 	orr.w	r2, r2, #1
 8001a76:	b2d2      	uxtb	r2, r2
 8001a78:	611a      	str	r2, [r3, #16]
 8001a7a:	e024      	b.n	8001ac6 <I2C_Master_SB+0xc8>
      }
    }
    else
    {
      if(hi2c->EventCount == 0U)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d10e      	bne.n	8001aa2 <I2C_Master_SB+0xa4>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a8c:	b292      	uxth	r2, r2
 8001a8e:	11d2      	asrs	r2, r2, #7
 8001a90:	b2d2      	uxtb	r2, r2
 8001a92:	f002 0206 	and.w	r2, r2, #6
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	f062 020f 	orn	r2, r2, #15
 8001a9c:	b2d2      	uxtb	r2, r2
 8001a9e:	611a      	str	r2, [r3, #16]
 8001aa0:	e011      	b.n	8001ac6 <I2C_Master_SB+0xc8>
      }
      else if(hi2c->EventCount == 1U)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d10d      	bne.n	8001ac6 <I2C_Master_SB+0xc8>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001ab2:	b292      	uxth	r2, r2
 8001ab4:	11d2      	asrs	r2, r2, #7
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	f002 0206 	and.w	r2, r2, #6
 8001abc:	b2d2      	uxtb	r2, r2
 8001abe:	f062 020e 	orn	r2, r2, #14
 8001ac2:	b2d2      	uxtb	r2, r2
 8001ac4:	611a      	str	r2, [r3, #16]
      }
    }
  }

  return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr

08001ad2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	611a      	str	r2, [r3, #16]

  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr

08001af2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8001af2:	b480      	push	{r7}
 8001af4:	b091      	sub	sp, #68	; 0x44
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentMode        = hi2c->Mode;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b08:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State         = hi2c->PreviousState;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	637b      	str	r3, [r7, #52]	; 0x34

  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	2b22      	cmp	r3, #34	; 0x22
 8001b1a:	f040 8146 	bne.w	8001daa <I2C_Master_ADDR+0x2b8>
  {
    if((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d10e      	bne.n	8001b44 <I2C_Master_ADDR+0x52>
 8001b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b28:	2b40      	cmp	r3, #64	; 0x40
 8001b2a:	d10b      	bne.n	8001b44 <I2C_Master_ADDR+0x52>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	633b      	str	r3, [r7, #48]	; 0x30
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	695b      	ldr	r3, [r3, #20]
 8001b36:	633b      	str	r3, [r7, #48]	; 0x30
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	633b      	str	r3, [r7, #48]	; 0x30
 8001b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b42:	e13d      	b.n	8001dc0 <I2C_Master_ADDR+0x2ce>
    }
    else if((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d11d      	bne.n	8001b88 <I2C_Master_ADDR+0x96>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001b54:	d118      	bne.n	8001b88 <I2C_Master_ADDR+0x96>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b56:	2300      	movs	r3, #0
 8001b58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	695b      	ldr	r3, [r3, #20]
 8001b60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      
      /* Generate Restart */
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	6812      	ldr	r2, [r2, #0]
 8001b74:	6812      	ldr	r2, [r2, #0]
 8001b76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b7a:	601a      	str	r2, [r3, #0]
      
      hi2c->EventCount++;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b80:	1c5a      	adds	r2, r3, #1
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	651a      	str	r2, [r3, #80]	; 0x50
 8001b86:	e11b      	b.n	8001dc0 <I2C_Master_ADDR+0x2ce>
    }
    else
    {
      if(hi2c->XferCount == 0U)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d113      	bne.n	8001bba <I2C_Master_ADDR+0xc8>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b92:	2300      	movs	r3, #0
 8001b94:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	695b      	ldr	r3, [r3, #20]
 8001b9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
        
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	6812      	ldr	r2, [r2, #0]
 8001bb0:	6812      	ldr	r2, [r2, #0]
 8001bb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	e0f3      	b.n	8001da2 <I2C_Master_ADDR+0x2b0>
      }
      else if(hi2c->XferCount == 1U)   
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	f040 8082 	bne.w	8001cca <I2C_Master_ADDR+0x1d8>
      {
        if(CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8001bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bc8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001bcc:	d137      	bne.n	8001c3e <I2C_Master_ADDR+0x14c>
        {
          /* Disable Acknowledge */
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6812      	ldr	r2, [r2, #0]
 8001bd6:	6812      	ldr	r2, [r2, #0]
 8001bd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bdc:	601a      	str	r2, [r3, #0]

          if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001be8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bec:	d113      	bne.n	8001c16 <I2C_Master_ADDR+0x124>
          {
            /* Disable Acknowledge */
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	6812      	ldr	r2, [r2, #0]
 8001bf6:	6812      	ldr	r2, [r2, #0]
 8001bf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bfc:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bfe:	2300      	movs	r3, #0
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	695b      	ldr	r3, [r3, #20]
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	e0c5      	b.n	8001da2 <I2C_Master_ADDR+0x2b0>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c16:	2300      	movs	r3, #0
 8001c18:	623b      	str	r3, [r7, #32]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	695b      	ldr	r3, [r3, #20]
 8001c20:	623b      	str	r3, [r7, #32]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	623b      	str	r3, [r7, #32]
 8001c2a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	6812      	ldr	r2, [r2, #0]
 8001c34:	6812      	ldr	r2, [r2, #0]
 8001c36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	e0b1      	b.n	8001da2 <I2C_Master_ADDR+0x2b0>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8001c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c40:	2b04      	cmp	r3, #4
 8001c42:	d026      	beq.n	8001c92 <I2C_Master_ADDR+0x1a0>
 8001c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c46:	2b08      	cmp	r3, #8
 8001c48:	d023      	beq.n	8001c92 <I2C_Master_ADDR+0x1a0>
          && (Prev_State != I2C_STATE_MASTER_BUSY_RX))
 8001c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c4c:	2b12      	cmp	r3, #18
 8001c4e:	d020      	beq.n	8001c92 <I2C_Master_ADDR+0x1a0>
        {
          if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d008      	beq.n	8001c6a <I2C_Master_ADDR+0x178>
          {
            /* Disable Acknowledge */
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	6812      	ldr	r2, [r2, #0]
 8001c60:	6812      	ldr	r2, [r2, #0]
 8001c62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	e007      	b.n	8001c7a <I2C_Master_ADDR+0x188>
          }
          else
          {
            /* Enable Acknowledge */
            hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	6812      	ldr	r2, [r2, #0]
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c78:	601a      	str	r2, [r3, #0]
          }
          
          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61fb      	str	r3, [r7, #28]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	61fb      	str	r3, [r7, #28]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	61fb      	str	r3, [r7, #28]
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	e087      	b.n	8001da2 <I2C_Master_ADDR+0x2b0>
        }
        else
        {
          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	6812      	ldr	r2, [r2, #0]
 8001c9a:	6812      	ldr	r2, [r2, #0]
 8001c9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ca0:	601a      	str	r2, [r3, #0]
          
          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61bb      	str	r3, [r7, #24]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	695b      	ldr	r3, [r3, #20]
 8001cac:	61bb      	str	r3, [r7, #24]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	61bb      	str	r3, [r7, #24]
 8001cb6:	69bb      	ldr	r3, [r7, #24]
          
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	6812      	ldr	r2, [r2, #0]
 8001cc0:	6812      	ldr	r2, [r2, #0]
 8001cc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	e06b      	b.n	8001da2 <I2C_Master_ADDR+0x2b0>
        }
      }
      else if(hi2c->XferCount == 2U)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d143      	bne.n	8001d5c <I2C_Master_ADDR+0x26a>
      {
        if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d01b      	beq.n	8001d14 <I2C_Master_ADDR+0x222>
        {
          /* Enable Pos */
          hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	6812      	ldr	r2, [r2, #0]
 8001ce4:	6812      	ldr	r2, [r2, #0]
 8001ce6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cea:	601a      	str	r2, [r3, #0]
          
          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	617b      	str	r3, [r7, #20]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	617b      	str	r3, [r7, #20]
 8001d00:	697b      	ldr	r3, [r7, #20]
          
          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	6812      	ldr	r2, [r2, #0]
 8001d0a:	6812      	ldr	r2, [r2, #0]
 8001d0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	e012      	b.n	8001d3a <I2C_Master_ADDR+0x248>
        }
        else
        {
          /* Enable Acknowledge */
          hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	6812      	ldr	r2, [r2, #0]
 8001d1c:	6812      	ldr	r2, [r2, #0]
 8001d1e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d22:	601a      	str	r2, [r3, #0]
          
          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d24:	2300      	movs	r3, #0
 8001d26:	613b      	str	r3, [r7, #16]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	613b      	str	r3, [r7, #16]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	613b      	str	r3, [r7, #16]
 8001d38:	693b      	ldr	r3, [r7, #16]
        }

        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d48:	d12b      	bne.n	8001da2 <I2C_Master_ADDR+0x2b0>
        {
          /* Enable Last DMA bit */
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	6812      	ldr	r2, [r2, #0]
 8001d52:	6852      	ldr	r2, [r2, #4]
 8001d54:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	e022      	b.n	8001da2 <I2C_Master_ADDR+0x2b0>
        }
      }
      else
      {
        /* Enable Acknowledge */
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	6812      	ldr	r2, [r2, #0]
 8001d64:	6812      	ldr	r2, [r2, #0]
 8001d66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d6a:	601a      	str	r2, [r3, #0]

        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d7a:	d107      	bne.n	8001d8c <I2C_Master_ADDR+0x29a>
        {
          /* Enable Last DMA bit */
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	6812      	ldr	r2, [r2, #0]
 8001d84:	6852      	ldr	r2, [r2, #4]
 8001d86:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001d8a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]
      }
      
      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	651a      	str	r2, [r3, #80]	; 0x50
 8001da8:	e00a      	b.n	8001dc0 <I2C_Master_ADDR+0x2ce>
    }
  }
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001daa:	2300      	movs	r3, #0
 8001dac:	60bb      	str	r3, [r7, #8]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	695b      	ldr	r3, [r3, #20]
 8001db4:	60bb      	str	r3, [r7, #8]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	60bb      	str	r3, [r7, #8]
 8001dbe:	68bb      	ldr	r3, [r7, #8]
  }

  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3744      	adds	r7, #68	; 0x44
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bc80      	pop	{r7}
 8001dca:	4770      	bx	lr

08001dcc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	60fb      	str	r3, [r7, #12]

  if(hi2c->XferCount != 0U)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d029      	beq.n	8001e3c <I2C_SlaveTransmit_TXE+0x70>
  {
    /* Write data to DR */
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df0:	1c58      	adds	r0, r3, #1
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	6248      	str	r0, [r1, #36]	; 0x24
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	6113      	str	r3, [r2, #16]
    hi2c->XferCount--;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	3b01      	subs	r3, #1
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	855a      	strh	r2, [r3, #42]	; 0x2a

    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d114      	bne.n	8001e3c <I2C_SlaveTransmit_TXE+0x70>
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2b29      	cmp	r3, #41	; 0x29
 8001e16:	d111      	bne.n	8001e3c <I2C_SlaveTransmit_TXE+0x70>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6812      	ldr	r2, [r2, #0]
 8001e20:	6852      	ldr	r2, [r2, #4]
 8001e22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e26:	605a      	str	r2, [r3, #4]
      
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2221      	movs	r2, #33	; 0x21
 8001e2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2228      	movs	r2, #40	; 0x28
 8001e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      
      /* Call the Tx complete callback to inform upper layer of the end of receive process */
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7ff fad2 	bl	80013e0 <HAL_I2C_SlaveTxCpltCallback>
    }
  }
  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  if(hi2c->XferCount != 0U)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d00f      	beq.n	8001e78 <I2C_SlaveTransmit_BTF+0x32>
  {
    /* Write data to DR */
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e60:	1c58      	adds	r0, r3, #1
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	6248      	str	r0, [r1, #36]	; 0x24
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	6113      	str	r3, [r2, #16]
    hi2c->XferCount--;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	3b01      	subs	r3, #1
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr

08001e84 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	60fb      	str	r3, [r7, #12]

  if(hi2c->XferCount != 0U)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d02a      	beq.n	8001ef6 <I2C_SlaveReceive_RXNE+0x72>
  {
    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea4:	1c59      	adds	r1, r3, #1
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	6251      	str	r1, [r2, #36]	; 0x24
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	6812      	ldr	r2, [r2, #0]
 8001eae:	6912      	ldr	r2, [r2, #16]
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d114      	bne.n	8001ef6 <I2C_SlaveReceive_RXNE+0x72>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2b2a      	cmp	r3, #42	; 0x2a
 8001ed0:	d111      	bne.n	8001ef6 <I2C_SlaveReceive_RXNE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	6812      	ldr	r2, [r2, #0]
 8001eda:	6852      	ldr	r2, [r2, #4]
 8001edc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ee0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2222      	movs	r2, #34	; 0x22
 8001ee6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2228      	movs	r2, #40	; 0x28
 8001eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the Rx complete callback to inform upper layer of the end of receive process */
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f7ff fa7e 	bl	80013f2 <HAL_I2C_SlaveRxCpltCallback>
    }
  }
  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  if(hi2c->XferCount != 0U)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d010      	beq.n	8001f34 <I2C_SlaveReceive_BTF+0x34>
  {
    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f16:	1c59      	adds	r1, r3, #1
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6251      	str	r1, [r2, #36]	; 0x24
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	6812      	ldr	r2, [r2, #0]
 8001f20:	6912      	ldr	r2, [r2, #16]
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr

08001f40 <I2C_Slave_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode = 0U;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	81bb      	strh	r3, [r7, #12]

  /* Transfer Direction requested by Master */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	f003 0304 	and.w	r3, r3, #4
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	d001      	beq.n	8001f62 <I2C_Slave_ADDR+0x22>
  {
    TransferDirection = I2C_DIRECTION_TRANSMIT;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	73fb      	strb	r3, [r7, #15]
  }
  
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6c:	2b80      	cmp	r3, #128	; 0x80
 8001f6e:	d003      	beq.n	8001f78 <I2C_Slave_ADDR+0x38>
  {
    SlaveAddrCode = hi2c->Init.OwnAddress1;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	81bb      	strh	r3, [r7, #12]
 8001f76:	e002      	b.n	8001f7e <I2C_Slave_ADDR+0x3e>
  }
  else
  {
    SlaveAddrCode = hi2c->Init.OwnAddress2;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	81bb      	strh	r3, [r7, #12]
  }

  /* Call Slave Addr callback */
  HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8001f7e:	89ba      	ldrh	r2, [r7, #12]
 8001f80:	7bfb      	ldrb	r3, [r7, #15]
 8001f82:	4619      	mov	r1, r3
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff fa3d 	bl	8001404 <HAL_I2C_AddrCallback>

  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	60fb      	str	r3, [r7, #12]
  
  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6812      	ldr	r2, [r2, #0]
 8001fae:	6852      	ldr	r2, [r2, #4]
 8001fb0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001fb4:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60bb      	str	r3, [r7, #8]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	695b      	ldr	r3, [r3, #20]
 8001fc0:	60bb      	str	r3, [r7, #8]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	6812      	ldr	r2, [r2, #0]
 8001fca:	6812      	ldr	r2, [r2, #0]
 8001fcc:	f042 0201 	orr.w	r2, r2, #1
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	6812      	ldr	r2, [r2, #0]
 8001fdc:	6812      	ldr	r2, [r2, #0]
 8001fde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fe2:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ff2:	d11a      	bne.n	800202a <I2C_Slave_STOPF+0x96>
  {
    if((hi2c->State == HAL_I2C_STATE_BUSY_RX) || (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b22      	cmp	r3, #34	; 0x22
 8001ffe:	d005      	beq.n	800200c <I2C_Slave_STOPF+0x78>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b2a      	cmp	r3, #42	; 0x2a
 800200a:	d107      	bne.n	800201c <I2C_Slave_STOPF+0x88>
    {
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	b29a      	uxth	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	855a      	strh	r2, [r3, #42]	; 0x2a
 800201a:	e006      	b.n	800202a <I2C_Slave_STOPF+0x96>
    }
    else
    {
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	b29a      	uxth	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if(hi2c->XferCount != 0U)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800202e:	b29b      	uxth	r3, r3
 8002030:	2b00      	cmp	r3, #0
 8002032:	d035      	beq.n	80020a0 <I2C_Slave_STOPF+0x10c>
  {
    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	f003 0304 	and.w	r3, r3, #4
 800203e:	2b04      	cmp	r3, #4
 8002040:	d110      	bne.n	8002064 <I2C_Slave_STOPF+0xd0>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002046:	1c59      	adds	r1, r3, #1
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6251      	str	r1, [r2, #36]	; 0x24
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6812      	ldr	r2, [r2, #0]
 8002050:	6912      	ldr	r2, [r2, #16]
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800205a:	b29b      	uxth	r3, r3
 800205c:	3b01      	subs	r3, #1
 800205e:	b29a      	uxth	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800206e:	2b40      	cmp	r3, #64	; 0x40
 8002070:	d110      	bne.n	8002094 <I2C_Slave_STOPF+0x100>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002076:	1c59      	adds	r1, r3, #1
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6251      	str	r1, [r2, #36]	; 0x24
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	6812      	ldr	r2, [r2, #0]
 8002080:	6912      	ldr	r2, [r2, #16]
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800208a:	b29b      	uxth	r3, r3
 800208c:	3b01      	subs	r3, #1
 800208e:	b29a      	uxth	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002098:	f043 0204 	orr.w	r2, r3, #4
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d003      	beq.n	80020b0 <I2C_Slave_STOPF+0x11c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 f8ab 	bl	8002204 <I2C_ITError>
 80020ae:	e02f      	b.n	8002110 <I2C_Slave_STOPF+0x17c>
  }
  else
  {
    if((CurrentState == HAL_I2C_STATE_LISTEN ) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN) || \
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2b28      	cmp	r3, #40	; 0x28
 80020b4:	d005      	beq.n	80020c2 <I2C_Slave_STOPF+0x12e>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2b2a      	cmp	r3, #42	; 0x2a
 80020ba:	d002      	beq.n	80020c2 <I2C_Slave_STOPF+0x12e>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2b29      	cmp	r3, #41	; 0x29
 80020c0:	d111      	bne.n	80020e6 <I2C_Slave_STOPF+0x152>
       (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
    {
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a15      	ldr	r2, [pc, #84]	; (800211c <I2C_Slave_STOPF+0x188>)
 80020c6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2220      	movs	r2, #32
 80020d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
      HAL_I2C_ListenCpltCallback(hi2c);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7ff f99d 	bl	800141e <HAL_I2C_ListenCpltCallback>
 80020e4:	e014      	b.n	8002110 <I2C_Slave_STOPF+0x17c>
    }
    else
    {
      if((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	2b22      	cmp	r3, #34	; 0x22
 80020ec:	d002      	beq.n	80020f4 <I2C_Slave_STOPF+0x160>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2b22      	cmp	r3, #34	; 0x22
 80020f2:	d10d      	bne.n	8002110 <I2C_Slave_STOPF+0x17c>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2220      	movs	r2, #32
 80020fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7ff f971 	bl	80013f2 <HAL_I2C_SlaveRxCpltCallback>
      }
    }
  }
  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	ffff0000 	.word	0xffff0000

08002120 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState       = hi2c->State;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800212e:	b2db      	uxtb	r3, r3
 8002130:	60fb      	str	r3, [r7, #12]
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002136:	60bb      	str	r3, [r7, #8]

  if(((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	2b04      	cmp	r3, #4
 800213c:	d002      	beq.n	8002144 <I2C_Slave_AF+0x24>
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	2b08      	cmp	r3, #8
 8002142:	d129      	bne.n	8002198 <I2C_Slave_AF+0x78>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2b28      	cmp	r3, #40	; 0x28
 8002148:	d126      	bne.n	8002198 <I2C_Slave_AF+0x78>
          (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a2c      	ldr	r2, [pc, #176]	; (8002200 <I2C_Slave_AF+0xe0>)
 800214e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	6812      	ldr	r2, [r2, #0]
 8002158:	6852      	ldr	r2, [r2, #4]
 800215a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800215e:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002168:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	6812      	ldr	r2, [r2, #0]
 8002172:	6812      	ldr	r2, [r2, #0]
 8002174:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002178:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2220      	movs	r2, #32
 8002184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      
    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    HAL_I2C_ListenCpltCallback(hi2c);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7ff f944 	bl	800141e <HAL_I2C_ListenCpltCallback>
 8002196:	e02e      	b.n	80021f6 <I2C_Slave_AF+0xd6>
  }
  else if(CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2b21      	cmp	r3, #33	; 0x21
 800219c:	d126      	bne.n	80021ec <I2C_Slave_AF+0xcc>
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a17      	ldr	r2, [pc, #92]	; (8002200 <I2C_Slave_AF+0xe0>)
 80021a2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2221      	movs	r2, #33	; 0x21
 80021a8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2220      	movs	r2, #32
 80021ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	6812      	ldr	r2, [r2, #0]
 80021c2:	6852      	ldr	r2, [r2, #4]
 80021c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80021c8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021d2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	6812      	ldr	r2, [r2, #0]
 80021dc:	6812      	ldr	r2, [r2, #0]
 80021de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021e2:	601a      	str	r2, [r3, #0]

    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f7ff f8fb 	bl	80013e0 <HAL_I2C_SlaveTxCpltCallback>
 80021ea:	e004      	b.n	80021f6 <I2C_Slave_AF+0xd6>
  }
  else
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021f4:	615a      	str	r2, [r3, #20]
  }
  
  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	ffff0000 	.word	0xffff0000

08002204 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002212:	b2db      	uxtb	r3, r3
 8002214:	60fb      	str	r3, [r7, #12]

  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2b29      	cmp	r3, #41	; 0x29
 800221a:	d002      	beq.n	8002222 <I2C_ITError+0x1e>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2b2a      	cmp	r3, #42	; 0x2a
 8002220:	d107      	bne.n	8002232 <I2C_ITError+0x2e>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2228      	movs	r2, #40	; 0x28
 800222c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002230:	e018      	b.n	8002264 <I2C_ITError+0x60>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if((hi2c->State != HAL_I2C_STATE_ABORT) && ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) != I2C_CR2_DMAEN))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b60      	cmp	r3, #96	; 0x60
 800223c:	d00b      	beq.n	8002256 <I2C_ITError+0x52>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002248:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800224c:	d003      	beq.n	8002256 <I2C_ITError+0x52>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2220      	movs	r2, #32
 8002252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
  hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	6812      	ldr	r2, [r2, #0]
 800226c:	6812      	ldr	r2, [r2, #0]
 800226e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002272:	601a      	str	r2, [r3, #0]

  /* Abort DMA transfer */
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800227e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002282:	d15f      	bne.n	8002344 <I2C_ITError+0x140>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	6812      	ldr	r2, [r2, #0]
 800228c:	6852      	ldr	r2, [r2, #4]
 800228e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002292:	605a      	str	r2, [r3, #4]

    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002298:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800229c:	2b01      	cmp	r3, #1
 800229e:	d020      	beq.n	80022e2 <I2C_ITError+0xde>
    {
      /* Set the DMA Abort callback : 
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a4:	4a57      	ldr	r2, [pc, #348]	; (8002404 <I2C_ITError+0x200>)
 80022a6:	635a      	str	r2, [r3, #52]	; 0x34

      if(HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7fe f9c7 	bl	8000640 <HAL_DMA_Abort_IT>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f000 8083 	beq.w	80023c0 <I2C_ITError+0x1bc>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	6812      	ldr	r2, [r2, #0]
 80022c2:	6812      	ldr	r2, [r2, #0]
 80022c4:	f022 0201 	bic.w	r2, r2, #1
 80022c8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2220      	movs	r2, #32
 80022ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022dc:	4610      	mov	r0, r2
 80022de:	4798      	blx	r3
 80022e0:	e06e      	b.n	80023c0 <I2C_ITError+0x1bc>
    }
    else
    {
      /* Set the DMA Abort callback : 
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e6:	4a47      	ldr	r2, [pc, #284]	; (8002404 <I2C_ITError+0x200>)
 80022e8:	635a      	str	r2, [r3, #52]	; 0x34

      if(HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7fe f9a6 	bl	8000640 <HAL_DMA_Abort_IT>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d062      	beq.n	80023c0 <I2C_ITError+0x1bc>
      {
        /* Store Last receive data if any */
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002304:	2b40      	cmp	r3, #64	; 0x40
 8002306:	d109      	bne.n	800231c <I2C_ITError+0x118>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	1c59      	adds	r1, r3, #1
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	6251      	str	r1, [r2, #36]	; 0x24
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6812      	ldr	r2, [r2, #0]
 8002316:	6912      	ldr	r2, [r2, #16]
 8002318:	b2d2      	uxtb	r2, r2
 800231a:	701a      	strb	r2, [r3, #0]
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	6812      	ldr	r2, [r2, #0]
 8002324:	6812      	ldr	r2, [r2, #0]
 8002326:	f022 0201 	bic.w	r2, r2, #1
 800232a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2220      	movs	r2, #32
 8002330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800233e:	4610      	mov	r0, r2
 8002340:	4798      	blx	r3
 8002342:	e03d      	b.n	80023c0 <I2C_ITError+0x1bc>
      }
    }
  }
  else if(hi2c->State == HAL_I2C_STATE_ABORT)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b60      	cmp	r3, #96	; 0x60
 800234e:	d123      	bne.n	8002398 <I2C_ITError+0x194>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2220      	movs	r2, #32
 8002354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002368:	2b40      	cmp	r3, #64	; 0x40
 800236a:	d109      	bne.n	8002380 <I2C_ITError+0x17c>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002370:	1c59      	adds	r1, r3, #1
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	6251      	str	r1, [r2, #36]	; 0x24
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	6812      	ldr	r2, [r2, #0]
 800237a:	6912      	ldr	r2, [r2, #16]
 800237c:	b2d2      	uxtb	r2, r2
 800237e:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	6812      	ldr	r2, [r2, #0]
 8002388:	6812      	ldr	r2, [r2, #0]
 800238a:	f022 0201 	bic.w	r2, r2, #1
 800238e:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_AbortCpltCallback(hi2c);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f7ff f85f 	bl	8001454 <HAL_I2C_AbortCpltCallback>
 8002396:	e013      	b.n	80023c0 <I2C_ITError+0x1bc>
  }
  else
  {
    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a2:	2b40      	cmp	r3, #64	; 0x40
 80023a4:	d109      	bne.n	80023ba <I2C_ITError+0x1b6>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	1c59      	adds	r1, r3, #1
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6251      	str	r1, [r2, #36]	; 0x24
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	6812      	ldr	r2, [r2, #0]
 80023b4:	6912      	ldr	r2, [r2, #16]
 80023b6:	b2d2      	uxtb	r2, r2
 80023b8:	701a      	strb	r2, [r3, #0]
    }

    /* Call user error callback */
    HAL_I2C_ErrorCallback(hi2c);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 ff56 	bl	800326c <HAL_I2C_ErrorCallback>
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  if((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	2b28      	cmp	r3, #40	; 0x28
 80023ca:	d116      	bne.n	80023fa <I2C_ITError+0x1f6>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	d110      	bne.n	80023fa <I2C_ITError+0x1f6>
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a0b      	ldr	r2, [pc, #44]	; (8002408 <I2C_ITError+0x204>)
 80023dc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2220      	movs	r2, #32
 80023e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    HAL_I2C_ListenCpltCallback(hi2c);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7ff f812 	bl	800141e <HAL_I2C_ListenCpltCallback>
  }
}
 80023fa:	bf00      	nop
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	08002547 	.word	0x08002547
 8002408:	ffff0000 	.word	0xffff0000

0800240c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef* hi2c = (I2C_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002418:	617b      	str	r3, [r7, #20]
  
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002420:	b2db      	uxtb	r3, r3
 8002422:	613b      	str	r3, [r7, #16]
  uint32_t CurrentMode  = hi2c->Mode;
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800242a:	b2db      	uxtb	r3, r3
 800242c:	60fb      	str	r3, [r7, #12]

  if((CurrentState == HAL_I2C_STATE_BUSY_TX) || ((CurrentState == HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE))) 
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	2b21      	cmp	r3, #33	; 0x21
 8002432:	d005      	beq.n	8002440 <I2C_DMAXferCplt+0x34>
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	2b22      	cmp	r3, #34	; 0x22
 8002438:	d116      	bne.n	8002468 <I2C_DMAXferCplt+0x5c>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2b20      	cmp	r3, #32
 800243e:	d113      	bne.n	8002468 <I2C_DMAXferCplt+0x5c>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	6812      	ldr	r2, [r2, #0]
 8002448:	6852      	ldr	r2, [r2, #4]
 800244a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800244e:	605a      	str	r2, [r3, #4]
    
    hi2c->XferCount = 0U;
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	2200      	movs	r2, #0
 8002454:	855a      	strh	r2, [r3, #42]	; 0x2a
    
    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	6812      	ldr	r2, [r2, #0]
 800245e:	6852      	ldr	r2, [r2, #4]
 8002460:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002464:	605a      	str	r2, [r3, #4]

        HAL_I2C_MasterRxCpltCallback(hi2c);
      }
    }
  }
}
 8002466:	e043      	b.n	80024f0 <I2C_DMAXferCplt+0xe4>
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	697a      	ldr	r2, [r7, #20]
 800246e:	6812      	ldr	r2, [r2, #0]
 8002470:	6812      	ldr	r2, [r2, #0]
 8002472:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002476:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	697a      	ldr	r2, [r7, #20]
 800247e:	6812      	ldr	r2, [r2, #0]
 8002480:	6812      	ldr	r2, [r2, #0]
 8002482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002486:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR2 &= ~I2C_CR2_LAST;
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	6812      	ldr	r2, [r2, #0]
 8002490:	6852      	ldr	r2, [r2, #4]
 8002492:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002496:	605a      	str	r2, [r3, #4]
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	6812      	ldr	r2, [r2, #0]
 80024a0:	6852      	ldr	r2, [r2, #4]
 80024a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024a6:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	2200      	movs	r2, #0
 80024ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d003      	beq.n	80024be <I2C_DMAXferCplt+0xb2>
      HAL_I2C_ErrorCallback(hi2c);
 80024b6:	6978      	ldr	r0, [r7, #20]
 80024b8:	f000 fed8 	bl	800326c <HAL_I2C_ErrorCallback>
}
 80024bc:	e018      	b.n	80024f0 <I2C_DMAXferCplt+0xe4>
      hi2c->State = HAL_I2C_STATE_READY;
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	2220      	movs	r2, #32
 80024c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b40      	cmp	r3, #64	; 0x40
 80024d0:	d107      	bne.n	80024e2 <I2C_DMAXferCplt+0xd6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MemRxCpltCallback(hi2c);
 80024da:	6978      	ldr	r0, [r7, #20]
 80024dc:	f7fe ffb1 	bl	8001442 <HAL_I2C_MemRxCpltCallback>
}
 80024e0:	e006      	b.n	80024f0 <I2C_DMAXferCplt+0xe4>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80024ea:	6978      	ldr	r0, [r7, #20]
 80024ec:	f7fe ff6f 	bl	80013ce <HAL_I2C_MasterRxCpltCallback>
}
 80024f0:	bf00      	nop
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef* hi2c = (I2C_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002504:	60fb      	str	r3, [r7, #12]
  
  /* Disable Acknowledge */
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	6812      	ldr	r2, [r2, #0]
 800250e:	6812      	ldr	r2, [r2, #0]
 8002510:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002514:	601a      	str	r2, [r3, #0]
  
  hi2c->XferCount = 0U;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	855a      	strh	r2, [r3, #42]	; 0x2a
  
  hi2c->State = HAL_I2C_STATE_READY;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2220      	movs	r2, #32
 8002520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
  hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002530:	f043 0210 	orr.w	r2, r3, #16
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	641a      	str	r2, [r3, #64]	; 0x40
  
    HAL_I2C_ErrorCallback(hi2c);
 8002538:	68f8      	ldr	r0, [r7, #12]
 800253a:	f000 fe97 	bl	800326c <HAL_I2C_ErrorCallback>
}
 800253e:	bf00      	nop
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma: DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b084      	sub	sp, #16
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef* hi2c = ( I2C_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002552:	60fb      	str	r3, [r7, #12]
  
  /* Disable Acknowledge */
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	6812      	ldr	r2, [r2, #0]
 800255c:	6812      	ldr	r2, [r2, #0]
 800255e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002562:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800256e:	2200      	movs	r2, #0
 8002570:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002576:	2200      	movs	r2, #0
 8002578:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if come from abort from user */
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b60      	cmp	r3, #96	; 0x60
 8002584:	d116      	bne.n	80025b4 <I2C_DMAAbort+0x6e>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2220      	movs	r2, #32
 800258a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	6812      	ldr	r2, [r2, #0]
 80025a4:	6812      	ldr	r2, [r2, #0]
 80025a6:	f022 0201 	bic.w	r2, r2, #1
 80025aa:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_AbortCpltCallback(hi2c);
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f7fe ff51 	bl	8001454 <HAL_I2C_AbortCpltCallback>
    __HAL_I2C_DISABLE(hi2c);

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_ErrorCallback(hi2c);
  }
}
 80025b2:	e012      	b.n	80025da <I2C_DMAAbort+0x94>
    hi2c->State = HAL_I2C_STATE_READY;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2220      	movs	r2, #32
 80025b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE(hi2c);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	6812      	ldr	r2, [r2, #0]
 80025cc:	6812      	ldr	r2, [r2, #0]
 80025ce:	f022 0201 	bic.w	r2, r2, #1
 80025d2:	601a      	str	r2, [r3, #0]
    HAL_I2C_ErrorCallback(hi2c);
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f000 fe49 	bl	800326c <HAL_I2C_ErrorCallback>
}
 80025da:	bf00      	nop
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
	...

080025e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f000 8087 	beq.w	800270c <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80025fe:	4b92      	ldr	r3, [pc, #584]	; (8002848 <HAL_RCC_OscConfig+0x264>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f003 030c 	and.w	r3, r3, #12
 8002606:	2b04      	cmp	r3, #4
 8002608:	d00c      	beq.n	8002624 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800260a:	4b8f      	ldr	r3, [pc, #572]	; (8002848 <HAL_RCC_OscConfig+0x264>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f003 030c 	and.w	r3, r3, #12
 8002612:	2b08      	cmp	r3, #8
 8002614:	d112      	bne.n	800263c <HAL_RCC_OscConfig+0x58>
 8002616:	4b8c      	ldr	r3, [pc, #560]	; (8002848 <HAL_RCC_OscConfig+0x264>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800261e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002622:	d10b      	bne.n	800263c <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002624:	4b88      	ldr	r3, [pc, #544]	; (8002848 <HAL_RCC_OscConfig+0x264>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d06c      	beq.n	800270a <HAL_RCC_OscConfig+0x126>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d168      	bne.n	800270a <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e22d      	b.n	8002a98 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002644:	d106      	bne.n	8002654 <HAL_RCC_OscConfig+0x70>
 8002646:	4a80      	ldr	r2, [pc, #512]	; (8002848 <HAL_RCC_OscConfig+0x264>)
 8002648:	4b7f      	ldr	r3, [pc, #508]	; (8002848 <HAL_RCC_OscConfig+0x264>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002650:	6013      	str	r3, [r2, #0]
 8002652:	e02e      	b.n	80026b2 <HAL_RCC_OscConfig+0xce>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10c      	bne.n	8002676 <HAL_RCC_OscConfig+0x92>
 800265c:	4a7a      	ldr	r2, [pc, #488]	; (8002848 <HAL_RCC_OscConfig+0x264>)
 800265e:	4b7a      	ldr	r3, [pc, #488]	; (8002848 <HAL_RCC_OscConfig+0x264>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002666:	6013      	str	r3, [r2, #0]
 8002668:	4a77      	ldr	r2, [pc, #476]	; (8002848 <HAL_RCC_OscConfig+0x264>)
 800266a:	4b77      	ldr	r3, [pc, #476]	; (8002848 <HAL_RCC_OscConfig+0x264>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002672:	6013      	str	r3, [r2, #0]
 8002674:	e01d      	b.n	80026b2 <HAL_RCC_OscConfig+0xce>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800267e:	d10c      	bne.n	800269a <HAL_RCC_OscConfig+0xb6>
 8002680:	4a71      	ldr	r2, [pc, #452]	; (8002848 <HAL_RCC_OscConfig+0x264>)
 8002682:	4b71      	ldr	r3, [pc, #452]	; (8002848 <HAL_RCC_OscConfig+0x264>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800268a:	6013      	str	r3, [r2, #0]
 800268c:	4a6e      	ldr	r2, [pc, #440]	; (8002848 <HAL_RCC_OscConfig+0x264>)
 800268e:	4b6e      	ldr	r3, [pc, #440]	; (8002848 <HAL_RCC_OscConfig+0x264>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002696:	6013      	str	r3, [r2, #0]
 8002698:	e00b      	b.n	80026b2 <HAL_RCC_OscConfig+0xce>
 800269a:	4a6b      	ldr	r2, [pc, #428]	; (8002848 <HAL_RCC_OscConfig+0x264>)
 800269c:	4b6a      	ldr	r3, [pc, #424]	; (8002848 <HAL_RCC_OscConfig+0x264>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026a4:	6013      	str	r3, [r2, #0]
 80026a6:	4a68      	ldr	r2, [pc, #416]	; (8002848 <HAL_RCC_OscConfig+0x264>)
 80026a8:	4b67      	ldr	r3, [pc, #412]	; (8002848 <HAL_RCC_OscConfig+0x264>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026b0:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d013      	beq.n	80026e2 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ba:	f7fd fd9f 	bl	80001fc <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c0:	e008      	b.n	80026d4 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026c2:	f7fd fd9b 	bl	80001fc <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b64      	cmp	r3, #100	; 0x64
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e1e1      	b.n	8002a98 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d4:	4b5c      	ldr	r3, [pc, #368]	; (8002848 <HAL_RCC_OscConfig+0x264>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0f0      	beq.n	80026c2 <HAL_RCC_OscConfig+0xde>
 80026e0:	e014      	b.n	800270c <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e2:	f7fd fd8b 	bl	80001fc <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026e8:	e008      	b.n	80026fc <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026ea:	f7fd fd87 	bl	80001fc <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b64      	cmp	r3, #100	; 0x64
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e1cd      	b.n	8002a98 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026fc:	4b52      	ldr	r3, [pc, #328]	; (8002848 <HAL_RCC_OscConfig+0x264>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1f0      	bne.n	80026ea <HAL_RCC_OscConfig+0x106>
 8002708:	e000      	b.n	800270c <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800270a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d063      	beq.n	80027e0 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002718:	4b4b      	ldr	r3, [pc, #300]	; (8002848 <HAL_RCC_OscConfig+0x264>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f003 030c 	and.w	r3, r3, #12
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00b      	beq.n	800273c <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002724:	4b48      	ldr	r3, [pc, #288]	; (8002848 <HAL_RCC_OscConfig+0x264>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f003 030c 	and.w	r3, r3, #12
 800272c:	2b08      	cmp	r3, #8
 800272e:	d11c      	bne.n	800276a <HAL_RCC_OscConfig+0x186>
 8002730:	4b45      	ldr	r3, [pc, #276]	; (8002848 <HAL_RCC_OscConfig+0x264>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d116      	bne.n	800276a <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800273c:	4b42      	ldr	r3, [pc, #264]	; (8002848 <HAL_RCC_OscConfig+0x264>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d005      	beq.n	8002754 <HAL_RCC_OscConfig+0x170>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d001      	beq.n	8002754 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e1a1      	b.n	8002a98 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002754:	493c      	ldr	r1, [pc, #240]	; (8002848 <HAL_RCC_OscConfig+0x264>)
 8002756:	4b3c      	ldr	r3, [pc, #240]	; (8002848 <HAL_RCC_OscConfig+0x264>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	4313      	orrs	r3, r2
 8002766:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002768:	e03a      	b.n	80027e0 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d020      	beq.n	80027b4 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002772:	4b36      	ldr	r3, [pc, #216]	; (800284c <HAL_RCC_OscConfig+0x268>)
 8002774:	2201      	movs	r2, #1
 8002776:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002778:	f7fd fd40 	bl	80001fc <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002780:	f7fd fd3c 	bl	80001fc <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e182      	b.n	8002a98 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002792:	4b2d      	ldr	r3, [pc, #180]	; (8002848 <HAL_RCC_OscConfig+0x264>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0f0      	beq.n	8002780 <HAL_RCC_OscConfig+0x19c>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800279e:	492a      	ldr	r1, [pc, #168]	; (8002848 <HAL_RCC_OscConfig+0x264>)
 80027a0:	4b29      	ldr	r3, [pc, #164]	; (8002848 <HAL_RCC_OscConfig+0x264>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	4313      	orrs	r3, r2
 80027b0:	600b      	str	r3, [r1, #0]
 80027b2:	e015      	b.n	80027e0 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027b4:	4b25      	ldr	r3, [pc, #148]	; (800284c <HAL_RCC_OscConfig+0x268>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ba:	f7fd fd1f 	bl	80001fc <HAL_GetTick>
 80027be:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027c0:	e008      	b.n	80027d4 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027c2:	f7fd fd1b 	bl	80001fc <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e161      	b.n	8002a98 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027d4:	4b1c      	ldr	r3, [pc, #112]	; (8002848 <HAL_RCC_OscConfig+0x264>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1f0      	bne.n	80027c2 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0308 	and.w	r3, r3, #8
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d039      	beq.n	8002860 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d019      	beq.n	8002828 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027f4:	4b16      	ldr	r3, [pc, #88]	; (8002850 <HAL_RCC_OscConfig+0x26c>)
 80027f6:	2201      	movs	r2, #1
 80027f8:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027fa:	f7fd fcff 	bl	80001fc <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002802:	f7fd fcfb 	bl	80001fc <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e141      	b.n	8002a98 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002814:	4b0c      	ldr	r3, [pc, #48]	; (8002848 <HAL_RCC_OscConfig+0x264>)
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0f0      	beq.n	8002802 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8002820:	2001      	movs	r0, #1
 8002822:	f000 fab7 	bl	8002d94 <RCC_Delay>
 8002826:	e01b      	b.n	8002860 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002828:	4b09      	ldr	r3, [pc, #36]	; (8002850 <HAL_RCC_OscConfig+0x26c>)
 800282a:	2200      	movs	r2, #0
 800282c:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800282e:	f7fd fce5 	bl	80001fc <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002834:	e00e      	b.n	8002854 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002836:	f7fd fce1 	bl	80001fc <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d907      	bls.n	8002854 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e127      	b.n	8002a98 <HAL_RCC_OscConfig+0x4b4>
 8002848:	40021000 	.word	0x40021000
 800284c:	42420000 	.word	0x42420000
 8002850:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002854:	4b92      	ldr	r3, [pc, #584]	; (8002aa0 <HAL_RCC_OscConfig+0x4bc>)
 8002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1ea      	bne.n	8002836 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 80a6 	beq.w	80029ba <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800286e:	2300      	movs	r3, #0
 8002870:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002872:	4b8b      	ldr	r3, [pc, #556]	; (8002aa0 <HAL_RCC_OscConfig+0x4bc>)
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10d      	bne.n	800289a <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800287e:	4a88      	ldr	r2, [pc, #544]	; (8002aa0 <HAL_RCC_OscConfig+0x4bc>)
 8002880:	4b87      	ldr	r3, [pc, #540]	; (8002aa0 <HAL_RCC_OscConfig+0x4bc>)
 8002882:	69db      	ldr	r3, [r3, #28]
 8002884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002888:	61d3      	str	r3, [r2, #28]
 800288a:	4b85      	ldr	r3, [pc, #532]	; (8002aa0 <HAL_RCC_OscConfig+0x4bc>)
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002896:	2301      	movs	r3, #1
 8002898:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289a:	4b82      	ldr	r3, [pc, #520]	; (8002aa4 <HAL_RCC_OscConfig+0x4c0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d118      	bne.n	80028d8 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028a6:	4a7f      	ldr	r2, [pc, #508]	; (8002aa4 <HAL_RCC_OscConfig+0x4c0>)
 80028a8:	4b7e      	ldr	r3, [pc, #504]	; (8002aa4 <HAL_RCC_OscConfig+0x4c0>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028b2:	f7fd fca3 	bl	80001fc <HAL_GetTick>
 80028b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b8:	e008      	b.n	80028cc <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ba:	f7fd fc9f 	bl	80001fc <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b64      	cmp	r3, #100	; 0x64
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e0e5      	b.n	8002a98 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028cc:	4b75      	ldr	r3, [pc, #468]	; (8002aa4 <HAL_RCC_OscConfig+0x4c0>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d0f0      	beq.n	80028ba <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d106      	bne.n	80028ee <HAL_RCC_OscConfig+0x30a>
 80028e0:	4a6f      	ldr	r2, [pc, #444]	; (8002aa0 <HAL_RCC_OscConfig+0x4bc>)
 80028e2:	4b6f      	ldr	r3, [pc, #444]	; (8002aa0 <HAL_RCC_OscConfig+0x4bc>)
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	f043 0301 	orr.w	r3, r3, #1
 80028ea:	6213      	str	r3, [r2, #32]
 80028ec:	e02d      	b.n	800294a <HAL_RCC_OscConfig+0x366>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10c      	bne.n	8002910 <HAL_RCC_OscConfig+0x32c>
 80028f6:	4a6a      	ldr	r2, [pc, #424]	; (8002aa0 <HAL_RCC_OscConfig+0x4bc>)
 80028f8:	4b69      	ldr	r3, [pc, #420]	; (8002aa0 <HAL_RCC_OscConfig+0x4bc>)
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	f023 0301 	bic.w	r3, r3, #1
 8002900:	6213      	str	r3, [r2, #32]
 8002902:	4a67      	ldr	r2, [pc, #412]	; (8002aa0 <HAL_RCC_OscConfig+0x4bc>)
 8002904:	4b66      	ldr	r3, [pc, #408]	; (8002aa0 <HAL_RCC_OscConfig+0x4bc>)
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	f023 0304 	bic.w	r3, r3, #4
 800290c:	6213      	str	r3, [r2, #32]
 800290e:	e01c      	b.n	800294a <HAL_RCC_OscConfig+0x366>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	2b05      	cmp	r3, #5
 8002916:	d10c      	bne.n	8002932 <HAL_RCC_OscConfig+0x34e>
 8002918:	4a61      	ldr	r2, [pc, #388]	; (8002aa0 <HAL_RCC_OscConfig+0x4bc>)
 800291a:	4b61      	ldr	r3, [pc, #388]	; (8002aa0 <HAL_RCC_OscConfig+0x4bc>)
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	f043 0304 	orr.w	r3, r3, #4
 8002922:	6213      	str	r3, [r2, #32]
 8002924:	4a5e      	ldr	r2, [pc, #376]	; (8002aa0 <HAL_RCC_OscConfig+0x4bc>)
 8002926:	4b5e      	ldr	r3, [pc, #376]	; (8002aa0 <HAL_RCC_OscConfig+0x4bc>)
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	f043 0301 	orr.w	r3, r3, #1
 800292e:	6213      	str	r3, [r2, #32]
 8002930:	e00b      	b.n	800294a <HAL_RCC_OscConfig+0x366>
 8002932:	4a5b      	ldr	r2, [pc, #364]	; (8002aa0 <HAL_RCC_OscConfig+0x4bc>)
 8002934:	4b5a      	ldr	r3, [pc, #360]	; (8002aa0 <HAL_RCC_OscConfig+0x4bc>)
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	f023 0301 	bic.w	r3, r3, #1
 800293c:	6213      	str	r3, [r2, #32]
 800293e:	4a58      	ldr	r2, [pc, #352]	; (8002aa0 <HAL_RCC_OscConfig+0x4bc>)
 8002940:	4b57      	ldr	r3, [pc, #348]	; (8002aa0 <HAL_RCC_OscConfig+0x4bc>)
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	f023 0304 	bic.w	r3, r3, #4
 8002948:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d015      	beq.n	800297e <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002952:	f7fd fc53 	bl	80001fc <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002958:	e00a      	b.n	8002970 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800295a:	f7fd fc4f 	bl	80001fc <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	f241 3288 	movw	r2, #5000	; 0x1388
 8002968:	4293      	cmp	r3, r2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e093      	b.n	8002a98 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002970:	4b4b      	ldr	r3, [pc, #300]	; (8002aa0 <HAL_RCC_OscConfig+0x4bc>)
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d0ee      	beq.n	800295a <HAL_RCC_OscConfig+0x376>
 800297c:	e014      	b.n	80029a8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800297e:	f7fd fc3d 	bl	80001fc <HAL_GetTick>
 8002982:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002984:	e00a      	b.n	800299c <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002986:	f7fd fc39 	bl	80001fc <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	f241 3288 	movw	r2, #5000	; 0x1388
 8002994:	4293      	cmp	r3, r2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e07d      	b.n	8002a98 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800299c:	4b40      	ldr	r3, [pc, #256]	; (8002aa0 <HAL_RCC_OscConfig+0x4bc>)
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1ee      	bne.n	8002986 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029a8:	7dfb      	ldrb	r3, [r7, #23]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d105      	bne.n	80029ba <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ae:	4a3c      	ldr	r2, [pc, #240]	; (8002aa0 <HAL_RCC_OscConfig+0x4bc>)
 80029b0:	4b3b      	ldr	r3, [pc, #236]	; (8002aa0 <HAL_RCC_OscConfig+0x4bc>)
 80029b2:	69db      	ldr	r3, [r3, #28]
 80029b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d069      	beq.n	8002a96 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029c2:	4b37      	ldr	r3, [pc, #220]	; (8002aa0 <HAL_RCC_OscConfig+0x4bc>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f003 030c 	and.w	r3, r3, #12
 80029ca:	2b08      	cmp	r3, #8
 80029cc:	d061      	beq.n	8002a92 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d146      	bne.n	8002a64 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d6:	4b34      	ldr	r3, [pc, #208]	; (8002aa8 <HAL_RCC_OscConfig+0x4c4>)
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029dc:	f7fd fc0e 	bl	80001fc <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029e4:	f7fd fc0a 	bl	80001fc <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e050      	b.n	8002a98 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029f6:	4b2a      	ldr	r3, [pc, #168]	; (8002aa0 <HAL_RCC_OscConfig+0x4bc>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f0      	bne.n	80029e4 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a0a:	d108      	bne.n	8002a1e <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a0c:	4924      	ldr	r1, [pc, #144]	; (8002aa0 <HAL_RCC_OscConfig+0x4bc>)
 8002a0e:	4b24      	ldr	r3, [pc, #144]	; (8002aa0 <HAL_RCC_OscConfig+0x4bc>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a1e:	4820      	ldr	r0, [pc, #128]	; (8002aa0 <HAL_RCC_OscConfig+0x4bc>)
 8002a20:	4b1f      	ldr	r3, [pc, #124]	; (8002aa0 <HAL_RCC_OscConfig+0x4bc>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a19      	ldr	r1, [r3, #32]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a30:	430b      	orrs	r3, r1
 8002a32:	4313      	orrs	r3, r2
 8002a34:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a36:	4b1c      	ldr	r3, [pc, #112]	; (8002aa8 <HAL_RCC_OscConfig+0x4c4>)
 8002a38:	2201      	movs	r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3c:	f7fd fbde 	bl	80001fc <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a44:	f7fd fbda 	bl	80001fc <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e020      	b.n	8002a98 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a56:	4b12      	ldr	r3, [pc, #72]	; (8002aa0 <HAL_RCC_OscConfig+0x4bc>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d0f0      	beq.n	8002a44 <HAL_RCC_OscConfig+0x460>
 8002a62:	e018      	b.n	8002a96 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a64:	4b10      	ldr	r3, [pc, #64]	; (8002aa8 <HAL_RCC_OscConfig+0x4c4>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6a:	f7fd fbc7 	bl	80001fc <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a70:	e008      	b.n	8002a84 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a72:	f7fd fbc3 	bl	80001fc <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e009      	b.n	8002a98 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a84:	4b06      	ldr	r3, [pc, #24]	; (8002aa0 <HAL_RCC_OscConfig+0x4bc>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1f0      	bne.n	8002a72 <HAL_RCC_OscConfig+0x48e>
 8002a90:	e001      	b.n	8002a96 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e000      	b.n	8002a98 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3718      	adds	r7, #24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	40007000 	.word	0x40007000
 8002aa8:	42420060 	.word	0x42420060

08002aac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002aba:	4b72      	ldr	r3, [pc, #456]	; (8002c84 <HAL_RCC_ClockConfig+0x1d8>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0207 	and.w	r2, r3, #7
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d210      	bcs.n	8002aea <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac8:	496e      	ldr	r1, [pc, #440]	; (8002c84 <HAL_RCC_ClockConfig+0x1d8>)
 8002aca:	4b6e      	ldr	r3, [pc, #440]	; (8002c84 <HAL_RCC_ClockConfig+0x1d8>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f023 0207 	bic.w	r2, r3, #7
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ad8:	4b6a      	ldr	r3, [pc, #424]	; (8002c84 <HAL_RCC_ClockConfig+0x1d8>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0207 	and.w	r2, r3, #7
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d001      	beq.n	8002aea <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e0c8      	b.n	8002c7c <HAL_RCC_ClockConfig+0x1d0>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d008      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002af6:	4964      	ldr	r1, [pc, #400]	; (8002c88 <HAL_RCC_ClockConfig+0x1dc>)
 8002af8:	4b63      	ldr	r3, [pc, #396]	; (8002c88 <HAL_RCC_ClockConfig+0x1dc>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d06a      	beq.n	8002bea <HAL_RCC_ClockConfig+0x13e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d107      	bne.n	8002b2c <HAL_RCC_ClockConfig+0x80>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1c:	4b5a      	ldr	r3, [pc, #360]	; (8002c88 <HAL_RCC_ClockConfig+0x1dc>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d115      	bne.n	8002b54 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e0a7      	b.n	8002c7c <HAL_RCC_ClockConfig+0x1d0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d107      	bne.n	8002b44 <HAL_RCC_ClockConfig+0x98>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b34:	4b54      	ldr	r3, [pc, #336]	; (8002c88 <HAL_RCC_ClockConfig+0x1dc>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d109      	bne.n	8002b54 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e09b      	b.n	8002c7c <HAL_RCC_ClockConfig+0x1d0>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b44:	4b50      	ldr	r3, [pc, #320]	; (8002c88 <HAL_RCC_ClockConfig+0x1dc>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d101      	bne.n	8002b54 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e093      	b.n	8002c7c <HAL_RCC_ClockConfig+0x1d0>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b54:	494c      	ldr	r1, [pc, #304]	; (8002c88 <HAL_RCC_ClockConfig+0x1dc>)
 8002b56:	4b4c      	ldr	r3, [pc, #304]	; (8002c88 <HAL_RCC_ClockConfig+0x1dc>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f023 0203 	bic.w	r2, r3, #3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b66:	f7fd fb49 	bl	80001fc <HAL_GetTick>
 8002b6a:	60f8      	str	r0, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d112      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xee>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b74:	e00a      	b.n	8002b8c <HAL_RCC_ClockConfig+0xe0>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b76:	f7fd fb41 	bl	80001fc <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_ClockConfig+0xe0>
        {
          return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e077      	b.n	8002c7c <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b8c:	4b3e      	ldr	r3, [pc, #248]	; (8002c88 <HAL_RCC_ClockConfig+0x1dc>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f003 030c 	and.w	r3, r3, #12
 8002b94:	2b04      	cmp	r3, #4
 8002b96:	d1ee      	bne.n	8002b76 <HAL_RCC_ClockConfig+0xca>
 8002b98:	e027      	b.n	8002bea <HAL_RCC_ClockConfig+0x13e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d11d      	bne.n	8002bde <HAL_RCC_ClockConfig+0x132>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ba2:	e00a      	b.n	8002bba <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ba4:	f7fd fb2a 	bl	80001fc <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e060      	b.n	8002c7c <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bba:	4b33      	ldr	r3, [pc, #204]	; (8002c88 <HAL_RCC_ClockConfig+0x1dc>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f003 030c 	and.w	r3, r3, #12
 8002bc2:	2b08      	cmp	r3, #8
 8002bc4:	d1ee      	bne.n	8002ba4 <HAL_RCC_ClockConfig+0xf8>
 8002bc6:	e010      	b.n	8002bea <HAL_RCC_ClockConfig+0x13e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc8:	f7fd fb18 	bl	80001fc <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_ClockConfig+0x132>
        {
          return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e04e      	b.n	8002c7c <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bde:	4b2a      	ldr	r3, [pc, #168]	; (8002c88 <HAL_RCC_ClockConfig+0x1dc>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f003 030c 	and.w	r3, r3, #12
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1ee      	bne.n	8002bc8 <HAL_RCC_ClockConfig+0x11c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002bea:	4b26      	ldr	r3, [pc, #152]	; (8002c84 <HAL_RCC_ClockConfig+0x1d8>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0207 	and.w	r2, r3, #7
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d910      	bls.n	8002c1a <HAL_RCC_ClockConfig+0x16e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf8:	4922      	ldr	r1, [pc, #136]	; (8002c84 <HAL_RCC_ClockConfig+0x1d8>)
 8002bfa:	4b22      	ldr	r3, [pc, #136]	; (8002c84 <HAL_RCC_ClockConfig+0x1d8>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f023 0207 	bic.w	r2, r3, #7
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c08:	4b1e      	ldr	r3, [pc, #120]	; (8002c84 <HAL_RCC_ClockConfig+0x1d8>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0207 	and.w	r2, r3, #7
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d001      	beq.n	8002c1a <HAL_RCC_ClockConfig+0x16e>
    {
      return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e030      	b.n	8002c7c <HAL_RCC_ClockConfig+0x1d0>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0304 	and.w	r3, r3, #4
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d008      	beq.n	8002c38 <HAL_RCC_ClockConfig+0x18c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c26:	4918      	ldr	r1, [pc, #96]	; (8002c88 <HAL_RCC_ClockConfig+0x1dc>)
 8002c28:	4b17      	ldr	r3, [pc, #92]	; (8002c88 <HAL_RCC_ClockConfig+0x1dc>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0308 	and.w	r3, r3, #8
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d009      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x1ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c44:	4910      	ldr	r1, [pc, #64]	; (8002c88 <HAL_RCC_ClockConfig+0x1dc>)
 8002c46:	4b10      	ldr	r3, [pc, #64]	; (8002c88 <HAL_RCC_ClockConfig+0x1dc>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	4313      	orrs	r3, r2
 8002c56:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c58:	f000 f81c 	bl	8002c94 <HAL_RCC_GetSysClockFreq>
 8002c5c:	4601      	mov	r1, r0
 8002c5e:	4b0a      	ldr	r3, [pc, #40]	; (8002c88 <HAL_RCC_ClockConfig+0x1dc>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	091b      	lsrs	r3, r3, #4
 8002c64:	f003 030f 	and.w	r3, r3, #15
 8002c68:	4a08      	ldr	r2, [pc, #32]	; (8002c8c <HAL_RCC_ClockConfig+0x1e0>)
 8002c6a:	5cd3      	ldrb	r3, [r2, r3]
 8002c6c:	fa21 f303 	lsr.w	r3, r1, r3
 8002c70:	4a07      	ldr	r2, [pc, #28]	; (8002c90 <HAL_RCC_ClockConfig+0x1e4>)
 8002c72:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002c74:	2000      	movs	r0, #0
 8002c76:	f7fd fa7f 	bl	8000178 <HAL_InitTick>
  
  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40022000 	.word	0x40022000
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	08005270 	.word	0x08005270
 8002c90:	20000008 	.word	0x20000008

08002c94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c94:	b490      	push	{r4, r7}
 8002c96:	b08a      	sub	sp, #40	; 0x28
 8002c98:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002c9a:	4b2a      	ldr	r3, [pc, #168]	; (8002d44 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002c9c:	1d3c      	adds	r4, r7, #4
 8002c9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ca0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ca4:	4b28      	ldr	r3, [pc, #160]	; (8002d48 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ca6:	881b      	ldrh	r3, [r3, #0]
 8002ca8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002caa:	2300      	movs	r3, #0
 8002cac:	61fb      	str	r3, [r7, #28]
 8002cae:	2300      	movs	r3, #0
 8002cb0:	61bb      	str	r3, [r7, #24]
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002cbe:	4b23      	ldr	r3, [pc, #140]	; (8002d4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	f003 030c 	and.w	r3, r3, #12
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	d002      	beq.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x40>
 8002cce:	2b08      	cmp	r3, #8
 8002cd0:	d003      	beq.n	8002cda <HAL_RCC_GetSysClockFreq+0x46>
 8002cd2:	e02d      	b.n	8002d30 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cd4:	4b1e      	ldr	r3, [pc, #120]	; (8002d50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002cd6:	623b      	str	r3, [r7, #32]
      break;
 8002cd8:	e02d      	b.n	8002d36 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	0c9b      	lsrs	r3, r3, #18
 8002cde:	f003 030f 	and.w	r3, r3, #15
 8002ce2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002ce6:	4413      	add	r3, r2
 8002ce8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002cec:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d013      	beq.n	8002d20 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cf8:	4b14      	ldr	r3, [pc, #80]	; (8002d4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	0c5b      	lsrs	r3, r3, #17
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d06:	4413      	add	r3, r2
 8002d08:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002d0c:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	4a0f      	ldr	r2, [pc, #60]	; (8002d50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d12:	fb02 f203 	mul.w	r2, r2, r3
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d1e:	e004      	b.n	8002d2a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	4a0c      	ldr	r2, [pc, #48]	; (8002d54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d24:	fb02 f303 	mul.w	r3, r2, r3
 8002d28:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	623b      	str	r3, [r7, #32]
      break;
 8002d2e:	e002      	b.n	8002d36 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d30:	4b07      	ldr	r3, [pc, #28]	; (8002d50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d32:	623b      	str	r3, [r7, #32]
      break;
 8002d34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d36:	6a3b      	ldr	r3, [r7, #32]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3728      	adds	r7, #40	; 0x28
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bc90      	pop	{r4, r7}
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	08005204 	.word	0x08005204
 8002d48:	08005214 	.word	0x08005214
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	007a1200 	.word	0x007a1200
 8002d54:	003d0900 	.word	0x003d0900

08002d58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d5c:	4b02      	ldr	r3, [pc, #8]	; (8002d68 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bc80      	pop	{r7}
 8002d66:	4770      	bx	lr
 8002d68:	20000008 	.word	0x20000008

08002d6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d70:	f7ff fff2 	bl	8002d58 <HAL_RCC_GetHCLKFreq>
 8002d74:	4601      	mov	r1, r0
 8002d76:	4b05      	ldr	r3, [pc, #20]	; (8002d8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	0a1b      	lsrs	r3, r3, #8
 8002d7c:	f003 0307 	and.w	r3, r3, #7
 8002d80:	4a03      	ldr	r2, [pc, #12]	; (8002d90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d82:	5cd3      	ldrb	r3, [r2, r3]
 8002d84:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002d88:	4618      	mov	r0, r3
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	08005280 	.word	0x08005280

08002d94 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d9c:	4b0a      	ldr	r3, [pc, #40]	; (8002dc8 <RCC_Delay+0x34>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a0a      	ldr	r2, [pc, #40]	; (8002dcc <RCC_Delay+0x38>)
 8002da2:	fba2 2303 	umull	r2, r3, r2, r3
 8002da6:	0a5b      	lsrs	r3, r3, #9
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	fb02 f303 	mul.w	r3, r2, r3
 8002dae:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8002db0:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	1e5a      	subs	r2, r3, #1
 8002db6:	60fa      	str	r2, [r7, #12]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1f9      	bne.n	8002db0 <RCC_Delay+0x1c>
}
 8002dbc:	bf00      	nop
 8002dbe:	3714      	adds	r7, #20
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bc80      	pop	{r7}
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	20000008 	.word	0x20000008
 8002dcc:	10624dd3 	.word	0x10624dd3

08002dd0 <u8x8_byte_stm32hal_hw_i2c>:
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

uint8_t u8x8_byte_stm32hal_hw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b088      	sub	sp, #32
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	607b      	str	r3, [r7, #4]
 8002dda:	460b      	mov	r3, r1
 8002ddc:	72fb      	strb	r3, [r7, #11]
 8002dde:	4613      	mov	r3, r2
 8002de0:	72bb      	strb	r3, [r7, #10]
	static uint8_t buffer[32];		/* u8g2/u8x8 will never send more than 32 bytes between START_TRANSFER and END_TRANSFER */
	static uint8_t buf_idx;
	uint8_t *data;


  switch(msg)
 8002de2:	7afb      	ldrb	r3, [r7, #11]
 8002de4:	3b14      	subs	r3, #20
 8002de6:	2b0c      	cmp	r3, #12
 8002de8:	d850      	bhi.n	8002e8c <u8x8_byte_stm32hal_hw_i2c+0xbc>
 8002dea:	a201      	add	r2, pc, #4	; (adr r2, 8002df0 <u8x8_byte_stm32hal_hw_i2c+0x20>)
 8002dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df0:	08002e91 	.word	0x08002e91
 8002df4:	08002e8d 	.word	0x08002e8d
 8002df8:	08002e8d 	.word	0x08002e8d
 8002dfc:	08002e25 	.word	0x08002e25
 8002e00:	08002e55 	.word	0x08002e55
 8002e04:	08002e5d 	.word	0x08002e5d
 8002e08:	08002e8d 	.word	0x08002e8d
 8002e0c:	08002e8d 	.word	0x08002e8d
 8002e10:	08002e8d 	.word	0x08002e8d
 8002e14:	08002e8d 	.word	0x08002e8d
 8002e18:	08002e8d 	.word	0x08002e8d
 8002e1c:	08002e8d 	.word	0x08002e8d
 8002e20:	08002e91 	.word	0x08002e91
  {
    case U8X8_MSG_BYTE_SEND:
    {
        data = (uint8_t *)arg_ptr;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	61fb      	str	r3, [r7, #28]
        while( arg_int > 0 )
 8002e28:	e010      	b.n	8002e4c <u8x8_byte_stm32hal_hw_i2c+0x7c>
        {
			buffer[buf_idx++] = *data;
 8002e2a:	4b1c      	ldr	r3, [pc, #112]	; (8002e9c <u8x8_byte_stm32hal_hw_i2c+0xcc>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	1c5a      	adds	r2, r3, #1
 8002e30:	b2d1      	uxtb	r1, r2
 8002e32:	4a1a      	ldr	r2, [pc, #104]	; (8002e9c <u8x8_byte_stm32hal_hw_i2c+0xcc>)
 8002e34:	7011      	strb	r1, [r2, #0]
 8002e36:	461a      	mov	r2, r3
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	7819      	ldrb	r1, [r3, #0]
 8002e3c:	4b18      	ldr	r3, [pc, #96]	; (8002ea0 <u8x8_byte_stm32hal_hw_i2c+0xd0>)
 8002e3e:	5499      	strb	r1, [r3, r2]
			data++;
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	3301      	adds	r3, #1
 8002e44:	61fb      	str	r3, [r7, #28]
			arg_int--;
 8002e46:	7abb      	ldrb	r3, [r7, #10]
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	72bb      	strb	r3, [r7, #10]
        while( arg_int > 0 )
 8002e4c:	7abb      	ldrb	r3, [r7, #10]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1eb      	bne.n	8002e2a <u8x8_byte_stm32hal_hw_i2c+0x5a>
        }
    }
    	break;
 8002e52:	e01e      	b.n	8002e92 <u8x8_byte_stm32hal_hw_i2c+0xc2>
    	break;
    case U8X8_MSG_BYTE_SET_DC:
    	break;
    case U8X8_MSG_BYTE_START_TRANSFER:
		{
			buf_idx = 0;
 8002e54:	4b11      	ldr	r3, [pc, #68]	; (8002e9c <u8x8_byte_stm32hal_hw_i2c+0xcc>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002e5a:	e01a      	b.n	8002e92 <u8x8_byte_stm32hal_hw_i2c+0xc2>
    case U8X8_MSG_BYTE_END_TRANSFER:
	{
		uint8_t iaddress = I2C_ADDRESS;
 8002e5c:	233c      	movs	r3, #60	; 0x3c
 8002e5e:	76fb      	strb	r3, [r7, #27]
		HAL_I2C_Master_Transmit_DMA(&hi2c1, (uint16_t)iaddress<<1, &buffer[0], buf_idx);
 8002e60:	7efb      	ldrb	r3, [r7, #27]
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	b299      	uxth	r1, r3
 8002e68:	4b0c      	ldr	r3, [pc, #48]	; (8002e9c <u8x8_byte_stm32hal_hw_i2c+0xcc>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	4a0c      	ldr	r2, [pc, #48]	; (8002ea0 <u8x8_byte_stm32hal_hw_i2c+0xd0>)
 8002e70:	480c      	ldr	r0, [pc, #48]	; (8002ea4 <u8x8_byte_stm32hal_hw_i2c+0xd4>)
 8002e72:	f7fe f803 	bl	8000e7c <HAL_I2C_Master_Transmit_DMA>
		//HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)iaddress<<1, &buffer[0], buf_idx, 20u);
		//TODO Investigate why delay is needed here.
		//Seems like DMA feeding bytes too fast.
		volatile uint32_t i;
		for (i = 1; i <= 350; i++);
 8002e76:	2301      	movs	r3, #1
 8002e78:	617b      	str	r3, [r7, #20]
 8002e7a:	e002      	b.n	8002e82 <u8x8_byte_stm32hal_hw_i2c+0xb2>
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	3301      	adds	r3, #1
 8002e80:	617b      	str	r3, [r7, #20]
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8002e88:	d9f8      	bls.n	8002e7c <u8x8_byte_stm32hal_hw_i2c+0xac>
	}
    	break;
 8002e8a:	e002      	b.n	8002e92 <u8x8_byte_stm32hal_hw_i2c+0xc2>
    default:
      return 0;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	e001      	b.n	8002e94 <u8x8_byte_stm32hal_hw_i2c+0xc4>
    	break;
 8002e90:	bf00      	nop
  }
  return 1;
 8002e92:	2301      	movs	r3, #1
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3720      	adds	r7, #32
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	20000028 	.word	0x20000028
 8002ea0:	2000002c 	.word	0x2000002c
 8002ea4:	20000494 	.word	0x20000494

08002ea8 <psoc_gpio_and_delay_cb>:

uint8_t psoc_gpio_and_delay_cb(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	607b      	str	r3, [r7, #4]
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	72fb      	strb	r3, [r7, #11]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8002eba:	7afb      	ldrb	r3, [r7, #11]
 8002ebc:	3b28      	subs	r3, #40	; 0x28
 8002ebe:	2b24      	cmp	r3, #36	; 0x24
 8002ec0:	d861      	bhi.n	8002f86 <psoc_gpio_and_delay_cb+0xde>
 8002ec2:	a201      	add	r2, pc, #4	; (adr r2, 8002ec8 <psoc_gpio_and_delay_cb+0x20>)
 8002ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec8:	08002f91 	.word	0x08002f91
 8002ecc:	08002f7d 	.word	0x08002f7d
 8002ed0:	08002f91 	.word	0x08002f91
 8002ed4:	08002f91 	.word	0x08002f91
 8002ed8:	08002f5d 	.word	0x08002f5d
 8002edc:	08002f91 	.word	0x08002f91
 8002ee0:	08002f87 	.word	0x08002f87
 8002ee4:	08002f87 	.word	0x08002f87
 8002ee8:	08002f87 	.word	0x08002f87
 8002eec:	08002f87 	.word	0x08002f87
 8002ef0:	08002f87 	.word	0x08002f87
 8002ef4:	08002f87 	.word	0x08002f87
 8002ef8:	08002f87 	.word	0x08002f87
 8002efc:	08002f87 	.word	0x08002f87
 8002f00:	08002f87 	.word	0x08002f87
 8002f04:	08002f87 	.word	0x08002f87
 8002f08:	08002f87 	.word	0x08002f87
 8002f0c:	08002f87 	.word	0x08002f87
 8002f10:	08002f87 	.word	0x08002f87
 8002f14:	08002f87 	.word	0x08002f87
 8002f18:	08002f87 	.word	0x08002f87
 8002f1c:	08002f87 	.word	0x08002f87
 8002f20:	08002f87 	.word	0x08002f87
 8002f24:	08002f87 	.word	0x08002f87
 8002f28:	08002f87 	.word	0x08002f87
 8002f2c:	08002f87 	.word	0x08002f87
 8002f30:	08002f87 	.word	0x08002f87
 8002f34:	08002f87 	.word	0x08002f87
 8002f38:	08002f87 	.word	0x08002f87
 8002f3c:	08002f87 	.word	0x08002f87
 8002f40:	08002f87 	.word	0x08002f87
 8002f44:	08002f87 	.word	0x08002f87
 8002f48:	08002f87 	.word	0x08002f87
 8002f4c:	08002f87 	.word	0x08002f87
 8002f50:	08002f87 	.word	0x08002f87
 8002f54:	08002f87 	.word	0x08002f87
 8002f58:	08002f91 	.word	0x08002f91
      break;
    case U8X8_MSG_DELAY_NANO:
      /* not required for SW I2C */
    {
		volatile uint32_t i;
		for (i = 1; i <= arg_int*10; i++);
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	617b      	str	r3, [r7, #20]
 8002f60:	e002      	b.n	8002f68 <psoc_gpio_and_delay_cb+0xc0>
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	3301      	adds	r3, #1
 8002f66:	617b      	str	r3, [r7, #20]
 8002f68:	7aba      	ldrb	r2, [r7, #10]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4413      	add	r3, r2
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	461a      	mov	r2, r3
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d2f3      	bcs.n	8002f62 <psoc_gpio_and_delay_cb+0xba>
    }
      break;
 8002f7a:	e00a      	b.n	8002f92 <psoc_gpio_and_delay_cb+0xea>
    case U8X8_MSG_DELAY_100NANO:
      /* not used at the moment */
      break;

    case U8X8_MSG_DELAY_MILLI:
      HAL_Delay(arg_int);
 8002f7c:	7abb      	ldrb	r3, [r7, #10]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7fd f946 	bl	8000210 <HAL_Delay>
      break;
 8002f84:	e005      	b.n	8002f92 <psoc_gpio_and_delay_cb+0xea>
    case U8X8_MSG_GPIO_MENU_HOME:
      u8x8_SetGPIOResult(u8x8, Chip_GPIO_GetPinState(LPC_GPIO, KEY_HOME_PORT, KEY_HOME_PIN));
      break;
*/
    default:
      u8x8_SetGPIOResult(u8x8, 1);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
      break;
 8002f8e:	e000      	b.n	8002f92 <psoc_gpio_and_delay_cb+0xea>
      break;
 8002f90:	bf00      	nop
  }
  return 1;
 8002f92:	2301      	movs	r3, #1
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002fa0:	f7fd f8d4 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002fa4:	f000 f89c 	bl	80030e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002fa8:	f000 f93e 	bl	8003228 <MX_GPIO_Init>
  MX_DMA_Init();
 8002fac:	f000 f916 	bl	80031dc <MX_DMA_Init>
  MX_I2C1_Init();
 8002fb0:	f000 f8e0 	bl	8003174 <MX_I2C1_Init>
  u8x8_InitDisplay(&u8x8);
  u8x8_SetPowerSave(&u8x8, 0);
  u8x8_ClearDisplay(&u8x8);
  u8x8_SetFont(&u8x8, u8x8_font_amstrad_cpc_extended_r);
#else
  u8g2_Setup_ssd1306_i2c_128x64_noname_f(&u8g2,
 8002fb4:	4b3e      	ldr	r3, [pc, #248]	; (80030b0 <main+0x114>)
 8002fb6:	4a3f      	ldr	r2, [pc, #252]	; (80030b4 <main+0x118>)
 8002fb8:	493f      	ldr	r1, [pc, #252]	; (80030b8 <main+0x11c>)
 8002fba:	4840      	ldr	r0, [pc, #256]	; (80030bc <main+0x120>)
 8002fbc:	f000 fc04 	bl	80037c8 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>
		  U8G2_R0,
		  u8x8_byte_stm32hal_hw_i2c,
		  psoc_gpio_and_delay_cb);
  u8g2_SetI2CAddress(&u8g2, 0x3C*2);
 8002fc0:	4b3e      	ldr	r3, [pc, #248]	; (80030bc <main+0x120>)
 8002fc2:	2278      	movs	r2, #120	; 0x78
 8002fc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  u8g2_InitDisplay(&u8g2);
 8002fc8:	483c      	ldr	r0, [pc, #240]	; (80030bc <main+0x120>)
 8002fca:	f002 f846 	bl	800505a <u8x8_InitDisplay>
  u8g2_SetPowerSave(&u8g2, 0);
 8002fce:	2100      	movs	r1, #0
 8002fd0:	483a      	ldr	r0, [pc, #232]	; (80030bc <main+0x120>)
 8002fd2:	f002 f851 	bl	8005078 <u8x8_SetPowerSave>
  u8g2_ClearDisplay(&u8g2);
 8002fd6:	4839      	ldr	r0, [pc, #228]	; (80030bc <main+0x120>)
 8002fd8:	f000 fbd0 	bl	800377c <u8g2_ClearDisplay>

  u8g2_SetDrawColor(&u8g2, 1);
 8002fdc:	2101      	movs	r1, #1
 8002fde:	4837      	ldr	r0, [pc, #220]	; (80030bc <main+0x120>)
 8002fe0:	f001 fad6 	bl	8004590 <u8g2_SetDrawColor>
  u8g2_SetFontDirection(&u8g2, 0);
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	4835      	ldr	r0, [pc, #212]	; (80030bc <main+0x120>)
 8002fe8:	f001 f99e 	bl	8004328 <u8g2_SetFontDirection>
#ifdef USE_U8X8
	  u8x8_ClearDisplay(&u8x8);
      u8x8_DrawString(&u8x8, 0, 0, "Hello World!");
      HAL_Delay(500u);
#else
		u8g2_ClearBuffer(&u8g2);
 8002fec:	4833      	ldr	r0, [pc, #204]	; (80030bc <main+0x120>)
 8002fee:	f000 faea 	bl	80035c6 <u8g2_ClearBuffer>

		u8g2_SetFontMode(&u8g2, 1);	// Transparent
 8002ff2:	2101      	movs	r1, #1
 8002ff4:	4831      	ldr	r0, [pc, #196]	; (80030bc <main+0x120>)
 8002ff6:	f001 f822 	bl	800403e <u8g2_SetFontMode>
		u8g2_SetFontDirection(&u8g2, 0);
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	482f      	ldr	r0, [pc, #188]	; (80030bc <main+0x120>)
 8002ffe:	f001 f993 	bl	8004328 <u8g2_SetFontDirection>
		u8g2_SetFont(&u8g2, u8g2_font_inb24_mf);
 8003002:	492f      	ldr	r1, [pc, #188]	; (80030c0 <main+0x124>)
 8003004:	482d      	ldr	r0, [pc, #180]	; (80030bc <main+0x120>)
 8003006:	f001 f975 	bl	80042f4 <u8g2_SetFont>
		u8g2_DrawStr(&u8g2, 0, 30, "U");
 800300a:	4b2e      	ldr	r3, [pc, #184]	; (80030c4 <main+0x128>)
 800300c:	221e      	movs	r2, #30
 800300e:	2100      	movs	r1, #0
 8003010:	482a      	ldr	r0, [pc, #168]	; (80030bc <main+0x120>)
 8003012:	f001 f8d1 	bl	80041b8 <u8g2_DrawStr>

		u8g2_SetFontDirection(&u8g2, 1);
 8003016:	2101      	movs	r1, #1
 8003018:	4828      	ldr	r0, [pc, #160]	; (80030bc <main+0x120>)
 800301a:	f001 f985 	bl	8004328 <u8g2_SetFontDirection>
		u8g2_SetFont(&u8g2, u8g2_font_inb30_mn);
 800301e:	492a      	ldr	r1, [pc, #168]	; (80030c8 <main+0x12c>)
 8003020:	4826      	ldr	r0, [pc, #152]	; (80030bc <main+0x120>)
 8003022:	f001 f967 	bl	80042f4 <u8g2_SetFont>
		u8g2_DrawStr(&u8g2, 21,8,"8");
 8003026:	4b29      	ldr	r3, [pc, #164]	; (80030cc <main+0x130>)
 8003028:	2208      	movs	r2, #8
 800302a:	2115      	movs	r1, #21
 800302c:	4823      	ldr	r0, [pc, #140]	; (80030bc <main+0x120>)
 800302e:	f001 f8c3 	bl	80041b8 <u8g2_DrawStr>

		u8g2_SetFontDirection(&u8g2, 0);
 8003032:	2100      	movs	r1, #0
 8003034:	4821      	ldr	r0, [pc, #132]	; (80030bc <main+0x120>)
 8003036:	f001 f977 	bl	8004328 <u8g2_SetFontDirection>
		u8g2_SetFont(&u8g2, u8g2_font_inb24_mf);
 800303a:	4921      	ldr	r1, [pc, #132]	; (80030c0 <main+0x124>)
 800303c:	481f      	ldr	r0, [pc, #124]	; (80030bc <main+0x120>)
 800303e:	f001 f959 	bl	80042f4 <u8g2_SetFont>
		u8g2_DrawStr(&u8g2, 51,30,"g");
 8003042:	4b23      	ldr	r3, [pc, #140]	; (80030d0 <main+0x134>)
 8003044:	221e      	movs	r2, #30
 8003046:	2133      	movs	r1, #51	; 0x33
 8003048:	481c      	ldr	r0, [pc, #112]	; (80030bc <main+0x120>)
 800304a:	f001 f8b5 	bl	80041b8 <u8g2_DrawStr>
		u8g2_DrawStr(&u8g2, 67,30,"\xb2");
 800304e:	4b21      	ldr	r3, [pc, #132]	; (80030d4 <main+0x138>)
 8003050:	221e      	movs	r2, #30
 8003052:	2143      	movs	r1, #67	; 0x43
 8003054:	4819      	ldr	r0, [pc, #100]	; (80030bc <main+0x120>)
 8003056:	f001 f8af 	bl	80041b8 <u8g2_DrawStr>

		u8g2_DrawHLine(&u8g2, 2, 35, 47);
 800305a:	232f      	movs	r3, #47	; 0x2f
 800305c:	2223      	movs	r2, #35	; 0x23
 800305e:	2102      	movs	r1, #2
 8003060:	4816      	ldr	r0, [pc, #88]	; (80030bc <main+0x120>)
 8003062:	f001 fa61 	bl	8004528 <u8g2_DrawHLine>
		u8g2_DrawHLine(&u8g2, 3, 36, 47);
 8003066:	232f      	movs	r3, #47	; 0x2f
 8003068:	2224      	movs	r2, #36	; 0x24
 800306a:	2103      	movs	r1, #3
 800306c:	4813      	ldr	r0, [pc, #76]	; (80030bc <main+0x120>)
 800306e:	f001 fa5b 	bl	8004528 <u8g2_DrawHLine>
		u8g2_DrawVLine(&u8g2, 45, 32, 12);
 8003072:	230c      	movs	r3, #12
 8003074:	2220      	movs	r2, #32
 8003076:	212d      	movs	r1, #45	; 0x2d
 8003078:	4810      	ldr	r0, [pc, #64]	; (80030bc <main+0x120>)
 800307a:	f001 fa6f 	bl	800455c <u8g2_DrawVLine>
		u8g2_DrawVLine(&u8g2, 46, 33, 12);
 800307e:	230c      	movs	r3, #12
 8003080:	2221      	movs	r2, #33	; 0x21
 8003082:	212e      	movs	r1, #46	; 0x2e
 8003084:	480d      	ldr	r0, [pc, #52]	; (80030bc <main+0x120>)
 8003086:	f001 fa69 	bl	800455c <u8g2_DrawVLine>

		u8g2_SetFont(&u8g2, u8g2_font_4x6_tr);
 800308a:	4913      	ldr	r1, [pc, #76]	; (80030d8 <main+0x13c>)
 800308c:	480b      	ldr	r0, [pc, #44]	; (80030bc <main+0x120>)
 800308e:	f001 f931 	bl	80042f4 <u8g2_SetFont>

		u8g2_DrawStr(&u8g2, 1,54,"github.com/olikraus/u8g2");
 8003092:	4b12      	ldr	r3, [pc, #72]	; (80030dc <main+0x140>)
 8003094:	2236      	movs	r2, #54	; 0x36
 8003096:	2101      	movs	r1, #1
 8003098:	4808      	ldr	r0, [pc, #32]	; (80030bc <main+0x120>)
 800309a:	f001 f88d 	bl	80041b8 <u8g2_DrawStr>

		u8g2_SendBuffer(&u8g2);
 800309e:	4807      	ldr	r0, [pc, #28]	; (80030bc <main+0x120>)
 80030a0:	f000 fb04 	bl	80036ac <u8g2_SendBuffer>
#endif
      HAL_Delay(2000);
 80030a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80030a8:	f7fd f8b2 	bl	8000210 <HAL_Delay>
		u8g2_ClearBuffer(&u8g2);
 80030ac:	e79e      	b.n	8002fec <main+0x50>
 80030ae:	bf00      	nop
 80030b0:	08002ea9 	.word	0x08002ea9
 80030b4:	08002dd1 	.word	0x08002dd1
 80030b8:	08007b18 	.word	0x08007b18
 80030bc:	2000055c 	.word	0x2000055c
 80030c0:	08005568 	.word	0x08005568
 80030c4:	08005218 	.word	0x08005218
 80030c8:	080077e4 	.word	0x080077e4
 80030cc:	0800521c 	.word	0x0800521c
 80030d0:	08005220 	.word	0x08005220
 80030d4:	08005224 	.word	0x08005224
 80030d8:	08005288 	.word	0x08005288
 80030dc:	08005228 	.word	0x08005228

080030e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b090      	sub	sp, #64	; 0x40
 80030e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80030e6:	2302      	movs	r3, #2
 80030e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030ea:	2301      	movs	r3, #1
 80030ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80030ee:	2310      	movs	r3, #16
 80030f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80030f2:	2300      	movs	r3, #0
 80030f4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030f6:	f107 0318 	add.w	r3, r7, #24
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7ff fa72 	bl	80025e4 <HAL_RCC_OscConfig>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d004      	beq.n	8003110 <SystemClock_Config+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003106:	f240 112b 	movw	r1, #299	; 0x12b
 800310a:	4818      	ldr	r0, [pc, #96]	; (800316c <SystemClock_Config+0x8c>)
 800310c:	f000 f8b3 	bl	8003276 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003110:	230f      	movs	r3, #15
 8003112:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003114:	2300      	movs	r3, #0
 8003116:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003118:	2300      	movs	r3, #0
 800311a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800311c:	2300      	movs	r3, #0
 800311e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003120:	2300      	movs	r3, #0
 8003122:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003124:	1d3b      	adds	r3, r7, #4
 8003126:	2100      	movs	r1, #0
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff fcbf 	bl	8002aac <HAL_RCC_ClockConfig>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d004      	beq.n	800313e <SystemClock_Config+0x5e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003134:	f240 1139 	movw	r1, #313	; 0x139
 8003138:	480c      	ldr	r0, [pc, #48]	; (800316c <SystemClock_Config+0x8c>)
 800313a:	f000 f89c 	bl	8003276 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800313e:	f7ff fe0b 	bl	8002d58 <HAL_RCC_GetHCLKFreq>
 8003142:	4602      	mov	r2, r0
 8003144:	4b0a      	ldr	r3, [pc, #40]	; (8003170 <SystemClock_Config+0x90>)
 8003146:	fba3 2302 	umull	r2, r3, r3, r2
 800314a:	099b      	lsrs	r3, r3, #6
 800314c:	4618      	mov	r0, r3
 800314e:	f7fd f97c 	bl	800044a <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003152:	2004      	movs	r0, #4
 8003154:	f7fd f986 	bl	8000464 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003158:	2200      	movs	r2, #0
 800315a:	2100      	movs	r1, #0
 800315c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003160:	f7fd f949 	bl	80003f6 <HAL_NVIC_SetPriority>
}
 8003164:	bf00      	nop
 8003166:	3740      	adds	r7, #64	; 0x40
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	08005244 	.word	0x08005244
 8003170:	10624dd3 	.word	0x10624dd3

08003174 <MX_I2C1_Init>:

/* I2C1 init function */
static void MX_I2C1_Init(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8003178:	4b14      	ldr	r3, [pc, #80]	; (80031cc <MX_I2C1_Init+0x58>)
 800317a:	4a15      	ldr	r2, [pc, #84]	; (80031d0 <MX_I2C1_Init+0x5c>)
 800317c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800317e:	4b13      	ldr	r3, [pc, #76]	; (80031cc <MX_I2C1_Init+0x58>)
 8003180:	4a14      	ldr	r2, [pc, #80]	; (80031d4 <MX_I2C1_Init+0x60>)
 8003182:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003184:	4b11      	ldr	r3, [pc, #68]	; (80031cc <MX_I2C1_Init+0x58>)
 8003186:	2200      	movs	r2, #0
 8003188:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800318a:	4b10      	ldr	r3, [pc, #64]	; (80031cc <MX_I2C1_Init+0x58>)
 800318c:	2200      	movs	r2, #0
 800318e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003190:	4b0e      	ldr	r3, [pc, #56]	; (80031cc <MX_I2C1_Init+0x58>)
 8003192:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003196:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003198:	4b0c      	ldr	r3, [pc, #48]	; (80031cc <MX_I2C1_Init+0x58>)
 800319a:	2200      	movs	r2, #0
 800319c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800319e:	4b0b      	ldr	r3, [pc, #44]	; (80031cc <MX_I2C1_Init+0x58>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80031a4:	4b09      	ldr	r3, [pc, #36]	; (80031cc <MX_I2C1_Init+0x58>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80031aa:	4b08      	ldr	r3, [pc, #32]	; (80031cc <MX_I2C1_Init+0x58>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80031b0:	4806      	ldr	r0, [pc, #24]	; (80031cc <MX_I2C1_Init+0x58>)
 80031b2:	f7fd fd5f 	bl	8000c74 <HAL_I2C_Init>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d004      	beq.n	80031c6 <MX_I2C1_Init+0x52>
  {
    _Error_Handler(__FILE__, __LINE__);
 80031bc:	f240 1157 	movw	r1, #343	; 0x157
 80031c0:	4805      	ldr	r0, [pc, #20]	; (80031d8 <MX_I2C1_Init+0x64>)
 80031c2:	f000 f858 	bl	8003276 <_Error_Handler>
  }

}
 80031c6:	bf00      	nop
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	20000494 	.word	0x20000494
 80031d0:	40005400 	.word	0x40005400
 80031d4:	00061a80 	.word	0x00061a80
 80031d8:	08005244 	.word	0x08005244

080031dc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80031e2:	4a10      	ldr	r2, [pc, #64]	; (8003224 <MX_DMA_Init+0x48>)
 80031e4:	4b0f      	ldr	r3, [pc, #60]	; (8003224 <MX_DMA_Init+0x48>)
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	f043 0301 	orr.w	r3, r3, #1
 80031ec:	6153      	str	r3, [r2, #20]
 80031ee:	4b0d      	ldr	r3, [pc, #52]	; (8003224 <MX_DMA_Init+0x48>)
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	607b      	str	r3, [r7, #4]
 80031f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80031fa:	2200      	movs	r2, #0
 80031fc:	2100      	movs	r1, #0
 80031fe:	2010      	movs	r0, #16
 8003200:	f7fd f8f9 	bl	80003f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8003204:	2010      	movs	r0, #16
 8003206:	f7fd f912 	bl	800042e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800320a:	2200      	movs	r2, #0
 800320c:	2100      	movs	r1, #0
 800320e:	2011      	movs	r0, #17
 8003210:	f7fd f8f1 	bl	80003f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8003214:	2011      	movs	r0, #17
 8003216:	f7fd f90a 	bl	800042e <HAL_NVIC_EnableIRQ>

}
 800321a:	bf00      	nop
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	40021000 	.word	0x40021000

08003228 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800322e:	4a0e      	ldr	r2, [pc, #56]	; (8003268 <MX_GPIO_Init+0x40>)
 8003230:	4b0d      	ldr	r3, [pc, #52]	; (8003268 <MX_GPIO_Init+0x40>)
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	f043 0304 	orr.w	r3, r3, #4
 8003238:	6193      	str	r3, [r2, #24]
 800323a:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <MX_GPIO_Init+0x40>)
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	f003 0304 	and.w	r3, r3, #4
 8003242:	607b      	str	r3, [r7, #4]
 8003244:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003246:	4a08      	ldr	r2, [pc, #32]	; (8003268 <MX_GPIO_Init+0x40>)
 8003248:	4b07      	ldr	r3, [pc, #28]	; (8003268 <MX_GPIO_Init+0x40>)
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	f043 0308 	orr.w	r3, r3, #8
 8003250:	6193      	str	r3, [r2, #24]
 8003252:	4b05      	ldr	r3, [pc, #20]	; (8003268 <MX_GPIO_Init+0x40>)
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	f003 0308 	and.w	r3, r3, #8
 800325a:	603b      	str	r3, [r7, #0]
 800325c:	683b      	ldr	r3, [r7, #0]

}
 800325e:	bf00      	nop
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	bc80      	pop	{r7}
 8003266:	4770      	bx	lr
 8003268:	40021000 	.word	0x40021000

0800326c <HAL_I2C_ErrorCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
	  while(1)
 8003274:	e7fe      	b.n	8003274 <HAL_I2C_ErrorCallback+0x8>

08003276 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8003276:	b480      	push	{r7}
 8003278:	b083      	sub	sp, #12
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
 800327e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8003280:	e7fe      	b.n	8003280 <_Error_Handler+0xa>
	...

08003284 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800328a:	4a2b      	ldr	r2, [pc, #172]	; (8003338 <HAL_MspInit+0xb4>)
 800328c:	4b2a      	ldr	r3, [pc, #168]	; (8003338 <HAL_MspInit+0xb4>)
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	f043 0301 	orr.w	r3, r3, #1
 8003294:	6193      	str	r3, [r2, #24]
 8003296:	4b28      	ldr	r3, [pc, #160]	; (8003338 <HAL_MspInit+0xb4>)
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	60bb      	str	r3, [r7, #8]
 80032a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032a2:	4a25      	ldr	r2, [pc, #148]	; (8003338 <HAL_MspInit+0xb4>)
 80032a4:	4b24      	ldr	r3, [pc, #144]	; (8003338 <HAL_MspInit+0xb4>)
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ac:	61d3      	str	r3, [r2, #28]
 80032ae:	4b22      	ldr	r3, [pc, #136]	; (8003338 <HAL_MspInit+0xb4>)
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b6:	607b      	str	r3, [r7, #4]
 80032b8:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032ba:	2003      	movs	r0, #3
 80032bc:	f7fd f890 	bl	80003e0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80032c0:	2200      	movs	r2, #0
 80032c2:	2100      	movs	r1, #0
 80032c4:	f06f 000b 	mvn.w	r0, #11
 80032c8:	f7fd f895 	bl	80003f6 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80032cc:	2200      	movs	r2, #0
 80032ce:	2100      	movs	r1, #0
 80032d0:	f06f 000a 	mvn.w	r0, #10
 80032d4:	f7fd f88f 	bl	80003f6 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80032d8:	2200      	movs	r2, #0
 80032da:	2100      	movs	r1, #0
 80032dc:	f06f 0009 	mvn.w	r0, #9
 80032e0:	f7fd f889 	bl	80003f6 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80032e4:	2200      	movs	r2, #0
 80032e6:	2100      	movs	r1, #0
 80032e8:	f06f 0004 	mvn.w	r0, #4
 80032ec:	f7fd f883 	bl	80003f6 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80032f0:	2200      	movs	r2, #0
 80032f2:	2100      	movs	r1, #0
 80032f4:	f06f 0003 	mvn.w	r0, #3
 80032f8:	f7fd f87d 	bl	80003f6 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80032fc:	2200      	movs	r2, #0
 80032fe:	2100      	movs	r1, #0
 8003300:	f06f 0001 	mvn.w	r0, #1
 8003304:	f7fd f877 	bl	80003f6 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003308:	2200      	movs	r2, #0
 800330a:	2100      	movs	r1, #0
 800330c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003310:	f7fd f871 	bl	80003f6 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003314:	4b09      	ldr	r3, [pc, #36]	; (800333c <HAL_MspInit+0xb8>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	60fb      	str	r3, [r7, #12]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	4a04      	ldr	r2, [pc, #16]	; (800333c <HAL_MspInit+0xb8>)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003330:	bf00      	nop
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40021000 	.word	0x40021000
 800333c:	40010000 	.word	0x40010000

08003340 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b088      	sub	sp, #32
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a3f      	ldr	r2, [pc, #252]	; (800344c <HAL_I2C_MspInit+0x10c>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d177      	bne.n	8003442 <HAL_I2C_MspInit+0x102>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003352:	23c0      	movs	r3, #192	; 0xc0
 8003354:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003356:	2312      	movs	r3, #18
 8003358:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800335a:	2303      	movs	r3, #3
 800335c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800335e:	f107 0310 	add.w	r3, r7, #16
 8003362:	4619      	mov	r1, r3
 8003364:	483a      	ldr	r0, [pc, #232]	; (8003450 <HAL_I2C_MspInit+0x110>)
 8003366:	f7fd fb27 	bl	80009b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800336a:	4a3a      	ldr	r2, [pc, #232]	; (8003454 <HAL_I2C_MspInit+0x114>)
 800336c:	4b39      	ldr	r3, [pc, #228]	; (8003454 <HAL_I2C_MspInit+0x114>)
 800336e:	69db      	ldr	r3, [r3, #28]
 8003370:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003374:	61d3      	str	r3, [r2, #28]
 8003376:	4b37      	ldr	r3, [pc, #220]	; (8003454 <HAL_I2C_MspInit+0x114>)
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800337e:	60fb      	str	r3, [r7, #12]
 8003380:	68fb      	ldr	r3, [r7, #12]
  
    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8003382:	4b35      	ldr	r3, [pc, #212]	; (8003458 <HAL_I2C_MspInit+0x118>)
 8003384:	4a35      	ldr	r2, [pc, #212]	; (800345c <HAL_I2C_MspInit+0x11c>)
 8003386:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003388:	4b33      	ldr	r3, [pc, #204]	; (8003458 <HAL_I2C_MspInit+0x118>)
 800338a:	2210      	movs	r2, #16
 800338c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800338e:	4b32      	ldr	r3, [pc, #200]	; (8003458 <HAL_I2C_MspInit+0x118>)
 8003390:	2200      	movs	r2, #0
 8003392:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003394:	4b30      	ldr	r3, [pc, #192]	; (8003458 <HAL_I2C_MspInit+0x118>)
 8003396:	2280      	movs	r2, #128	; 0x80
 8003398:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800339a:	4b2f      	ldr	r3, [pc, #188]	; (8003458 <HAL_I2C_MspInit+0x118>)
 800339c:	2200      	movs	r2, #0
 800339e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033a0:	4b2d      	ldr	r3, [pc, #180]	; (8003458 <HAL_I2C_MspInit+0x118>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80033a6:	4b2c      	ldr	r3, [pc, #176]	; (8003458 <HAL_I2C_MspInit+0x118>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80033ac:	4b2a      	ldr	r3, [pc, #168]	; (8003458 <HAL_I2C_MspInit+0x118>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80033b2:	4829      	ldr	r0, [pc, #164]	; (8003458 <HAL_I2C_MspInit+0x118>)
 80033b4:	f7fd f87e 	bl	80004b4 <HAL_DMA_Init>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_I2C_MspInit+0x86>
    {
      _Error_Handler(__FILE__, __LINE__);
 80033be:	217b      	movs	r1, #123	; 0x7b
 80033c0:	4827      	ldr	r0, [pc, #156]	; (8003460 <HAL_I2C_MspInit+0x120>)
 80033c2:	f7ff ff58 	bl	8003276 <_Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a23      	ldr	r2, [pc, #140]	; (8003458 <HAL_I2C_MspInit+0x118>)
 80033ca:	635a      	str	r2, [r3, #52]	; 0x34
 80033cc:	4a22      	ldr	r2, [pc, #136]	; (8003458 <HAL_I2C_MspInit+0x118>)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80033d2:	4b24      	ldr	r3, [pc, #144]	; (8003464 <HAL_I2C_MspInit+0x124>)
 80033d4:	4a24      	ldr	r2, [pc, #144]	; (8003468 <HAL_I2C_MspInit+0x128>)
 80033d6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033d8:	4b22      	ldr	r3, [pc, #136]	; (8003464 <HAL_I2C_MspInit+0x124>)
 80033da:	2200      	movs	r2, #0
 80033dc:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033de:	4b21      	ldr	r3, [pc, #132]	; (8003464 <HAL_I2C_MspInit+0x124>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80033e4:	4b1f      	ldr	r3, [pc, #124]	; (8003464 <HAL_I2C_MspInit+0x124>)
 80033e6:	2280      	movs	r2, #128	; 0x80
 80033e8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033ea:	4b1e      	ldr	r3, [pc, #120]	; (8003464 <HAL_I2C_MspInit+0x124>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033f0:	4b1c      	ldr	r3, [pc, #112]	; (8003464 <HAL_I2C_MspInit+0x124>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80033f6:	4b1b      	ldr	r3, [pc, #108]	; (8003464 <HAL_I2C_MspInit+0x124>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80033fc:	4b19      	ldr	r3, [pc, #100]	; (8003464 <HAL_I2C_MspInit+0x124>)
 80033fe:	2200      	movs	r2, #0
 8003400:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003402:	4818      	ldr	r0, [pc, #96]	; (8003464 <HAL_I2C_MspInit+0x124>)
 8003404:	f7fd f856 	bl	80004b4 <HAL_DMA_Init>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <HAL_I2C_MspInit+0xd6>
    {
      _Error_Handler(__FILE__, __LINE__);
 800340e:	218b      	movs	r1, #139	; 0x8b
 8003410:	4813      	ldr	r0, [pc, #76]	; (8003460 <HAL_I2C_MspInit+0x120>)
 8003412:	f7ff ff30 	bl	8003276 <_Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a12      	ldr	r2, [pc, #72]	; (8003464 <HAL_I2C_MspInit+0x124>)
 800341a:	639a      	str	r2, [r3, #56]	; 0x38
 800341c:	4a11      	ldr	r2, [pc, #68]	; (8003464 <HAL_I2C_MspInit+0x124>)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003422:	2200      	movs	r2, #0
 8003424:	2100      	movs	r1, #0
 8003426:	201f      	movs	r0, #31
 8003428:	f7fc ffe5 	bl	80003f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800342c:	201f      	movs	r0, #31
 800342e:	f7fc fffe 	bl	800042e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003432:	2200      	movs	r2, #0
 8003434:	2100      	movs	r1, #0
 8003436:	2020      	movs	r0, #32
 8003438:	f7fc ffdd 	bl	80003f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800343c:	2020      	movs	r0, #32
 800343e:	f7fc fff6 	bl	800042e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003442:	bf00      	nop
 8003444:	3720      	adds	r7, #32
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	40005400 	.word	0x40005400
 8003450:	40010c00 	.word	0x40010c00
 8003454:	40021000 	.word	0x40021000
 8003458:	20000450 	.word	0x20000450
 800345c:	4002006c 	.word	0x4002006c
 8003460:	08005254 	.word	0x08005254
 8003464:	20000518 	.word	0x20000518
 8003468:	40020080 	.word	0x40020080

0800346c <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003470:	bf00      	nop
 8003472:	46bd      	mov	sp, r7
 8003474:	bc80      	pop	{r7}
 8003476:	4770      	bx	lr

08003478 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800347c:	e7fe      	b.n	800347c <HardFault_Handler+0x4>

0800347e <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800347e:	b480      	push	{r7}
 8003480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003482:	e7fe      	b.n	8003482 <MemManage_Handler+0x4>

08003484 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8003484:	b480      	push	{r7}
 8003486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003488:	e7fe      	b.n	8003488 <BusFault_Handler+0x4>

0800348a <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800348a:	b480      	push	{r7}
 800348c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800348e:	e7fe      	b.n	800348e <UsageFault_Handler+0x4>

08003490 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003494:	bf00      	nop
 8003496:	46bd      	mov	sp, r7
 8003498:	bc80      	pop	{r7}
 800349a:	4770      	bx	lr

0800349c <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034a0:	bf00      	nop
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bc80      	pop	{r7}
 80034a6:	4770      	bx	lr

080034a8 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034ac:	bf00      	nop
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bc80      	pop	{r7}
 80034b2:	4770      	bx	lr

080034b4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034b8:	f7fc fe8e 	bl	80001d8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80034bc:	f7fc ffee 	bl	800049c <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034c0:	bf00      	nop
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <DMA1_Channel6_IRQHandler>:

/**
* @brief This function handles DMA1 channel6 global interrupt.
*/
void DMA1_Channel6_IRQHandler(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80034c8:	4802      	ldr	r0, [pc, #8]	; (80034d4 <DMA1_Channel6_IRQHandler+0x10>)
 80034ca:	f7fd f935 	bl	8000738 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80034ce:	bf00      	nop
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	20000450 	.word	0x20000450

080034d8 <DMA1_Channel7_IRQHandler>:

/**
* @brief This function handles DMA1 channel7 global interrupt.
*/
void DMA1_Channel7_IRQHandler(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80034dc:	4802      	ldr	r0, [pc, #8]	; (80034e8 <DMA1_Channel7_IRQHandler+0x10>)
 80034de:	f7fd f92b 	bl	8000738 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80034e2:	bf00      	nop
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	20000518 	.word	0x20000518

080034ec <I2C1_EV_IRQHandler>:

/**
* @brief This function handles I2C1 event interrupt.
*/
void I2C1_EV_IRQHandler(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80034f0:	4802      	ldr	r0, [pc, #8]	; (80034fc <I2C1_EV_IRQHandler+0x10>)
 80034f2:	f7fd fdad 	bl	8001050 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80034f6:	bf00      	nop
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	20000494 	.word	0x20000494

08003500 <I2C1_ER_IRQHandler>:

/**
* @brief This function handles I2C1 error interrupt.
*/
void I2C1_ER_IRQHandler(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003504:	4802      	ldr	r0, [pc, #8]	; (8003510 <I2C1_ER_IRQHandler+0x10>)
 8003506:	f7fd fea7 	bl	8001258 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800350a:	bf00      	nop
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	20000494 	.word	0x20000494

08003514 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003518:	4a15      	ldr	r2, [pc, #84]	; (8003570 <SystemInit+0x5c>)
 800351a:	4b15      	ldr	r3, [pc, #84]	; (8003570 <SystemInit+0x5c>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f043 0301 	orr.w	r3, r3, #1
 8003522:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003524:	4912      	ldr	r1, [pc, #72]	; (8003570 <SystemInit+0x5c>)
 8003526:	4b12      	ldr	r3, [pc, #72]	; (8003570 <SystemInit+0x5c>)
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	4b12      	ldr	r3, [pc, #72]	; (8003574 <SystemInit+0x60>)
 800352c:	4013      	ands	r3, r2
 800352e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003530:	4a0f      	ldr	r2, [pc, #60]	; (8003570 <SystemInit+0x5c>)
 8003532:	4b0f      	ldr	r3, [pc, #60]	; (8003570 <SystemInit+0x5c>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800353a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800353e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003540:	4a0b      	ldr	r2, [pc, #44]	; (8003570 <SystemInit+0x5c>)
 8003542:	4b0b      	ldr	r3, [pc, #44]	; (8003570 <SystemInit+0x5c>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800354a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800354c:	4a08      	ldr	r2, [pc, #32]	; (8003570 <SystemInit+0x5c>)
 800354e:	4b08      	ldr	r3, [pc, #32]	; (8003570 <SystemInit+0x5c>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003556:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003558:	4b05      	ldr	r3, [pc, #20]	; (8003570 <SystemInit+0x5c>)
 800355a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800355e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003560:	4b05      	ldr	r3, [pc, #20]	; (8003578 <SystemInit+0x64>)
 8003562:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003566:	609a      	str	r2, [r3, #8]
#endif 
}
 8003568:	bf00      	nop
 800356a:	46bd      	mov	sp, r7
 800356c:	bc80      	pop	{r7}
 800356e:	4770      	bx	lr
 8003570:	40021000 	.word	0x40021000
 8003574:	f8ff0000 	.word	0xf8ff0000
 8003578:	e000ed00 	.word	0xe000ed00

0800357c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800357c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800357e:	e003      	b.n	8003588 <LoopCopyDataInit>

08003580 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003580:	4b0b      	ldr	r3, [pc, #44]	; (80035b0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003582:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003584:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003586:	3104      	adds	r1, #4

08003588 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003588:	480a      	ldr	r0, [pc, #40]	; (80035b4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800358a:	4b0b      	ldr	r3, [pc, #44]	; (80035b8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800358c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800358e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003590:	d3f6      	bcc.n	8003580 <CopyDataInit>
  ldr r2, =_sbss
 8003592:	4a0a      	ldr	r2, [pc, #40]	; (80035bc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003594:	e002      	b.n	800359c <LoopFillZerobss>

08003596 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003596:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003598:	f842 3b04 	str.w	r3, [r2], #4

0800359c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800359c:	4b08      	ldr	r3, [pc, #32]	; (80035c0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800359e:	429a      	cmp	r2, r3
  bcc FillZerobss
 80035a0:	d3f9      	bcc.n	8003596 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80035a2:	f7ff ffb7 	bl	8003514 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035a6:	f001 fdf5 	bl	8005194 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80035aa:	f7ff fcf7 	bl	8002f9c <main>
  bx lr
 80035ae:	4770      	bx	lr
  ldr r3, =_sidata
 80035b0:	08007b9c 	.word	0x08007b9c
  ldr r0, =_sdata
 80035b4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80035b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80035bc:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80035c0:	200005e4 	.word	0x200005e4

080035c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80035c4:	e7fe      	b.n	80035c4 <ADC1_2_IRQHandler>

080035c6 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b084      	sub	sp, #16
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	7c1b      	ldrb	r3, [r3, #16]
 80035d4:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035dc:	461a      	mov	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	fb02 f303 	mul.w	r3, r2, r3
 80035e4:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	00db      	lsls	r3, r3, #3
 80035ea:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	2100      	movs	r1, #0
 80035f4:	4618      	mov	r0, r3
 80035f6:	f001 fdf1 	bl	80051dc <memset>
}
 80035fa:	bf00      	nop
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b086      	sub	sp, #24
 8003606:	af02      	add	r7, sp, #8
 8003608:	6078      	str	r0, [r7, #4]
 800360a:	460b      	mov	r3, r1
 800360c:	70fb      	strb	r3, [r7, #3]
 800360e:	4613      	mov	r3, r2
 8003610:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	7c1b      	ldrb	r3, [r3, #16]
 8003618:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 800361a:	78fb      	ldrb	r3, [r7, #3]
 800361c:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003622:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8003624:	7bfb      	ldrb	r3, [r7, #15]
 8003626:	b29b      	uxth	r3, r3
 8003628:	89ba      	ldrh	r2, [r7, #12]
 800362a:	fb02 f303 	mul.w	r3, r2, r3
 800362e:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8003630:	89bb      	ldrh	r3, [r7, #12]
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8003636:	89bb      	ldrh	r3, [r7, #12]
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	4413      	add	r3, r2
 800363c:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 800363e:	7bf9      	ldrb	r1, [r7, #15]
 8003640:	78ba      	ldrb	r2, [r7, #2]
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	9300      	str	r3, [sp, #0]
 8003646:	460b      	mov	r3, r1
 8003648:	2100      	movs	r1, #0
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f001 fcd4 	bl	8004ff8 <u8x8_DrawTile>
}
 8003650:	bf00      	nop
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8003660:	2300      	movs	r3, #0
 8003662:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800366a:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003672:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	7c5b      	ldrb	r3, [r3, #17]
 800367a:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 800367c:	7bba      	ldrb	r2, [r7, #14]
 800367e:	7bfb      	ldrb	r3, [r7, #15]
 8003680:	4619      	mov	r1, r3
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7ff ffbd 	bl	8003602 <u8g2_send_tile_row>
    src_row++;
 8003688:	7bfb      	ldrb	r3, [r7, #15]
 800368a:	3301      	adds	r3, #1
 800368c:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 800368e:	7bbb      	ldrb	r3, [r7, #14]
 8003690:	3301      	adds	r3, #1
 8003692:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8003694:	7bfa      	ldrb	r2, [r7, #15]
 8003696:	7b7b      	ldrb	r3, [r7, #13]
 8003698:	429a      	cmp	r2, r3
 800369a:	d203      	bcs.n	80036a4 <u8g2_send_buffer+0x4c>
 800369c:	7bba      	ldrb	r2, [r7, #14]
 800369e:	7b3b      	ldrb	r3, [r7, #12]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d3eb      	bcc.n	800367c <u8g2_send_buffer+0x24>
}
 80036a4:	bf00      	nop
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f7ff ffcf 	bl	8003658 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f001 fced 	bl	800509a <u8x8_RefreshDisplay>
}
 80036c0:	bf00      	nop
 80036c2:	3708      	adds	r7, #8
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	460b      	mov	r3, r1
 80036d2:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	78fa      	ldrb	r2, [r7, #3]
 80036d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  u8g2->cb->update_dimension(u8g2);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	4798      	blx	r3
}
 80036f0:	bf00      	nop
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8003706:	2b00      	cmp	r3, #0
 8003708:	d002      	beq.n	8003710 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7ff ff5b 	bl	80035c6 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8003710:	2100      	movs	r1, #0
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7ff ffd8 	bl	80036c8 <u8g2_SetBufferCurrTileRow>
}
 8003718:	bf00      	nop
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f7ff ff95 	bl	8003658 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003734:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 800373c:	7bfb      	ldrb	r3, [r7, #15]
 800373e:	4413      	add	r3, r2
 8003740:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	7c5b      	ldrb	r3, [r3, #17]
 8003748:	7bfa      	ldrb	r2, [r7, #15]
 800374a:	429a      	cmp	r2, r3
 800374c:	d304      	bcc.n	8003758 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f001 fca3 	bl	800509a <u8x8_RefreshDisplay>
    return 0;
 8003754:	2300      	movs	r3, #0
 8003756:	e00d      	b.n	8003774 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 800375e:	2b00      	cmp	r3, #0
 8003760:	d002      	beq.n	8003768 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7ff ff2f 	bl	80035c6 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8003768:	7bfb      	ldrb	r3, [r7, #15]
 800376a:	4619      	mov	r1, r3
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f7ff ffab 	bl	80036c8 <u8g2_SetBufferCurrTileRow>
  return 1;
 8003772:	2301      	movs	r3, #1
}
 8003774:	4618      	mov	r0, r3
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f7ff ffb7 	bl	80036f8 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7ff ffc8 	bl	8003720 <u8g2_NextPage>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1f9      	bne.n	800378a <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8003796:	2100      	movs	r1, #0
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f7ff ff95 	bl	80036c8 <u8g2_SetBufferCurrTileRow>
}
 800379e:	bf00      	nop
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
	...

080037a8 <u8g2_m_16_8_f>:
  static uint8_t buf[256];
  *page_cnt = 2;
  return buf;
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  static uint8_t buf[1024];
  *page_cnt = 8;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2208      	movs	r2, #8
 80037b4:	701a      	strb	r2, [r3, #0]
  return buf;
 80037b6:	4b03      	ldr	r3, [pc, #12]	; (80037c4 <u8g2_m_16_8_f+0x1c>)
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	bc80      	pop	{r7}
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	2000004c 	.word	0x2000004c

080037c8 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b088      	sub	sp, #32
 80037cc:	af02      	add	r7, sp, #8
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
 80037d4:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_i2c, byte_cb, gpio_and_delay_cb);
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a0b      	ldr	r2, [pc, #44]	; (800380c <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x44>)
 80037de:	490c      	ldr	r1, [pc, #48]	; (8003810 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x48>)
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f001 fcb9 	bl	8005158 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 80037e6:	f107 0313 	add.w	r3, r7, #19
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7ff ffdc 	bl	80037a8 <u8g2_m_16_8_f>
 80037f0:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80037f2:	7cfa      	ldrb	r2, [r7, #19]
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	4b06      	ldr	r3, [pc, #24]	; (8003814 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x4c>)
 80037fa:	6979      	ldr	r1, [r7, #20]
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f000 fff8 	bl	80047f2 <u8g2_SetupBuffer>
}
 8003802:	bf00      	nop
 8003804:	3718      	adds	r7, #24
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	08004ce9 	.word	0x08004ce9
 8003810:	08004ef5 	.word	0x08004ef5
 8003814:	08004679 	.word	0x08004679

08003818 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	460b      	mov	r3, r1
 8003822:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8003824:	78fb      	ldrb	r3, [r7, #3]
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	4413      	add	r3, r2
 800382a:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	781b      	ldrb	r3, [r3, #0]
}
 8003830:	4618      	mov	r0, r3
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	bc80      	pop	{r7}
 8003838:	4770      	bx	lr

0800383a <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 800383a:	b480      	push	{r7}
 800383c:	b085      	sub	sp, #20
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
 8003842:	460b      	mov	r3, r1
 8003844:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8003846:	78fb      	ldrb	r3, [r7, #3]
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	4413      	add	r3, r2
 800384c:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	81fb      	strh	r3, [r7, #14]
    font++;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3301      	adds	r3, #1
 8003858:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 800385a:	89fb      	ldrh	r3, [r7, #14]
 800385c:	021b      	lsls	r3, r3, #8
 800385e:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	b29a      	uxth	r2, r3
 8003866:	89fb      	ldrh	r3, [r7, #14]
 8003868:	4413      	add	r3, r2
 800386a:	81fb      	strh	r3, [r7, #14]
    return pos;
 800386c:	89fb      	ldrh	r3, [r7, #14]
}
 800386e:	4618      	mov	r0, r3
 8003870:	3714      	adds	r7, #20
 8003872:	46bd      	mov	sp, r7
 8003874:	bc80      	pop	{r7}
 8003876:	4770      	bx	lr

08003878 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8003882:	2100      	movs	r1, #0
 8003884:	6838      	ldr	r0, [r7, #0]
 8003886:	f7ff ffc7 	bl	8003818 <u8g2_font_get_byte>
 800388a:	4603      	mov	r3, r0
 800388c:	461a      	mov	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8003892:	2101      	movs	r1, #1
 8003894:	6838      	ldr	r0, [r7, #0]
 8003896:	f7ff ffbf 	bl	8003818 <u8g2_font_get_byte>
 800389a:	4603      	mov	r3, r0
 800389c:	461a      	mov	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 80038a2:	2102      	movs	r1, #2
 80038a4:	6838      	ldr	r0, [r7, #0]
 80038a6:	f7ff ffb7 	bl	8003818 <u8g2_font_get_byte>
 80038aa:	4603      	mov	r3, r0
 80038ac:	461a      	mov	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 80038b2:	2103      	movs	r1, #3
 80038b4:	6838      	ldr	r0, [r7, #0]
 80038b6:	f7ff ffaf 	bl	8003818 <u8g2_font_get_byte>
 80038ba:	4603      	mov	r3, r0
 80038bc:	461a      	mov	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 80038c2:	2104      	movs	r1, #4
 80038c4:	6838      	ldr	r0, [r7, #0]
 80038c6:	f7ff ffa7 	bl	8003818 <u8g2_font_get_byte>
 80038ca:	4603      	mov	r3, r0
 80038cc:	461a      	mov	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 80038d2:	2105      	movs	r1, #5
 80038d4:	6838      	ldr	r0, [r7, #0]
 80038d6:	f7ff ff9f 	bl	8003818 <u8g2_font_get_byte>
 80038da:	4603      	mov	r3, r0
 80038dc:	461a      	mov	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 80038e2:	2106      	movs	r1, #6
 80038e4:	6838      	ldr	r0, [r7, #0]
 80038e6:	f7ff ff97 	bl	8003818 <u8g2_font_get_byte>
 80038ea:	4603      	mov	r3, r0
 80038ec:	461a      	mov	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 80038f2:	2107      	movs	r1, #7
 80038f4:	6838      	ldr	r0, [r7, #0]
 80038f6:	f7ff ff8f 	bl	8003818 <u8g2_font_get_byte>
 80038fa:	4603      	mov	r3, r0
 80038fc:	461a      	mov	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8003902:	2108      	movs	r1, #8
 8003904:	6838      	ldr	r0, [r7, #0]
 8003906:	f7ff ff87 	bl	8003818 <u8g2_font_get_byte>
 800390a:	4603      	mov	r3, r0
 800390c:	461a      	mov	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8003912:	2109      	movs	r1, #9
 8003914:	6838      	ldr	r0, [r7, #0]
 8003916:	f7ff ff7f 	bl	8003818 <u8g2_font_get_byte>
 800391a:	4603      	mov	r3, r0
 800391c:	b25a      	sxtb	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8003922:	210a      	movs	r1, #10
 8003924:	6838      	ldr	r0, [r7, #0]
 8003926:	f7ff ff77 	bl	8003818 <u8g2_font_get_byte>
 800392a:	4603      	mov	r3, r0
 800392c:	b25a      	sxtb	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8003932:	210b      	movs	r1, #11
 8003934:	6838      	ldr	r0, [r7, #0]
 8003936:	f7ff ff6f 	bl	8003818 <u8g2_font_get_byte>
 800393a:	4603      	mov	r3, r0
 800393c:	b25a      	sxtb	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8003942:	210c      	movs	r1, #12
 8003944:	6838      	ldr	r0, [r7, #0]
 8003946:	f7ff ff67 	bl	8003818 <u8g2_font_get_byte>
 800394a:	4603      	mov	r3, r0
 800394c:	b25a      	sxtb	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8003952:	210d      	movs	r1, #13
 8003954:	6838      	ldr	r0, [r7, #0]
 8003956:	f7ff ff5f 	bl	8003818 <u8g2_font_get_byte>
 800395a:	4603      	mov	r3, r0
 800395c:	b25a      	sxtb	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8003962:	210e      	movs	r1, #14
 8003964:	6838      	ldr	r0, [r7, #0]
 8003966:	f7ff ff57 	bl	8003818 <u8g2_font_get_byte>
 800396a:	4603      	mov	r3, r0
 800396c:	b25a      	sxtb	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8003972:	210f      	movs	r1, #15
 8003974:	6838      	ldr	r0, [r7, #0]
 8003976:	f7ff ff4f 	bl	8003818 <u8g2_font_get_byte>
 800397a:	4603      	mov	r3, r0
 800397c:	b25a      	sxtb	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8003982:	2110      	movs	r1, #16
 8003984:	6838      	ldr	r0, [r7, #0]
 8003986:	f7ff ff47 	bl	8003818 <u8g2_font_get_byte>
 800398a:	4603      	mov	r3, r0
 800398c:	b25a      	sxtb	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8003992:	2111      	movs	r1, #17
 8003994:	6838      	ldr	r0, [r7, #0]
 8003996:	f7ff ff50 	bl	800383a <u8g2_font_get_word>
 800399a:	4603      	mov	r3, r0
 800399c:	461a      	mov	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80039a2:	2113      	movs	r1, #19
 80039a4:	6838      	ldr	r0, [r7, #0]
 80039a6:	f7ff ff48 	bl	800383a <u8g2_font_get_word>
 80039aa:	4603      	mov	r3, r0
 80039ac:	461a      	mov	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 80039b2:	2115      	movs	r1, #21
 80039b4:	6838      	ldr	r0, [r7, #0]
 80039b6:	f7ff ff40 	bl	800383a <u8g2_font_get_word>
 80039ba:	4603      	mov	r3, r0
 80039bc:	461a      	mov	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	82da      	strh	r2, [r3, #22]
#endif
}
 80039c2:	bf00      	nop
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 80039ca:	b480      	push	{r7}
 80039cc:	b085      	sub	sp, #20
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
 80039d2:	460b      	mov	r3, r1
 80039d4:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	7a9b      	ldrb	r3, [r3, #10]
 80039da:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 80039e4:	7bfa      	ldrb	r2, [r7, #15]
 80039e6:	7b7b      	ldrb	r3, [r7, #13]
 80039e8:	fa42 f303 	asr.w	r3, r2, r3
 80039ec:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 80039ee:	7b7b      	ldrb	r3, [r7, #13]
 80039f0:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 80039f2:	7bba      	ldrb	r2, [r7, #14]
 80039f4:	78fb      	ldrb	r3, [r7, #3]
 80039f6:	4413      	add	r3, r2
 80039f8:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 80039fa:	7bbb      	ldrb	r3, [r7, #14]
 80039fc:	2b07      	cmp	r3, #7
 80039fe:	d91a      	bls.n	8003a36 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8003a00:	2308      	movs	r3, #8
 8003a02:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8003a04:	7b3a      	ldrb	r2, [r7, #12]
 8003a06:	7b7b      	ldrb	r3, [r7, #13]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	7b3b      	ldrb	r3, [r7, #12]
 8003a20:	fa02 f303 	lsl.w	r3, r2, r3
 8003a24:	b25a      	sxtb	r2, r3
 8003a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	b25b      	sxtb	r3, r3
 8003a2e:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8003a30:	7bbb      	ldrb	r3, [r7, #14]
 8003a32:	3b08      	subs	r3, #8
 8003a34:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8003a36:	78fb      	ldrb	r3, [r7, #3]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	3b01      	subs	r3, #1
 8003a42:	b2da      	uxtb	r2, r3
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
 8003a46:	4013      	ands	r3, r2
 8003a48:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	7bba      	ldrb	r2, [r7, #14]
 8003a4e:	729a      	strb	r2, [r3, #10]
  return val;
 8003a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3714      	adds	r7, #20
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bc80      	pop	{r7}
 8003a5a:	4770      	bx	lr

08003a5c <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	460b      	mov	r3, r1
 8003a66:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8003a68:	78fb      	ldrb	r3, [r7, #3]
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f7ff ffac 	bl	80039ca <u8g2_font_decode_get_unsigned_bits>
 8003a72:	4603      	mov	r3, r0
 8003a74:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8003a76:	2301      	movs	r3, #1
 8003a78:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8003a7a:	78fb      	ldrb	r3, [r7, #3]
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8003a80:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8003a84:	78fb      	ldrb	r3, [r7, #3]
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8003a8c:	7bfa      	ldrb	r2, [r7, #15]
 8003a8e:	7bbb      	ldrb	r3, [r7, #14]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	73fb      	strb	r3, [r7, #15]
  return v;
 8003a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8003aa2:	b490      	push	{r4, r7}
 8003aa4:	b082      	sub	sp, #8
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	4604      	mov	r4, r0
 8003aaa:	4608      	mov	r0, r1
 8003aac:	4611      	mov	r1, r2
 8003aae:	461a      	mov	r2, r3
 8003ab0:	4623      	mov	r3, r4
 8003ab2:	71fb      	strb	r3, [r7, #7]
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	71bb      	strb	r3, [r7, #6]
 8003ab8:	460b      	mov	r3, r1
 8003aba:	717b      	strb	r3, [r7, #5]
 8003abc:	4613      	mov	r3, r2
 8003abe:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8003ac0:	793b      	ldrb	r3, [r7, #4]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d008      	beq.n	8003ad8 <u8g2_add_vector_y+0x36>
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d00b      	beq.n	8003ae2 <u8g2_add_vector_y+0x40>
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10e      	bne.n	8003aec <u8g2_add_vector_y+0x4a>
  {
    case 0:
      dy += y;
 8003ace:	797a      	ldrb	r2, [r7, #5]
 8003ad0:	79fb      	ldrb	r3, [r7, #7]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	71fb      	strb	r3, [r7, #7]
      break;
 8003ad6:	e00e      	b.n	8003af6 <u8g2_add_vector_y+0x54>
    case 1:
      dy += x;
 8003ad8:	79ba      	ldrb	r2, [r7, #6]
 8003ada:	79fb      	ldrb	r3, [r7, #7]
 8003adc:	4413      	add	r3, r2
 8003ade:	71fb      	strb	r3, [r7, #7]
      break;
 8003ae0:	e009      	b.n	8003af6 <u8g2_add_vector_y+0x54>
    case 2:
      dy -= y;
 8003ae2:	797b      	ldrb	r3, [r7, #5]
 8003ae4:	79fa      	ldrb	r2, [r7, #7]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	71fb      	strb	r3, [r7, #7]
      break;
 8003aea:	e004      	b.n	8003af6 <u8g2_add_vector_y+0x54>
    default:
      dy -= x;
 8003aec:	79bb      	ldrb	r3, [r7, #6]
 8003aee:	79fa      	ldrb	r2, [r7, #7]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	71fb      	strb	r3, [r7, #7]
      break;      
 8003af4:	bf00      	nop
  }
  return dy;
 8003af6:	79fb      	ldrb	r3, [r7, #7]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bc90      	pop	{r4, r7}
 8003b00:	4770      	bx	lr

08003b02 <u8g2_add_vector_x>:

static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8003b02:	b490      	push	{r4, r7}
 8003b04:	b082      	sub	sp, #8
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	4604      	mov	r4, r0
 8003b0a:	4608      	mov	r0, r1
 8003b0c:	4611      	mov	r1, r2
 8003b0e:	461a      	mov	r2, r3
 8003b10:	4623      	mov	r3, r4
 8003b12:	71fb      	strb	r3, [r7, #7]
 8003b14:	4603      	mov	r3, r0
 8003b16:	71bb      	strb	r3, [r7, #6]
 8003b18:	460b      	mov	r3, r1
 8003b1a:	717b      	strb	r3, [r7, #5]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8003b20:	793b      	ldrb	r3, [r7, #4]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d008      	beq.n	8003b38 <u8g2_add_vector_x+0x36>
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d00b      	beq.n	8003b42 <u8g2_add_vector_x+0x40>
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10e      	bne.n	8003b4c <u8g2_add_vector_x+0x4a>
  {
    case 0:
      dx += x;
 8003b2e:	79ba      	ldrb	r2, [r7, #6]
 8003b30:	79fb      	ldrb	r3, [r7, #7]
 8003b32:	4413      	add	r3, r2
 8003b34:	71fb      	strb	r3, [r7, #7]
      break;
 8003b36:	e00e      	b.n	8003b56 <u8g2_add_vector_x+0x54>
    case 1:
      dx -= y;
 8003b38:	797b      	ldrb	r3, [r7, #5]
 8003b3a:	79fa      	ldrb	r2, [r7, #7]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	71fb      	strb	r3, [r7, #7]
      break;
 8003b40:	e009      	b.n	8003b56 <u8g2_add_vector_x+0x54>
    case 2:
      dx -= x;
 8003b42:	79bb      	ldrb	r3, [r7, #6]
 8003b44:	79fa      	ldrb	r2, [r7, #7]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	71fb      	strb	r3, [r7, #7]
      break;
 8003b4a:	e004      	b.n	8003b56 <u8g2_add_vector_x+0x54>
    default:
      dx += y;
 8003b4c:	797a      	ldrb	r2, [r7, #5]
 8003b4e:	79fb      	ldrb	r3, [r7, #7]
 8003b50:	4413      	add	r3, r2
 8003b52:	71fb      	strb	r3, [r7, #7]
      break;      
 8003b54:	bf00      	nop
  }
  return dx;
 8003b56:	79fb      	ldrb	r3, [r7, #7]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3708      	adds	r7, #8
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bc90      	pop	{r4, r7}
 8003b60:	4770      	bx	lr

08003b62 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b088      	sub	sp, #32
 8003b66:	af02      	add	r7, sp, #8
 8003b68:	6078      	str	r0, [r7, #4]
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	70fb      	strb	r3, [r7, #3]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	3358      	adds	r3, #88	; 0x58
 8003b76:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8003b78:	78fb      	ldrb	r3, [r7, #3]
 8003b7a:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8003b82:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8003b8a:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003b92:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8003b94:	7bfa      	ldrb	r2, [r7, #15]
 8003b96:	7d7b      	ldrb	r3, [r7, #21]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8003b9c:	7bfb      	ldrb	r3, [r7, #15]
 8003b9e:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8003ba0:	7dfa      	ldrb	r2, [r7, #23]
 8003ba2:	7bfb      	ldrb	r3, [r7, #15]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d201      	bcs.n	8003bac <u8g2_font_decode_len+0x4a>
      current = cnt;
 8003ba8:	7dfb      	ldrb	r3, [r7, #23]
 8003baa:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	791b      	ldrb	r3, [r3, #4]
 8003bb0:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	795b      	ldrb	r3, [r3, #5]
 8003bb6:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8003bb8:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8003bbc:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	7b9b      	ldrb	r3, [r3, #14]
 8003bc4:	7bb8      	ldrb	r0, [r7, #14]
 8003bc6:	f7ff ff9c 	bl	8003b02 <u8g2_add_vector_x>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8003bce:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8003bd2:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	7b9b      	ldrb	r3, [r3, #14]
 8003bda:	7b78      	ldrb	r0, [r7, #13]
 8003bdc:	f7ff ff61 	bl	8003aa2 <u8g2_add_vector_y>
 8003be0:	4603      	mov	r3, r0
 8003be2:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8003be4:	78bb      	ldrb	r3, [r7, #2]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00f      	beq.n	8003c0a <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	7b1a      	ldrb	r2, [r3, #12]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, 
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	7b9b      	ldrb	r3, [r3, #14]
 8003bf8:	7db8      	ldrb	r0, [r7, #22]
 8003bfa:	7b7a      	ldrb	r2, [r7, #13]
 8003bfc:	7bb9      	ldrb	r1, [r7, #14]
 8003bfe:	9300      	str	r3, [sp, #0]
 8003c00:	4603      	mov	r3, r0
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 fc0d 	bl	8004422 <u8g2_DrawHVLine>
 8003c08:	e012      	b.n	8003c30 <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	7adb      	ldrb	r3, [r3, #11]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d10e      	bne.n	8003c30 <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	7b5a      	ldrb	r2, [r3, #13]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, 
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	7b9b      	ldrb	r3, [r3, #14]
 8003c20:	7db8      	ldrb	r0, [r7, #22]
 8003c22:	7b7a      	ldrb	r2, [r7, #13]
 8003c24:	7bb9      	ldrb	r1, [r7, #14]
 8003c26:	9300      	str	r3, [sp, #0]
 8003c28:	4603      	mov	r3, r0
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 fbf9 	bl	8004422 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8003c30:	7dfa      	ldrb	r2, [r7, #23]
 8003c32:	7bfb      	ldrb	r3, [r7, #15]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d309      	bcc.n	8003c4c <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 8003c38:	7dfa      	ldrb	r2, [r7, #23]
 8003c3a:	7bfb      	ldrb	r3, [r7, #15]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8003c40:	2300      	movs	r3, #0
 8003c42:	757b      	strb	r3, [r7, #21]
    ly++;
 8003c44:	7d3b      	ldrb	r3, [r7, #20]
 8003c46:	3301      	adds	r3, #1
 8003c48:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8003c4a:	e79f      	b.n	8003b8c <u8g2_font_decode_len+0x2a>
      break;
 8003c4c:	bf00      	nop
  }
  lx += cnt;
 8003c4e:	7d7a      	ldrb	r2, [r7, #21]
 8003c50:	7dfb      	ldrb	r3, [r7, #23]
 8003c52:	4413      	add	r3, r2
 8003c54:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8003c56:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 8003c5e:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	71da      	strb	r2, [r3, #7]
  
}
 8003c66:	bf00      	nop
 8003c68:	3718      	adds	r7, #24
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b084      	sub	sp, #16
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
 8003c76:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	3358      	adds	r3, #88	; 0x58
 8003c7c:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8003c90:	4619      	mov	r1, r3
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f7ff fe99 	bl	80039ca <u8g2_font_decode_get_unsigned_bits>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	b25a      	sxtb	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f7ff fe8e 	bl	80039ca <u8g2_font_decode_get_unsigned_bits>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	b25a      	sxtb	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	7b1b      	ldrb	r3, [r3, #12]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	bf0c      	ite	eq
 8003cc8:	2301      	moveq	r3, #1
 8003cca:	2300      	movne	r3, #0
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	461a      	mov	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	735a      	strb	r2, [r3, #13]
}
 8003cd4:	bf00      	nop
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b088      	sub	sp, #32
 8003ce0:	af02      	add	r7, sp, #8
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	3358      	adds	r3, #88	; 0x58
 8003cea:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 8003cec:	6839      	ldr	r1, [r7, #0]
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7ff ffbd 	bl	8003c6e <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003cfa:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8003d02:	4619      	mov	r1, r3
 8003d04:	6938      	ldr	r0, [r7, #16]
 8003d06:	f7ff fea9 	bl	8003a5c <u8g2_font_decode_get_signed_bits>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8003d14:	4619      	mov	r1, r3
 8003d16:	6938      	ldr	r0, [r7, #16]
 8003d18:	f7ff fea0 	bl	8003a5c <u8g2_font_decode_get_signed_bits>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003d26:	4619      	mov	r1, r3
 8003d28:	6938      	ldr	r0, [r7, #16]
 8003d2a:	f7ff fe97 	bl	8003a5c <u8g2_font_decode_get_signed_bits>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f340 80cf 	ble.w	8003edc <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	7918      	ldrb	r0, [r3, #4]
 8003d42:	7bfa      	ldrb	r2, [r7, #15]
 8003d44:	7b7b      	ldrb	r3, [r7, #13]
 8003d46:	4413      	add	r3, r2
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	425b      	negs	r3, r3
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	b25a      	sxtb	r2, r3
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	7b9b      	ldrb	r3, [r3, #14]
 8003d54:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8003d58:	f7ff fed3 	bl	8003b02 <u8g2_add_vector_x>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	461a      	mov	r2, r3
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	7958      	ldrb	r0, [r3, #5]
 8003d68:	7bfa      	ldrb	r2, [r7, #15]
 8003d6a:	7b7b      	ldrb	r3, [r7, #13]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	425b      	negs	r3, r3
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	b25a      	sxtb	r2, r3
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	7b9b      	ldrb	r3, [r3, #14]
 8003d7a:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8003d7e:	f7ff fe90 	bl	8003aa2 <u8g2_add_vector_y>
 8003d82:	4603      	mov	r3, r0
 8003d84:	461a      	mov	r2, r3
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	791b      	ldrb	r3, [r3, #4]
 8003d8e:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	795b      	ldrb	r3, [r3, #5]
 8003d94:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 8003d96:	7dfb      	ldrb	r3, [r7, #23]
 8003d98:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 8003d9a:	7d7b      	ldrb	r3, [r7, #21]
 8003d9c:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	7b9b      	ldrb	r3, [r3, #14]
 8003da2:	2b03      	cmp	r3, #3
 8003da4:	d852      	bhi.n	8003e4c <u8g2_font_decode_glyph+0x170>
 8003da6:	a201      	add	r2, pc, #4	; (adr r2, 8003dac <u8g2_font_decode_glyph+0xd0>)
 8003da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dac:	08003dbd 	.word	0x08003dbd
 8003db0:	08003dd5 	.word	0x08003dd5
 8003db4:	08003df9 	.word	0x08003df9
 8003db8:	08003e29 	.word	0x08003e29
      {
	case 0:
	    x1 += decode->glyph_width;
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003dc2:	b2da      	uxtb	r2, r3
 8003dc4:	7dbb      	ldrb	r3, [r7, #22]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 8003dca:	7bfa      	ldrb	r2, [r7, #15]
 8003dcc:	7d3b      	ldrb	r3, [r7, #20]
 8003dce:	4413      	add	r3, r2
 8003dd0:	753b      	strb	r3, [r7, #20]
	    break;
 8003dd2:	e03b      	b.n	8003e4c <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 8003dd4:	7bfb      	ldrb	r3, [r7, #15]
 8003dd6:	7dfa      	ldrb	r2, [r7, #23]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8003ddc:	7dfb      	ldrb	r3, [r7, #23]
 8003dde:	3301      	adds	r3, #1
 8003de0:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8003de2:	7dbb      	ldrb	r3, [r7, #22]
 8003de4:	3301      	adds	r3, #1
 8003de6:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003dee:	b2da      	uxtb	r2, r3
 8003df0:	7d3b      	ldrb	r3, [r7, #20]
 8003df2:	4413      	add	r3, r2
 8003df4:	753b      	strb	r3, [r7, #20]
	    break;
 8003df6:	e029      	b.n	8003e4c <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	7dfa      	ldrb	r2, [r7, #23]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8003e06:	7dfb      	ldrb	r3, [r7, #23]
 8003e08:	3301      	adds	r3, #1
 8003e0a:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8003e0c:	7dbb      	ldrb	r3, [r7, #22]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 8003e12:	7bfb      	ldrb	r3, [r7, #15]
 8003e14:	7d7a      	ldrb	r2, [r7, #21]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8003e1a:	7d7b      	ldrb	r3, [r7, #21]
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	757b      	strb	r3, [r7, #21]
	    y1++;
 8003e20:	7d3b      	ldrb	r3, [r7, #20]
 8003e22:	3301      	adds	r3, #1
 8003e24:	753b      	strb	r3, [r7, #20]
	    break;	  
 8003e26:	e011      	b.n	8003e4c <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 8003e28:	7bfa      	ldrb	r2, [r7, #15]
 8003e2a:	7dbb      	ldrb	r3, [r7, #22]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	7d7a      	ldrb	r2, [r7, #21]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8003e3e:	7d7b      	ldrb	r3, [r7, #21]
 8003e40:	3301      	adds	r3, #1
 8003e42:	757b      	strb	r3, [r7, #21]
	    y1++;
 8003e44:	7d3b      	ldrb	r3, [r7, #20]
 8003e46:	3301      	adds	r3, #1
 8003e48:	753b      	strb	r3, [r7, #20]
	    break;	  
 8003e4a:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8003e4c:	7db8      	ldrb	r0, [r7, #22]
 8003e4e:	7d7a      	ldrb	r2, [r7, #21]
 8003e50:	7df9      	ldrb	r1, [r7, #23]
 8003e52:	7d3b      	ldrb	r3, [r7, #20]
 8003e54:	9300      	str	r3, [sp, #0]
 8003e56:	4603      	mov	r3, r0
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 fbe2 	bl	8004622 <u8g2_IsIntersection>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d102      	bne.n	8003e6a <u8g2_font_decode_glyph+0x18e>
	return d;
 8003e64:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8003e68:	e03a      	b.n	8003ee0 <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	2200      	movs	r2, #0
 8003e74:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	6938      	ldr	r0, [r7, #16]
 8003e80:	f7ff fda3 	bl	80039ca <u8g2_font_decode_get_unsigned_bits>
 8003e84:	4603      	mov	r3, r0
 8003e86:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8003e8e:	4619      	mov	r1, r3
 8003e90:	6938      	ldr	r0, [r7, #16]
 8003e92:	f7ff fd9a 	bl	80039ca <u8g2_font_decode_get_unsigned_bits>
 8003e96:	4603      	mov	r3, r0
 8003e98:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8003e9a:	7afb      	ldrb	r3, [r7, #11]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f7ff fe5e 	bl	8003b62 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8003ea6:	7abb      	ldrb	r3, [r7, #10]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	4619      	mov	r1, r3
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f7ff fe58 	bl	8003b62 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	6938      	ldr	r0, [r7, #16]
 8003eb6:	f7ff fd88 	bl	80039ca <u8g2_font_decode_get_unsigned_bits>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1ec      	bne.n	8003e9a <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8003ec6:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	dd00      	ble.n	8003ed0 <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8003ece:	e7d2      	b.n	8003e76 <u8g2_font_decode_glyph+0x19a>
	break;
 8003ed0:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	7b1a      	ldrb	r2, [r3, #12]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  }
  return d;
 8003edc:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3718      	adds	r7, #24
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ef8:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	3317      	adds	r3, #23
 8003efe:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8003f00:	887b      	ldrh	r3, [r7, #2]
 8003f02:	2bff      	cmp	r3, #255	; 0xff
 8003f04:	d82a      	bhi.n	8003f5c <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8003f06:	887b      	ldrh	r3, [r7, #2]
 8003f08:	2b60      	cmp	r3, #96	; 0x60
 8003f0a:	d907      	bls.n	8003f1c <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8003f12:	461a      	mov	r2, r3
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	4413      	add	r3, r2
 8003f18:	617b      	str	r3, [r7, #20]
 8003f1a:	e009      	b.n	8003f30 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8003f1c:	887b      	ldrh	r3, [r7, #2]
 8003f1e:	2b40      	cmp	r3, #64	; 0x40
 8003f20:	d906      	bls.n	8003f30 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8003f28:	461a      	mov	r2, r3
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	3301      	adds	r3, #1
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d04e      	beq.n	8003fd8 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	887a      	ldrh	r2, [r7, #2]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d102      	bne.n	8003f4c <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	3302      	adds	r3, #2
 8003f4a:	e049      	b.n	8003fe0 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	461a      	mov	r2, r3
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	4413      	add	r3, r2
 8003f58:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8003f5a:	e7e9      	b.n	8003f30 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8003f62:	461a      	mov	r2, r3
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	4413      	add	r3, r2
 8003f68:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8003f6e:	2100      	movs	r1, #0
 8003f70:	6938      	ldr	r0, [r7, #16]
 8003f72:	f7ff fc62 	bl	800383a <u8g2_font_get_word>
 8003f76:	4603      	mov	r3, r0
 8003f78:	461a      	mov	r2, r3
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8003f80:	2102      	movs	r1, #2
 8003f82:	6938      	ldr	r0, [r7, #16]
 8003f84:	f7ff fc59 	bl	800383a <u8g2_font_get_word>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	3304      	adds	r3, #4
 8003f90:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8003f92:	89fa      	ldrh	r2, [r7, #14]
 8003f94:	887b      	ldrh	r3, [r7, #2]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d3e9      	bcc.n	8003f6e <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8003fa0:	89fb      	ldrh	r3, [r7, #14]
 8003fa2:	021b      	lsls	r3, r3, #8
 8003fa4:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	89fb      	ldrh	r3, [r7, #14]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8003fb4:	89fb      	ldrh	r3, [r7, #14]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d010      	beq.n	8003fdc <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8003fba:	89fa      	ldrh	r2, [r7, #14]
 8003fbc:	887b      	ldrh	r3, [r7, #2]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d102      	bne.n	8003fc8 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	3303      	adds	r3, #3
 8003fc6:	e00b      	b.n	8003fe0 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	3302      	adds	r3, #2
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	461a      	mov	r2, r3
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8003fd6:	e7e0      	b.n	8003f9a <u8g2_font_get_glyph_data+0xb2>
	break;
 8003fd8:	bf00      	nop
 8003fda:	e000      	b.n	8003fde <u8g2_font_get_glyph_data+0xf6>
	break;
 8003fdc:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3718      	adds	r7, #24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	4608      	mov	r0, r1
 8003ff2:	4611      	mov	r1, r2
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	70fb      	strb	r3, [r7, #3]
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	70bb      	strb	r3, [r7, #2]
 8003ffe:	4613      	mov	r3, r2
 8004000:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 8004002:	2300      	movs	r3, #0
 8004004:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	78fa      	ldrb	r2, [r7, #3]
 800400a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  u8g2->font_decode.target_y = y;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	78ba      	ldrb	r2, [r7, #2]
 8004012:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8004016:	883b      	ldrh	r3, [r7, #0]
 8004018:	4619      	mov	r1, r3
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7ff ff64 	bl	8003ee8 <u8g2_font_get_glyph_data>
 8004020:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d005      	beq.n	8004034 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8004028:	68b9      	ldr	r1, [r7, #8]
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7ff fe56 	bl	8003cdc <u8g2_font_decode_glyph>
 8004030:	4603      	mov	r3, r0
 8004032:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 8004034:	7bfb      	ldrb	r3, [r7, #15]
}
 8004036:	4618      	mov	r0, r3
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <u8g2_SetFontMode>:
    U8G2_FONT_MODE_SOLID
    U8G2_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent)
{
 800403e:	b480      	push	{r7}
 8004040:	b083      	sub	sp, #12
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
 8004046:	460b      	mov	r3, r1
 8004048:	70fb      	strb	r3, [r7, #3]
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	78fa      	ldrb	r2, [r7, #3]
 800404e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
}
 8004052:	bf00      	nop
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	bc80      	pop	{r7}
 800405a:	4770      	bx	lr

0800405c <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	4608      	mov	r0, r1
 8004066:	4611      	mov	r1, r2
 8004068:	461a      	mov	r2, r3
 800406a:	4603      	mov	r3, r0
 800406c:	70fb      	strb	r3, [r7, #3]
 800406e:	460b      	mov	r3, r1
 8004070:	70bb      	strb	r3, [r7, #2]
 8004072:	4613      	mov	r3, r2
 8004074:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800407c:	2b03      	cmp	r3, #3
 800407e:	d833      	bhi.n	80040e8 <u8g2_DrawGlyph+0x8c>
 8004080:	a201      	add	r2, pc, #4	; (adr r2, 8004088 <u8g2_DrawGlyph+0x2c>)
 8004082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004086:	bf00      	nop
 8004088:	08004099 	.word	0x08004099
 800408c:	080040ad 	.word	0x080040ad
 8004090:	080040c1 	.word	0x080040c1
 8004094:	080040d5 	.word	0x080040d5
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	4798      	blx	r3
 80040a0:	4603      	mov	r3, r0
 80040a2:	461a      	mov	r2, r3
 80040a4:	78bb      	ldrb	r3, [r7, #2]
 80040a6:	4413      	add	r3, r2
 80040a8:	70bb      	strb	r3, [r7, #2]
      break;
 80040aa:	e01d      	b.n	80040e8 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	4798      	blx	r3
 80040b4:	4603      	mov	r3, r0
 80040b6:	461a      	mov	r2, r3
 80040b8:	78fb      	ldrb	r3, [r7, #3]
 80040ba:	1a9b      	subs	r3, r3, r2
 80040bc:	70fb      	strb	r3, [r7, #3]
      break;
 80040be:	e013      	b.n	80040e8 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	4798      	blx	r3
 80040c8:	4603      	mov	r3, r0
 80040ca:	461a      	mov	r2, r3
 80040cc:	78bb      	ldrb	r3, [r7, #2]
 80040ce:	1a9b      	subs	r3, r3, r2
 80040d0:	70bb      	strb	r3, [r7, #2]
      break;
 80040d2:	e009      	b.n	80040e8 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	4798      	blx	r3
 80040dc:	4603      	mov	r3, r0
 80040de:	461a      	mov	r2, r3
 80040e0:	78fb      	ldrb	r3, [r7, #3]
 80040e2:	4413      	add	r3, r2
 80040e4:	70fb      	strb	r3, [r7, #3]
      break;
 80040e6:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 80040e8:	883b      	ldrh	r3, [r7, #0]
 80040ea:	78ba      	ldrb	r2, [r7, #2]
 80040ec:	78f9      	ldrb	r1, [r7, #3]
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f7ff ff7a 	bl	8003fe8 <u8g2_font_draw_glyph>
 80040f4:	4603      	mov	r3, r0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop

08004100 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	607b      	str	r3, [r7, #4]
 800410a:	460b      	mov	r3, r1
 800410c:	72fb      	strb	r3, [r7, #11]
 800410e:	4613      	mov	r3, r2
 8004110:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f000 fcc0 	bl	8004a98 <u8x8_utf8_init>
  sum = 0;
 8004118:	2300      	movs	r3, #0
 800411a:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	7812      	ldrb	r2, [r2, #0]
 8004124:	4611      	mov	r1, r2
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	4798      	blx	r3
 800412a:	4603      	mov	r3, r0
 800412c:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 800412e:	8abb      	ldrh	r3, [r7, #20]
 8004130:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004134:	4293      	cmp	r3, r2
 8004136:	d038      	beq.n	80041aa <u8g2_draw_string+0xaa>
      break;
    str++;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	3301      	adds	r3, #1
 800413c:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 800413e:	8abb      	ldrh	r3, [r7, #20]
 8004140:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004144:	4293      	cmp	r3, r2
 8004146:	d0e9      	beq.n	800411c <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8004148:	8abb      	ldrh	r3, [r7, #20]
 800414a:	7aba      	ldrb	r2, [r7, #10]
 800414c:	7af9      	ldrb	r1, [r7, #11]
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f7ff ff84 	bl	800405c <u8g2_DrawGlyph>
 8004154:	4603      	mov	r3, r0
 8004156:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800415e:	2b03      	cmp	r3, #3
 8004160:	d81e      	bhi.n	80041a0 <u8g2_draw_string+0xa0>
 8004162:	a201      	add	r2, pc, #4	; (adr r2, 8004168 <u8g2_draw_string+0x68>)
 8004164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004168:	08004179 	.word	0x08004179
 800416c:	08004183 	.word	0x08004183
 8004170:	0800418d 	.word	0x0800418d
 8004174:	08004197 	.word	0x08004197
      {
	case 0:
	  x += delta;
 8004178:	7afa      	ldrb	r2, [r7, #11]
 800417a:	7cfb      	ldrb	r3, [r7, #19]
 800417c:	4413      	add	r3, r2
 800417e:	72fb      	strb	r3, [r7, #11]
	  break;
 8004180:	e00e      	b.n	80041a0 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8004182:	7aba      	ldrb	r2, [r7, #10]
 8004184:	7cfb      	ldrb	r3, [r7, #19]
 8004186:	4413      	add	r3, r2
 8004188:	72bb      	strb	r3, [r7, #10]
	  break;
 800418a:	e009      	b.n	80041a0 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 800418c:	7afa      	ldrb	r2, [r7, #11]
 800418e:	7cfb      	ldrb	r3, [r7, #19]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	72fb      	strb	r3, [r7, #11]
	  break;
 8004194:	e004      	b.n	80041a0 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8004196:	7aba      	ldrb	r2, [r7, #10]
 8004198:	7cfb      	ldrb	r3, [r7, #19]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	72bb      	strb	r3, [r7, #10]
	  break;
 800419e:	bf00      	nop
      }
#else
      x += delta;
#endif

      sum += delta;    
 80041a0:	7dfa      	ldrb	r2, [r7, #23]
 80041a2:	7cfb      	ldrb	r3, [r7, #19]
 80041a4:	4413      	add	r3, r2
 80041a6:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80041a8:	e7b8      	b.n	800411c <u8g2_draw_string+0x1c>
      break;
 80041aa:	bf00      	nop
    }
  }
  return sum;
 80041ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3718      	adds	r7, #24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop

080041b8 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	607b      	str	r3, [r7, #4]
 80041c2:	460b      	mov	r3, r1
 80041c4:	72fb      	strb	r3, [r7, #11]
 80041c6:	4613      	mov	r3, r2
 80041c8:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	4a06      	ldr	r2, [pc, #24]	; (80041e8 <u8g2_DrawStr+0x30>)
 80041ce:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 80041d0:	7aba      	ldrb	r2, [r7, #10]
 80041d2:	7af9      	ldrb	r1, [r7, #11]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f7ff ff92 	bl	8004100 <u8g2_draw_string>
 80041dc:	4603      	mov	r3, r0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	08004ab3 	.word	0x08004ab3

080041ec <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d05d      	beq.n	80042b8 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f993 2075 	ldrsb.w	r2, [r3, #117]	; 0x75
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f993 2076 	ldrsb.w	r2, [r3, #118]	; 0x76
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800421a:	2b00      	cmp	r3, #0
 800421c:	d04d      	beq.n	80042ba <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004224:	2b01      	cmp	r3, #1
 8004226:	d11c      	bne.n	8004262 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f993 3077 	ldrsb.w	r3, [r3, #119]	; 0x77
 8004234:	429a      	cmp	r2, r3
 8004236:	da05      	bge.n	8004244 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f993 2077 	ldrsb.w	r2, [r3, #119]	; 0x77
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f993 3078 	ldrsb.w	r3, [r3, #120]	; 0x78
 8004250:	429a      	cmp	r2, r3
 8004252:	dd32      	ble.n	80042ba <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f993 2078 	ldrsb.w	r2, [r3, #120]	; 0x78
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 8004260:	e02b      	b.n	80042ba <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f993 3082 	ldrsb.w	r3, [r3, #130]	; 0x82
 8004268:	461a      	mov	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 8004270:	4619      	mov	r1, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8004278:	440b      	add	r3, r1
 800427a:	429a      	cmp	r2, r3
 800427c:	da0d      	bge.n	800429a <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 8004284:	b2da      	uxtb	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 800428c:	b2db      	uxtb	r3, r3
 800428e:	4413      	add	r3, r2
 8004290:	b2db      	uxtb	r3, r3
 8004292:	b25a      	sxtb	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 80042a6:	429a      	cmp	r2, r3
 80042a8:	dd07      	ble.n	80042ba <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f993 2074 	ldrsb.w	r2, [r3, #116]	; 0x74
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 80042b6:	e000      	b.n	80042ba <u8g2_UpdateRefHeight+0xce>
    return;
 80042b8:	bf00      	nop
  }  
}
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	bc80      	pop	{r7}
 80042c0:	4770      	bx	lr

080042c2 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 80042c2:	b480      	push	{r7}
 80042c4:	b083      	sub	sp, #12
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  return 0;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bc80      	pop	{r7}
 80042d4:	4770      	bx	lr
	...

080042d8 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a03      	ldr	r2, [pc, #12]	; (80042f0 <u8g2_SetFontPosBaseline+0x18>)
 80042e4:	655a      	str	r2, [r3, #84]	; 0x54
}
 80042e6:	bf00      	nop
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bc80      	pop	{r7}
 80042ee:	4770      	bx	lr
 80042f0:	080042c3 	.word	0x080042c3

080042f4 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	429a      	cmp	r2, r3
 8004306:	d00b      	beq.n	8004320 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	651a      	str	r2, [r3, #80]	; 0x50
    u8g2_read_font_info(&(u8g2->font_info), font);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	3368      	adds	r3, #104	; 0x68
 8004312:	6839      	ldr	r1, [r7, #0]
 8004314:	4618      	mov	r0, r3
 8004316:	f7ff faaf 	bl	8003878 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f7ff ff66 	bl	80041ec <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8004320:	bf00      	nop
 8004322:	3708      	adds	r7, #8
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <u8g2_SetFontDirection>:
}



void u8g2_SetFontDirection(u8g2_t *u8g2, uint8_t dir)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	460b      	mov	r3, r1
 8004332:	70fb      	strb	r3, [r7, #3]
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = dir;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	78fa      	ldrb	r2, [r7, #3]
 8004338:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
#endif
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	bc80      	pop	{r7}
 8004344:	4770      	bx	lr

08004346 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8004346:	b480      	push	{r7}
 8004348:	b087      	sub	sp, #28
 800434a:	af00      	add	r7, sp, #0
 800434c:	60f8      	str	r0, [r7, #12]
 800434e:	60b9      	str	r1, [r7, #8]
 8004350:	4611      	mov	r1, r2
 8004352:	461a      	mov	r2, r3
 8004354:	460b      	mov	r3, r1
 8004356:	71fb      	strb	r3, [r7, #7]
 8004358:	4613      	mov	r3, r2
 800435a:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 8004362:	7dfb      	ldrb	r3, [r7, #23]
 8004364:	75bb      	strb	r3, [r7, #22]
  b += *len;
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	781a      	ldrb	r2, [r3, #0]
 800436a:	7dbb      	ldrb	r3, [r7, #22]
 800436c:	4413      	add	r3, r2
 800436e:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8004370:	7dfa      	ldrb	r2, [r7, #23]
 8004372:	7dbb      	ldrb	r3, [r7, #22]
 8004374:	429a      	cmp	r2, r3
 8004376:	d90b      	bls.n	8004390 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8004378:	7dfa      	ldrb	r2, [r7, #23]
 800437a:	79bb      	ldrb	r3, [r7, #6]
 800437c:	429a      	cmp	r2, r3
 800437e:	d205      	bcs.n	800438c <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8004380:	79bb      	ldrb	r3, [r7, #6]
 8004382:	75bb      	strb	r3, [r7, #22]
      b--;
 8004384:	7dbb      	ldrb	r3, [r7, #22]
 8004386:	3b01      	subs	r3, #1
 8004388:	75bb      	strb	r3, [r7, #22]
 800438a:	e001      	b.n	8004390 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 800438c:	79fb      	ldrb	r3, [r7, #7]
 800438e:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8004390:	7dfa      	ldrb	r2, [r7, #23]
 8004392:	79bb      	ldrb	r3, [r7, #6]
 8004394:	429a      	cmp	r2, r3
 8004396:	d301      	bcc.n	800439c <u8g2_clip_intersection2+0x56>
    return 0;
 8004398:	2300      	movs	r3, #0
 800439a:	e01c      	b.n	80043d6 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 800439c:	7dba      	ldrb	r2, [r7, #22]
 800439e:	79fb      	ldrb	r3, [r7, #7]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d801      	bhi.n	80043a8 <u8g2_clip_intersection2+0x62>
    return 0;
 80043a4:	2300      	movs	r3, #0
 80043a6:	e016      	b.n	80043d6 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 80043a8:	7dfa      	ldrb	r2, [r7, #23]
 80043aa:	79fb      	ldrb	r3, [r7, #7]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d201      	bcs.n	80043b4 <u8g2_clip_intersection2+0x6e>
    a = c;
 80043b0:	79fb      	ldrb	r3, [r7, #7]
 80043b2:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 80043b4:	7dba      	ldrb	r2, [r7, #22]
 80043b6:	79bb      	ldrb	r3, [r7, #6]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d901      	bls.n	80043c0 <u8g2_clip_intersection2+0x7a>
    b = d;
 80043bc:	79bb      	ldrb	r3, [r7, #6]
 80043be:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	7dfa      	ldrb	r2, [r7, #23]
 80043c4:	701a      	strb	r2, [r3, #0]
  b -= a;
 80043c6:	7dba      	ldrb	r2, [r7, #22]
 80043c8:	7dfb      	ldrb	r3, [r7, #23]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	75bb      	strb	r3, [r7, #22]
  *len = b;
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	7dba      	ldrb	r2, [r7, #22]
 80043d2:	701a      	strb	r2, [r3, #0]
  return 1;
 80043d4:	2301      	movs	r3, #1
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	371c      	adds	r7, #28
 80043da:	46bd      	mov	sp, r7
 80043dc:	bc80      	pop	{r7}
 80043de:	4770      	bx	lr

080043e0 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80043e0:	b590      	push	{r4, r7, lr}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af02      	add	r7, sp, #8
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	4608      	mov	r0, r1
 80043ea:	4611      	mov	r1, r2
 80043ec:	461a      	mov	r2, r3
 80043ee:	4603      	mov	r3, r0
 80043f0:	70fb      	strb	r3, [r7, #3]
 80043f2:	460b      	mov	r3, r1
 80043f4:	70bb      	strb	r3, [r7, #2]
 80043f6:	4613      	mov	r3, r2
 80043f8:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004400:	78ba      	ldrb	r2, [r7, #2]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800440a:	7878      	ldrb	r0, [r7, #1]
 800440c:	78ba      	ldrb	r2, [r7, #2]
 800440e:	78f9      	ldrb	r1, [r7, #3]
 8004410:	7e3b      	ldrb	r3, [r7, #24]
 8004412:	9300      	str	r3, [sp, #0]
 8004414:	4603      	mov	r3, r0
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	47a0      	blx	r4
}
 800441a:	bf00      	nop
 800441c:	370c      	adds	r7, #12
 800441e:	46bd      	mov	sp, r7
 8004420:	bd90      	pop	{r4, r7, pc}

08004422 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8004422:	b590      	push	{r4, r7, lr}
 8004424:	b085      	sub	sp, #20
 8004426:	af02      	add	r7, sp, #8
 8004428:	6078      	str	r0, [r7, #4]
 800442a:	4608      	mov	r0, r1
 800442c:	4611      	mov	r1, r2
 800442e:	461a      	mov	r2, r3
 8004430:	4603      	mov	r3, r0
 8004432:	70fb      	strb	r3, [r7, #3]
 8004434:	460b      	mov	r3, r1
 8004436:	70bb      	strb	r3, [r7, #2]
 8004438:	4613      	mov	r3, r2
 800443a:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004442:	2b00      	cmp	r3, #0
 8004444:	d06d      	beq.n	8004522 <u8g2_DrawHVLine+0x100>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8004446:	787b      	ldrb	r3, [r7, #1]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d06a      	beq.n	8004522 <u8g2_DrawHVLine+0x100>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 800444c:	787b      	ldrb	r3, [r7, #1]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d918      	bls.n	8004484 <u8g2_DrawHVLine+0x62>
      {
	if ( dir == 2 )
 8004452:	7e3b      	ldrb	r3, [r7, #24]
 8004454:	2b02      	cmp	r3, #2
 8004456:	d109      	bne.n	800446c <u8g2_DrawHVLine+0x4a>
	{
	  x -= len;
 8004458:	78fa      	ldrb	r2, [r7, #3]
 800445a:	787b      	ldrb	r3, [r7, #1]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	b2db      	uxtb	r3, r3
 8004460:	70fb      	strb	r3, [r7, #3]
	  x++;
 8004462:	78fb      	ldrb	r3, [r7, #3]
 8004464:	3301      	adds	r3, #1
 8004466:	b2db      	uxtb	r3, r3
 8004468:	70fb      	strb	r3, [r7, #3]
 800446a:	e00b      	b.n	8004484 <u8g2_DrawHVLine+0x62>
	}
	else if ( dir == 3 )
 800446c:	7e3b      	ldrb	r3, [r7, #24]
 800446e:	2b03      	cmp	r3, #3
 8004470:	d108      	bne.n	8004484 <u8g2_DrawHVLine+0x62>
	{
	  y -= len;
 8004472:	78ba      	ldrb	r2, [r7, #2]
 8004474:	787b      	ldrb	r3, [r7, #1]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	b2db      	uxtb	r3, r3
 800447a:	70bb      	strb	r3, [r7, #2]
	  y++;
 800447c:	78bb      	ldrb	r3, [r7, #2]
 800447e:	3301      	adds	r3, #1
 8004480:	b2db      	uxtb	r3, r3
 8004482:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 8004484:	7e3b      	ldrb	r3, [r7, #24]
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 800448c:	7e3b      	ldrb	r3, [r7, #24]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d119      	bne.n	80044c6 <u8g2_DrawHVLine+0xa4>
      {
	if ( y < u8g2->user_y0 )
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8004498:	78bb      	ldrb	r3, [r7, #2]
 800449a:	429a      	cmp	r2, r3
 800449c:	d838      	bhi.n	8004510 <u8g2_DrawHVLine+0xee>
	  return;
	if ( y >= u8g2->user_y1 )
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80044a4:	78bb      	ldrb	r3, [r7, #2]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d934      	bls.n	8004514 <u8g2_DrawHVLine+0xf2>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80044b6:	1c79      	adds	r1, r7, #1
 80044b8:	1cf8      	adds	r0, r7, #3
 80044ba:	f7ff ff44 	bl	8004346 <u8g2_clip_intersection2>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d119      	bne.n	80044f8 <u8g2_DrawHVLine+0xd6>
	  return;
 80044c4:	e02d      	b.n	8004522 <u8g2_DrawHVLine+0x100>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80044cc:	78fb      	ldrb	r3, [r7, #3]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d822      	bhi.n	8004518 <u8g2_DrawHVLine+0xf6>
	  return;
	if ( x >= u8g2->user_x1 )
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80044d8:	78fb      	ldrb	r3, [r7, #3]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d91e      	bls.n	800451c <u8g2_DrawHVLine+0xfa>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80044ea:	1c79      	adds	r1, r7, #1
 80044ec:	1cb8      	adds	r0, r7, #2
 80044ee:	f7ff ff2a 	bl	8004346 <u8g2_clip_intersection2>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d013      	beq.n	8004520 <u8g2_DrawHVLine+0xfe>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044fc:	689c      	ldr	r4, [r3, #8]
 80044fe:	78f9      	ldrb	r1, [r7, #3]
 8004500:	78ba      	ldrb	r2, [r7, #2]
 8004502:	7878      	ldrb	r0, [r7, #1]
 8004504:	7e3b      	ldrb	r3, [r7, #24]
 8004506:	9300      	str	r3, [sp, #0]
 8004508:	4603      	mov	r3, r0
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	47a0      	blx	r4
 800450e:	e008      	b.n	8004522 <u8g2_DrawHVLine+0x100>
	  return;
 8004510:	bf00      	nop
 8004512:	e006      	b.n	8004522 <u8g2_DrawHVLine+0x100>
	  return;
 8004514:	bf00      	nop
 8004516:	e004      	b.n	8004522 <u8g2_DrawHVLine+0x100>
	  return;
 8004518:	bf00      	nop
 800451a:	e002      	b.n	8004522 <u8g2_DrawHVLine+0x100>
	  return;
 800451c:	bf00      	nop
 800451e:	e000      	b.n	8004522 <u8g2_DrawHVLine+0x100>
	  return;
 8004520:	bf00      	nop
    }
}
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	bd90      	pop	{r4, r7, pc}

08004528 <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af02      	add	r7, sp, #8
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	4608      	mov	r0, r1
 8004532:	4611      	mov	r1, r2
 8004534:	461a      	mov	r2, r3
 8004536:	4603      	mov	r3, r0
 8004538:	70fb      	strb	r3, [r7, #3]
 800453a:	460b      	mov	r3, r1
 800453c:	70bb      	strb	r3, [r7, #2]
 800453e:	4613      	mov	r3, r2
 8004540:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 8004542:	7878      	ldrb	r0, [r7, #1]
 8004544:	78ba      	ldrb	r2, [r7, #2]
 8004546:	78f9      	ldrb	r1, [r7, #3]
 8004548:	2300      	movs	r3, #0
 800454a:	9300      	str	r3, [sp, #0]
 800454c:	4603      	mov	r3, r0
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7ff ff67 	bl	8004422 <u8g2_DrawHVLine>
}
 8004554:	bf00      	nop
 8004556:	3708      	adds	r7, #8
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af02      	add	r7, sp, #8
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	4608      	mov	r0, r1
 8004566:	4611      	mov	r1, r2
 8004568:	461a      	mov	r2, r3
 800456a:	4603      	mov	r3, r0
 800456c:	70fb      	strb	r3, [r7, #3]
 800456e:	460b      	mov	r3, r1
 8004570:	70bb      	strb	r3, [r7, #2]
 8004572:	4613      	mov	r3, r2
 8004574:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
 8004576:	7878      	ldrb	r0, [r7, #1]
 8004578:	78ba      	ldrb	r2, [r7, #2]
 800457a:	78f9      	ldrb	r1, [r7, #3]
 800457c:	2301      	movs	r3, #1
 800457e:	9300      	str	r3, [sp, #0]
 8004580:	4603      	mov	r3, r0
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f7ff ff4d 	bl	8004422 <u8g2_DrawHVLine>
}
 8004588:	bf00      	nop
 800458a:	3708      	adds	r7, #8
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	460b      	mov	r3, r1
 800459a:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	78fa      	ldrb	r2, [r7, #3]
 80045a0:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  if ( color >= 3 )
 80045a4:	78fb      	ldrb	r3, [r7, #3]
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d903      	bls.n	80045b2 <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
}
 80045b2:	bf00      	nop
 80045b4:	370c      	adds	r7, #12
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bc80      	pop	{r7}
 80045ba:	4770      	bx	lr

080045bc <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 80045bc:	b490      	push	{r4, r7}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	4604      	mov	r4, r0
 80045c4:	4608      	mov	r0, r1
 80045c6:	4611      	mov	r1, r2
 80045c8:	461a      	mov	r2, r3
 80045ca:	4623      	mov	r3, r4
 80045cc:	71fb      	strb	r3, [r7, #7]
 80045ce:	4603      	mov	r3, r0
 80045d0:	71bb      	strb	r3, [r7, #6]
 80045d2:	460b      	mov	r3, r1
 80045d4:	717b      	strb	r3, [r7, #5]
 80045d6:	4613      	mov	r3, r2
 80045d8:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 80045da:	797a      	ldrb	r2, [r7, #5]
 80045dc:	79bb      	ldrb	r3, [r7, #6]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d20d      	bcs.n	80045fe <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 80045e2:	793a      	ldrb	r2, [r7, #4]
 80045e4:	79fb      	ldrb	r3, [r7, #7]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d901      	bls.n	80045ee <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e014      	b.n	8004618 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 80045ee:	797a      	ldrb	r2, [r7, #5]
 80045f0:	793b      	ldrb	r3, [r7, #4]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d901      	bls.n	80045fa <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e00e      	b.n	8004618 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80045fa:	2300      	movs	r3, #0
 80045fc:	e00c      	b.n	8004618 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 80045fe:	793a      	ldrb	r2, [r7, #4]
 8004600:	79fb      	ldrb	r3, [r7, #7]
 8004602:	429a      	cmp	r2, r3
 8004604:	d907      	bls.n	8004616 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8004606:	797a      	ldrb	r2, [r7, #5]
 8004608:	793b      	ldrb	r3, [r7, #4]
 800460a:	429a      	cmp	r2, r3
 800460c:	d901      	bls.n	8004612 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 800460e:	2301      	movs	r3, #1
 8004610:	e002      	b.n	8004618 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8004612:	2300      	movs	r3, #0
 8004614:	e000      	b.n	8004618 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8004616:	2300      	movs	r3, #0
    }
  }
}
 8004618:	4618      	mov	r0, r3
 800461a:	3708      	adds	r7, #8
 800461c:	46bd      	mov	sp, r7
 800461e:	bc90      	pop	{r4, r7}
 8004620:	4770      	bx	lr

08004622 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b082      	sub	sp, #8
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
 800462a:	4608      	mov	r0, r1
 800462c:	4611      	mov	r1, r2
 800462e:	461a      	mov	r2, r3
 8004630:	4603      	mov	r3, r0
 8004632:	70fb      	strb	r3, [r7, #3]
 8004634:	460b      	mov	r3, r1
 8004636:	70bb      	strb	r3, [r7, #2]
 8004638:	4613      	mov	r3, r2
 800463a:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f893 0047 	ldrb.w	r0, [r3, #71]	; 0x47
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 8004648:	7c3b      	ldrb	r3, [r7, #16]
 800464a:	78ba      	ldrb	r2, [r7, #2]
 800464c:	f7ff ffb6 	bl	80045bc <u8g2_is_intersection_decision_tree>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <u8g2_IsIntersection+0x38>
    return 0; 
 8004656:	2300      	movs	r3, #0
 8004658:	e00a      	b.n	8004670 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 0045 	ldrb.w	r0, [r3, #69]	; 0x45
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
 8004666:	787b      	ldrb	r3, [r7, #1]
 8004668:	78fa      	ldrb	r2, [r7, #3]
 800466a:	f7ff ffa7 	bl	80045bc <u8g2_is_intersection_decision_tree>
 800466e:	4603      	mov	r3, r0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3708      	adds	r7, #8
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8004678:	b480      	push	{r7}
 800467a:	b087      	sub	sp, #28
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	4608      	mov	r0, r1
 8004682:	4611      	mov	r1, r2
 8004684:	461a      	mov	r2, r3
 8004686:	4603      	mov	r3, r0
 8004688:	70fb      	strb	r3, [r7, #3]
 800468a:	460b      	mov	r3, r1
 800468c:	70bb      	strb	r3, [r7, #2]
 800468e:	4613      	mov	r3, r2
 8004690:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8004692:	78bb      	ldrb	r3, [r7, #2]
 8004694:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8004696:	7cfb      	ldrb	r3, [r7, #19]
 8004698:	f003 0307 	and.w	r3, r3, #7
 800469c:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 800469e:	2301      	movs	r3, #1
 80046a0:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 80046a2:	7c3a      	ldrb	r2, [r7, #16]
 80046a4:	7cfb      	ldrb	r3, [r7, #19]
 80046a6:	fa02 f303 	lsl.w	r3, r2, r3
 80046aa:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 80046ac:	2300      	movs	r3, #0
 80046ae:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 80046b0:	2300      	movs	r3, #0
 80046b2:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d801      	bhi.n	80046c2 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 80046be:	7c3b      	ldrb	r3, [r7, #16]
 80046c0:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d001      	beq.n	80046d0 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 80046cc:	7c3b      	ldrb	r3, [r7, #16]
 80046ce:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 80046d0:	78bb      	ldrb	r3, [r7, #2]
 80046d2:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 80046d4:	89fb      	ldrh	r3, [r7, #14]
 80046d6:	f023 0307 	bic.w	r3, r3, #7
 80046da:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	7c1b      	ldrb	r3, [r3, #16]
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	89fa      	ldrh	r2, [r7, #14]
 80046e6:	fb02 f303 	mul.w	r3, r2, r3
 80046ea:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f0:	617b      	str	r3, [r7, #20]
  ptr += offset;
 80046f2:	89fb      	ldrh	r3, [r7, #14]
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	4413      	add	r3, r2
 80046f8:	617b      	str	r3, [r7, #20]
  ptr += x;
 80046fa:	78fb      	ldrb	r3, [r7, #3]
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	4413      	add	r3, r2
 8004700:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 8004702:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d117      	bne.n	800473a <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	781a      	ldrb	r2, [r3, #0]
 800470e:	7cbb      	ldrb	r3, [r7, #18]
 8004710:	4313      	orrs	r3, r2
 8004712:	b2da      	uxtb	r2, r3
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	781a      	ldrb	r2, [r3, #0]
 800471c:	7c7b      	ldrb	r3, [r7, #17]
 800471e:	4053      	eors	r3, r2
 8004720:	b2da      	uxtb	r2, r3
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	701a      	strb	r2, [r3, #0]
	ptr++;
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	3301      	adds	r3, #1
 800472a:	617b      	str	r3, [r7, #20]
	len--;
 800472c:	787b      	ldrb	r3, [r7, #1]
 800472e:	3b01      	subs	r3, #1
 8004730:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 8004732:	787b      	ldrb	r3, [r7, #1]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1e8      	bne.n	800470a <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8004738:	e039      	b.n	80047ae <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	781a      	ldrb	r2, [r3, #0]
 800473e:	7cbb      	ldrb	r3, [r7, #18]
 8004740:	4313      	orrs	r3, r2
 8004742:	b2da      	uxtb	r2, r3
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	781a      	ldrb	r2, [r3, #0]
 800474c:	7c7b      	ldrb	r3, [r7, #17]
 800474e:	4053      	eors	r3, r2
 8004750:	b2da      	uxtb	r2, r3
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8004756:	7cfb      	ldrb	r3, [r7, #19]
 8004758:	3301      	adds	r3, #1
 800475a:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 800475c:	7cfb      	ldrb	r3, [r7, #19]
 800475e:	f003 0307 	and.w	r3, r3, #7
 8004762:	74fb      	strb	r3, [r7, #19]
      len--;
 8004764:	787b      	ldrb	r3, [r7, #1]
 8004766:	3b01      	subs	r3, #1
 8004768:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 800476a:	7cfb      	ldrb	r3, [r7, #19]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d115      	bne.n	800479c <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004776:	461a      	mov	r2, r3
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	4413      	add	r3, r2
 800477c:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8004784:	2b01      	cmp	r3, #1
 8004786:	d801      	bhi.n	800478c <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 8004788:	2301      	movs	r3, #1
 800478a:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8004792:	2b01      	cmp	r3, #1
 8004794:	d008      	beq.n	80047a8 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 8004796:	2301      	movs	r3, #1
 8004798:	747b      	strb	r3, [r7, #17]
 800479a:	e005      	b.n	80047a8 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 800479c:	7cbb      	ldrb	r3, [r7, #18]
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 80047a2:	7c7b      	ldrb	r3, [r7, #17]
 80047a4:	005b      	lsls	r3, r3, #1
 80047a6:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 80047a8:	787b      	ldrb	r3, [r7, #1]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1c5      	bne.n	800473a <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 80047ae:	bf00      	nop
 80047b0:	371c      	adds	r7, #28
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bc80      	pop	{r7}
 80047b6:	4770      	bx	lr

080047b8 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  u8g2->clip_y0 = 0;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	22ff      	movs	r2, #255	; 0xff
 80047d4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	22ff      	movs	r2, #255	; 0xff
 80047dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  
  u8g2->cb->update_page_win(u8g2);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	4798      	blx	r3
}
 80047ea:	bf00      	nop
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b084      	sub	sp, #16
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	60f8      	str	r0, [r7, #12]
 80047fa:	60b9      	str	r1, [r7, #8]
 80047fc:	603b      	str	r3, [r7, #0]
 80047fe:	4613      	mov	r3, r2
 8004800:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	651a      	str	r2, [r3, #80]	; 0x50
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	631a      	str	r2, [r3, #48]	; 0x30
  
  u8g2->tile_buf_ptr = buf;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	68ba      	ldr	r2, [r7, #8]
 8004812:	639a      	str	r2, [r3, #56]	; 0x38
  u8g2->tile_buf_height = tile_buf_height;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	79fa      	ldrb	r2, [r7, #7]
 8004818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  u8g2->tile_curr_row = 0;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  u8g2->bitmap_transparency = 0;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
  
  u8g2->draw_color = 1;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  u8g2->is_auto_page_clear = 1;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
  
  u8g2->cb = u8g2_cb;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	69ba      	ldr	r2, [r7, #24]
 8004848:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->cb->update_dimension(u8g2);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f7ff ffaf 	bl	80047b8 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f7ff fd3c 	bl	80042d8 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
#endif
}
 8004868:	bf00      	nop
 800486a:	3710      	adds	r7, #16
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004884:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8004886:	7bfb      	ldrb	r3, [r7, #15]
 8004888:	00db      	lsls	r3, r3, #3
 800488a:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	7bfa      	ldrb	r2, [r7, #15]
 8004890:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  
  t = display_info->tile_width;
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	7c1b      	ldrb	r3, [r3, #16]
 8004898:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 800489a:	7bfb      	ldrb	r3, [r7, #15]
 800489c:	2b1f      	cmp	r3, #31
 800489e:	d901      	bls.n	80048a4 <u8g2_update_dimension_common+0x34>
    t = 31;
 80048a0:	231f      	movs	r3, #31
 80048a2:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 80048a4:	7bfb      	ldrb	r3, [r7, #15]
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	7bfa      	ldrb	r2, [r7, #15]
 80048ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_curr_row;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048b8:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80048ba:	7bfb      	ldrb	r3, [r7, #15]
 80048bc:	00db      	lsls	r3, r3, #3
 80048be:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	7bfa      	ldrb	r2, [r7, #15]
 80048c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  t = u8g2->tile_buf_height;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048ce:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 80048d0:	7bfb      	ldrb	r3, [r7, #15]
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 80048d8:	4413      	add	r3, r2
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	7c52      	ldrb	r2, [r2, #17]
 80048de:	4293      	cmp	r3, r2
 80048e0:	dd06      	ble.n	80048f0 <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	7c5a      	ldrb	r2, [r3, #17]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80048f0:	7bfb      	ldrb	r3, [r7, #15]
 80048f2:	00db      	lsls	r3, r3, #3
 80048f4:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->buf_y1 = u8g2->buf_y0;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8004914:	7bfb      	ldrb	r3, [r7, #15]
 8004916:	4413      	add	r3, r2
 8004918:	b2da      	uxtb	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	22f0      	movs	r2, #240	; 0xf0
 8004924:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  if ( display_info->pixel_width <= 240 )
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	8a9b      	ldrh	r3, [r3, #20]
 800492c:	2bf0      	cmp	r3, #240	; 0xf0
 800492e:	d805      	bhi.n	800493c <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	8a9b      	ldrh	r3, [r3, #20]
 8004934:	b2da      	uxtb	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->height = display_info->pixel_height;
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	8adb      	ldrh	r3, [r3, #22]
 8004940:	b2da      	uxtb	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
#endif

}
 8004948:	bf00      	nop
 800494a:	3714      	adds	r7, #20
 800494c:	46bd      	mov	sp, r7
 800494e:	bc80      	pop	{r7}
 8004950:	4770      	bx	lr

08004952 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b084      	sub	sp, #16
 8004956:	af02      	add	r7, sp, #8
 8004958:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004972:	9300      	str	r3, [sp, #0]
 8004974:	4603      	mov	r3, r0
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f7ff fe53 	bl	8004622 <u8g2_IsIntersection>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d104      	bne.n	800498c <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 800498a:	e03b      	b.n	8004a04 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d205      	bcs.n	80049b0 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80049bc:	429a      	cmp	r2, r3
 80049be:	d905      	bls.n	80049cc <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80049d8:	429a      	cmp	r2, r3
 80049da:	d205      	bcs.n	80049e8 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d905      	bls.n	8004a04 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 8004a04:	bf00      	nop
 8004a06:	3708      	adds	r7, #8
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f7ff ff2b 	bl	8004870 <u8g2_update_dimension_common>
}
 8004a1a:	bf00      	nop
 8004a1c:	3708      	adds	r7, #8
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b082      	sub	sp, #8
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  
  u8g2->user_y0 = u8g2->buf_y0;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  u8g2->user_y1 = u8g2->buf_y1;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f7ff ff7b 	bl	8004952 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8004a5c:	bf00      	nop
 8004a5e:	3708      	adds	r7, #8
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af02      	add	r7, sp, #8
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	4608      	mov	r0, r1
 8004a6e:	4611      	mov	r1, r2
 8004a70:	461a      	mov	r2, r3
 8004a72:	4603      	mov	r3, r0
 8004a74:	70fb      	strb	r3, [r7, #3]
 8004a76:	460b      	mov	r3, r1
 8004a78:	70bb      	strb	r3, [r7, #2]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	707b      	strb	r3, [r7, #1]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8004a7e:	7878      	ldrb	r0, [r7, #1]
 8004a80:	78ba      	ldrb	r2, [r7, #2]
 8004a82:	78f9      	ldrb	r1, [r7, #3]
 8004a84:	7c3b      	ldrb	r3, [r7, #16]
 8004a86:	9300      	str	r3, [sp, #0]
 8004a88:	4603      	mov	r3, r0
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f7ff fca8 	bl	80043e0 <u8g2_draw_hv_line_2dir>
}
 8004a90:	bf00      	nop
 8004a92:	3708      	adds	r7, #8
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bc80      	pop	{r7}
 8004ab0:	4770      	bx	lr

08004ab2 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b083      	sub	sp, #12
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
 8004aba:	460b      	mov	r3, r1
 8004abc:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8004abe:	78fb      	ldrb	r3, [r7, #3]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d002      	beq.n	8004aca <u8x8_ascii_next+0x18>
 8004ac4:	78fb      	ldrb	r3, [r7, #3]
 8004ac6:	2b0a      	cmp	r3, #10
 8004ac8:	d102      	bne.n	8004ad0 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8004aca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004ace:	e001      	b.n	8004ad4 <u8x8_ascii_next+0x22>
  return b;
 8004ad0:	78fb      	ldrb	r3, [r7, #3]
 8004ad2:	b29b      	uxth	r3, r3
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bc80      	pop	{r7}
 8004adc:	4770      	bx	lr

08004ade <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8004ade:	b590      	push	{r4, r7, lr}
 8004ae0:	b085      	sub	sp, #20
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	60f8      	str	r0, [r7, #12]
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	607a      	str	r2, [r7, #4]
 8004aea:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	691c      	ldr	r4, [r3, #16]
 8004af0:	7afa      	ldrb	r2, [r7, #11]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2117      	movs	r1, #23
 8004af6:	68f8      	ldr	r0, [r7, #12]
 8004af8:	47a0      	blx	r4
 8004afa:	4603      	mov	r3, r0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3714      	adds	r7, #20
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd90      	pop	{r4, r7, pc}

08004b04 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8004b10:	1cfb      	adds	r3, r7, #3
 8004b12:	461a      	mov	r2, r3
 8004b14:	2101      	movs	r1, #1
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7ff ffe1 	bl	8004ade <u8x8_byte_SendBytes>
 8004b1c:	4603      	mov	r3, r0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 8004b26:	b590      	push	{r4, r7, lr}
 8004b28:	b083      	sub	sp, #12
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	691c      	ldr	r4, [r3, #16]
 8004b32:	2300      	movs	r3, #0
 8004b34:	2200      	movs	r2, #0
 8004b36:	2118      	movs	r1, #24
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	47a0      	blx	r4
 8004b3c:	4603      	mov	r3, r0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd90      	pop	{r4, r7, pc}

08004b46 <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 8004b46:	b590      	push	{r4, r7, lr}
 8004b48:	b083      	sub	sp, #12
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	691c      	ldr	r4, [r3, #16]
 8004b52:	2300      	movs	r3, #0
 8004b54:	2200      	movs	r2, #0
 8004b56:	2119      	movs	r1, #25
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	47a0      	blx	r4
 8004b5c:	4603      	mov	r3, r0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd90      	pop	{r4, r7, pc}

08004b66 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8004b66:	b590      	push	{r4, r7, lr}
 8004b68:	b083      	sub	sp, #12
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
 8004b6e:	460b      	mov	r3, r1
 8004b70:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	68dc      	ldr	r4, [r3, #12]
 8004b76:	78fa      	ldrb	r2, [r7, #3]
 8004b78:	2300      	movs	r3, #0
 8004b7a:	2115      	movs	r1, #21
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	47a0      	blx	r4
 8004b80:	4603      	mov	r3, r0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	370c      	adds	r7, #12
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd90      	pop	{r4, r7, pc}

08004b8a <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8004b8a:	b590      	push	{r4, r7, lr}
 8004b8c:	b083      	sub	sp, #12
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
 8004b92:	460b      	mov	r3, r1
 8004b94:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68dc      	ldr	r4, [r3, #12]
 8004b9a:	78fa      	ldrb	r2, [r7, #3]
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	2116      	movs	r1, #22
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	47a0      	blx	r4
 8004ba4:	4603      	mov	r3, r0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd90      	pop	{r4, r7, pc}

08004bae <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8004bae:	b590      	push	{r4, r7, lr}
 8004bb0:	b085      	sub	sp, #20
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	60f8      	str	r0, [r7, #12]
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	607a      	str	r2, [r7, #4]
 8004bba:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	68dc      	ldr	r4, [r3, #12]
 8004bc0:	7afa      	ldrb	r2, [r7, #11]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2117      	movs	r1, #23
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	47a0      	blx	r4
 8004bca:	4603      	mov	r3, r0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3714      	adds	r7, #20
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd90      	pop	{r4, r7, pc}

08004bd4 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8004bd4:	b590      	push	{r4, r7, lr}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68dc      	ldr	r4, [r3, #12]
 8004be0:	2300      	movs	r3, #0
 8004be2:	2200      	movs	r2, #0
 8004be4:	2118      	movs	r1, #24
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	47a0      	blx	r4
 8004bea:	4603      	mov	r3, r0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd90      	pop	{r4, r7, pc}

08004bf4 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8004bf4:	b590      	push	{r4, r7, lr}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68dc      	ldr	r4, [r3, #12]
 8004c00:	2300      	movs	r3, #0
 8004c02:	2200      	movs	r2, #0
 8004c04:	2119      	movs	r1, #25
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	47a0      	blx	r4
 8004c0a:	4603      	mov	r3, r0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd90      	pop	{r4, r7, pc}

08004c14 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8004c14:	b590      	push	{r4, r7, lr}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	73fb      	strb	r3, [r7, #15]
    data++;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	3301      	adds	r3, #1
 8004c28:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8004c2a:	7bfb      	ldrb	r3, [r7, #15]
 8004c2c:	2b17      	cmp	r3, #23
 8004c2e:	d017      	beq.n	8004c60 <u8x8_cad_SendSequence+0x4c>
 8004c30:	2b17      	cmp	r3, #23
 8004c32:	dc02      	bgt.n	8004c3a <u8x8_cad_SendSequence+0x26>
 8004c34:	2b15      	cmp	r3, #21
 8004c36:	db37      	blt.n	8004ca8 <u8x8_cad_SendSequence+0x94>
 8004c38:	e004      	b.n	8004c44 <u8x8_cad_SendSequence+0x30>
 8004c3a:	2b19      	cmp	r3, #25
 8004c3c:	dd1e      	ble.n	8004c7c <u8x8_cad_SendSequence+0x68>
 8004c3e:	2bfe      	cmp	r3, #254	; 0xfe
 8004c40:	d024      	beq.n	8004c8c <u8x8_cad_SendSequence+0x78>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8004c42:	e031      	b.n	8004ca8 <u8x8_cad_SendSequence+0x94>
	  v = *data;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	68dc      	ldr	r4, [r3, #12]
 8004c4e:	7bba      	ldrb	r2, [r7, #14]
 8004c50:	7bf9      	ldrb	r1, [r7, #15]
 8004c52:	2300      	movs	r3, #0
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	47a0      	blx	r4
	  data++;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	603b      	str	r3, [r7, #0]
	  break;
 8004c5e:	e022      	b.n	8004ca6 <u8x8_cad_SendSequence+0x92>
	  v = *data;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8004c66:	f107 030e 	add.w	r3, r7, #14
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	2101      	movs	r1, #1
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7ff ff9d 	bl	8004bae <u8x8_cad_SendData>
	  data++;
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	3301      	adds	r3, #1
 8004c78:	603b      	str	r3, [r7, #0]
	  break;
 8004c7a:	e014      	b.n	8004ca6 <u8x8_cad_SendSequence+0x92>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	68dc      	ldr	r4, [r3, #12]
 8004c80:	7bf9      	ldrb	r1, [r7, #15]
 8004c82:	2300      	movs	r3, #0
 8004c84:	2200      	movs	r2, #0
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	47a0      	blx	r4
	  break;
 8004c8a:	e00c      	b.n	8004ca6 <u8x8_cad_SendSequence+0x92>
	  v = *data;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8004c92:	7bbb      	ldrb	r3, [r7, #14]
 8004c94:	461a      	mov	r2, r3
 8004c96:	2129      	movs	r1, #41	; 0x29
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 fa0d 	bl	80050b8 <u8x8_gpio_call>
	  data++;
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	603b      	str	r3, [r7, #0]
	  break;
 8004ca4:	bf00      	nop
    cmd = *data;
 8004ca6:	e7ba      	b.n	8004c1e <u8x8_cad_SendSequence+0xa>
	return;
 8004ca8:	bf00      	nop
    }
  }
}
 8004caa:	3714      	adds	r7, #20
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd90      	pop	{r4, r7, pc}

08004cb0 <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 8004cb0:	b590      	push	{r4, r7, lr}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	460b      	mov	r3, r1
 8004cba:	607a      	str	r2, [r7, #4]
 8004cbc:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f7ff ff31 	bl	8004b26 <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 8004cc4:	2140      	movs	r1, #64	; 0x40
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f7ff ff1c 	bl	8004b04 <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	691c      	ldr	r4, [r3, #16]
 8004cd0:	7afa      	ldrb	r2, [r7, #11]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2117      	movs	r1, #23
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 8004cda:	68f8      	ldr	r0, [r7, #12]
 8004cdc:	f7ff ff33 	bl	8004b46 <u8x8_byte_EndTransfer>
}
 8004ce0:	bf00      	nop
 8004ce2:	3714      	adds	r7, #20
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd90      	pop	{r4, r7, pc}

08004ce8 <u8x8_cad_ssd13xx_i2c>:

uint8_t u8x8_cad_ssd13xx_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004ce8:	b590      	push	{r4, r7, lr}
 8004cea:	b087      	sub	sp, #28
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	607b      	str	r3, [r7, #4]
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	72fb      	strb	r3, [r7, #11]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	72bb      	strb	r3, [r7, #10]
  uint8_t *p;
  switch(msg)
 8004cfa:	7afb      	ldrb	r3, [r7, #11]
 8004cfc:	3b14      	subs	r3, #20
 8004cfe:	2b05      	cmp	r3, #5
 8004d00:	d848      	bhi.n	8004d94 <u8x8_cad_ssd13xx_i2c+0xac>
 8004d02:	a201      	add	r2, pc, #4	; (adr r2, 8004d08 <u8x8_cad_ssd13xx_i2c+0x20>)
 8004d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d08:	08004d71 	.word	0x08004d71
 8004d0c:	08004d21 	.word	0x08004d21
 8004d10:	08004d21 	.word	0x08004d21
 8004d14:	08004d41 	.word	0x08004d41
 8004d18:	08004d99 	.word	0x08004d99
 8004d1c:	08004d99 	.word	0x08004d99
  {
    case U8X8_MSG_CAD_SEND_CMD:
    case U8X8_MSG_CAD_SEND_ARG:
      /* 7 Nov 2016: Can this be improved?  */
      //u8x8_byte_SetDC(u8x8, 0);
      u8x8_byte_StartTransfer(u8x8);
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f7ff ff00 	bl	8004b26 <u8x8_byte_StartTransfer>
      //u8x8_byte_SendByte(u8x8, u8x8_GetI2CAddress(u8x8));
      u8x8_byte_SendByte(u8x8, 0x000);
 8004d26:	2100      	movs	r1, #0
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	f7ff feeb 	bl	8004b04 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 8004d2e:	7abb      	ldrb	r3, [r7, #10]
 8004d30:	4619      	mov	r1, r3
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	f7ff fee6 	bl	8004b04 <u8x8_byte_SendByte>
      u8x8_byte_EndTransfer(u8x8);      
 8004d38:	68f8      	ldr	r0, [r7, #12]
 8004d3a:	f7ff ff04 	bl	8004b46 <u8x8_byte_EndTransfer>
      break;
 8004d3e:	e02c      	b.n	8004d9a <u8x8_cad_ssd13xx_i2c+0xb2>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8004d44:	e00a      	b.n	8004d5c <u8x8_cad_ssd13xx_i2c+0x74>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	2118      	movs	r1, #24
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f7ff ffb0 	bl	8004cb0 <u8x8_i2c_data_transfer>
	arg_int-=24;
 8004d50:	7abb      	ldrb	r3, [r7, #10]
 8004d52:	3b18      	subs	r3, #24
 8004d54:	72bb      	strb	r3, [r7, #10]
	p+=24;
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	3318      	adds	r3, #24
 8004d5a:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8004d5c:	7abb      	ldrb	r3, [r7, #10]
 8004d5e:	2b18      	cmp	r3, #24
 8004d60:	d8f1      	bhi.n	8004d46 <u8x8_cad_ssd13xx_i2c+0x5e>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 8004d62:	7abb      	ldrb	r3, [r7, #10]
 8004d64:	697a      	ldr	r2, [r7, #20]
 8004d66:	4619      	mov	r1, r3
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f7ff ffa1 	bl	8004cb0 <u8x8_i2c_data_transfer>
      break;
 8004d6e:	e014      	b.n	8004d9a <u8x8_cad_ssd13xx_i2c+0xb2>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d76:	2bff      	cmp	r3, #255	; 0xff
 8004d78:	d103      	bne.n	8004d82 <u8x8_cad_ssd13xx_i2c+0x9a>
	u8x8->i2c_address = 0x078;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2278      	movs	r2, #120	; 0x78
 8004d7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	691c      	ldr	r4, [r3, #16]
 8004d86:	7aba      	ldrb	r2, [r7, #10]
 8004d88:	7af9      	ldrb	r1, [r7, #11]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	47a0      	blx	r4
 8004d90:	4603      	mov	r3, r0
 8004d92:	e003      	b.n	8004d9c <u8x8_cad_ssd13xx_i2c+0xb4>
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      /* cad transfer commands are ignored */
      break;
    default:
      return 0;
 8004d94:	2300      	movs	r3, #0
 8004d96:	e001      	b.n	8004d9c <u8x8_cad_ssd13xx_i2c+0xb4>
      break;
 8004d98:	bf00      	nop
  }
  return 1;
 8004d9a:	2301      	movs	r3, #1
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	371c      	adds	r7, #28
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd90      	pop	{r4, r7, pc}

08004da4 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b086      	sub	sp, #24
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	607b      	str	r3, [r7, #4]
 8004dae:	460b      	mov	r3, r1
 8004db0:	72fb      	strb	r3, [r7, #11]
 8004db2:	4613      	mov	r3, r2
 8004db4:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8004db6:	7afb      	ldrb	r3, [r7, #11]
 8004db8:	3b0b      	subs	r3, #11
 8004dba:	2b04      	cmp	r3, #4
 8004dbc:	f200 808a 	bhi.w	8004ed4 <u8x8_d_ssd1306_sh1106_generic+0x130>
 8004dc0:	a201      	add	r2, pc, #4	; (adr r2, 8004dc8 <u8x8_d_ssd1306_sh1106_generic+0x24>)
 8004dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc6:	bf00      	nop
 8004dc8:	08004ddd 	.word	0x08004ddd
 8004dcc:	08004ed5 	.word	0x08004ed5
 8004dd0:	08004df7 	.word	0x08004df7
 8004dd4:	08004e29 	.word	0x08004e29
 8004dd8:	08004e49 	.word	0x08004e49
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8004ddc:	7abb      	ldrb	r3, [r7, #10]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d104      	bne.n	8004dec <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 8004de2:	4940      	ldr	r1, [pc, #256]	; (8004ee4 <u8x8_d_ssd1306_sh1106_generic+0x140>)
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f7ff ff15 	bl	8004c14 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 8004dea:	e075      	b.n	8004ed8 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 8004dec:	493e      	ldr	r1, [pc, #248]	; (8004ee8 <u8x8_d_ssd1306_sh1106_generic+0x144>)
 8004dee:	68f8      	ldr	r0, [r7, #12]
 8004df0:	f7ff ff10 	bl	8004c14 <u8x8_cad_SendSequence>
      break;
 8004df4:	e070      	b.n	8004ed8 <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8004df6:	7abb      	ldrb	r3, [r7, #10]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d10a      	bne.n	8004e12 <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 8004dfc:	493b      	ldr	r1, [pc, #236]	; (8004eec <u8x8_d_ssd1306_sh1106_generic+0x148>)
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f7ff ff08 	bl	8004c14 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	7c9a      	ldrb	r2, [r3, #18]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8004e10:	e062      	b.n	8004ed8 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 8004e12:	4937      	ldr	r1, [pc, #220]	; (8004ef0 <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f7ff fefd 	bl	8004c14 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	7cda      	ldrb	r2, [r3, #19]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8004e26:	e057      	b.n	8004ed8 <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	f7ff fed3 	bl	8004bd4 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8004e2e:	2181      	movs	r1, #129	; 0x81
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f7ff fe98 	bl	8004b66 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 8004e36:	7abb      	ldrb	r3, [r7, #10]
 8004e38:	4619      	mov	r1, r3
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f7ff fea5 	bl	8004b8a <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f7ff fed7 	bl	8004bf4 <u8x8_cad_EndTransfer>
      break;
 8004e46:	e047      	b.n	8004ed8 <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	f7ff fec3 	bl	8004bd4 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	795b      	ldrb	r3, [r3, #5]
 8004e52:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8004e54:	7dfb      	ldrb	r3, [r7, #23]
 8004e56:	00db      	lsls	r3, r3, #3
 8004e58:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8004e60:	7dfb      	ldrb	r3, [r7, #23]
 8004e62:	4413      	add	r3, r2
 8004e64:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 8004e66:	2140      	movs	r1, #64	; 0x40
 8004e68:	68f8      	ldr	r0, [r7, #12]
 8004e6a:	f7ff fe7c 	bl	8004b66 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8004e6e:	7dfb      	ldrb	r3, [r7, #23]
 8004e70:	091b      	lsrs	r3, r3, #4
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	f043 0310 	orr.w	r3, r3, #16
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f7ff fe72 	bl	8004b66 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 8004e82:	7dfb      	ldrb	r3, [r7, #23]
 8004e84:	f003 030f 	and.w	r3, r3, #15
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f7ff fe7c 	bl	8004b8a <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	799b      	ldrb	r3, [r3, #6]
 8004e96:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f7ff fe73 	bl	8004b8a <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	791b      	ldrb	r3, [r3, #4]
 8004ea8:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8004eb0:	7dbb      	ldrb	r3, [r7, #22]
 8004eb2:	00db      	lsls	r3, r3, #3
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	4619      	mov	r1, r3
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f7ff fe77 	bl	8004bae <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8004ec0:	7abb      	ldrb	r3, [r7, #10]
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8004ec6:	7abb      	ldrb	r3, [r7, #10]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1eb      	bne.n	8004ea4 <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f7ff fe91 	bl	8004bf4 <u8x8_cad_EndTransfer>
      break;
 8004ed2:	e001      	b.n	8004ed8 <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	e000      	b.n	8004eda <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 8004ed8:	2301      	movs	r3, #1
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3718      	adds	r7, #24
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	08007b5c 	.word	0x08007b5c
 8004ee8:	08007b64 	.word	0x08007b64
 8004eec:	08007b6c 	.word	0x08007b6c
 8004ef0:	08007b74 	.word	0x08007b74

08004ef4 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	607b      	str	r3, [r7, #4]
 8004efe:	460b      	mov	r3, r1
 8004f00:	72fb      	strb	r3, [r7, #11]
 8004f02:	4613      	mov	r3, r2
 8004f04:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8004f06:	7aba      	ldrb	r2, [r7, #10]
 8004f08:	7af9      	ldrb	r1, [r7, #11]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f7ff ff49 	bl	8004da4 <u8x8_d_ssd1306_sh1106_generic>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d001      	beq.n	8004f1c <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e014      	b.n	8004f46 <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 8004f1c:	7afb      	ldrb	r3, [r7, #11]
 8004f1e:	2b09      	cmp	r3, #9
 8004f20:	d009      	beq.n	8004f36 <u8x8_d_ssd1306_128x64_noname+0x42>
 8004f22:	2b0a      	cmp	r3, #10
 8004f24:	d10c      	bne.n	8004f40 <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	f000 f829 	bl	8004f7e <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 8004f2c:	4908      	ldr	r1, [pc, #32]	; (8004f50 <u8x8_d_ssd1306_128x64_noname+0x5c>)
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	f7ff fe70 	bl	8004c14 <u8x8_cad_SendSequence>
      break;
 8004f34:	e006      	b.n	8004f44 <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 8004f36:	4907      	ldr	r1, [pc, #28]	; (8004f54 <u8x8_d_ssd1306_128x64_noname+0x60>)
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f000 f80d 	bl	8004f58 <u8x8_d_helper_display_setup_memory>
      break;
 8004f3e:	e001      	b.n	8004f44 <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 8004f40:	2300      	movs	r3, #0
 8004f42:	e000      	b.n	8004f46 <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 8004f44:	2301      	movs	r3, #1
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	08007b24 	.word	0x08007b24
 8004f54:	08007b7c 	.word	0x08007b7c

08004f58 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	683a      	ldr	r2, [r7, #0]
 8004f66:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	7c9a      	ldrb	r2, [r3, #18]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bc80      	pop	{r7}
 8004f7c:	4770      	bx	lr

08004f7e <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8004f7e:	b590      	push	{r4, r7, lr}
 8004f80:	b083      	sub	sp, #12
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	695c      	ldr	r4, [r3, #20]
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	2128      	movs	r1, #40	; 0x28
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	68dc      	ldr	r4, [r3, #12]
 8004f98:	2300      	movs	r3, #0
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	2114      	movs	r1, #20
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	214b      	movs	r1, #75	; 0x4b
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f886 	bl	80050b8 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	791b      	ldrb	r3, [r3, #4]
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	2129      	movs	r1, #41	; 0x29
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f87e 	bl	80050b8 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	214b      	movs	r1, #75	; 0x4b
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 f879 	bl	80050b8 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	791b      	ldrb	r3, [r3, #4]
 8004fcc:	461a      	mov	r2, r3
 8004fce:	2129      	movs	r1, #41	; 0x29
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 f871 	bl	80050b8 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	214b      	movs	r1, #75	; 0x4b
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f86c 	bl	80050b8 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	795b      	ldrb	r3, [r3, #5]
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	2129      	movs	r1, #41	; 0x29
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f864 	bl	80050b8 <u8x8_gpio_call>
}    
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd90      	pop	{r4, r7, pc}

08004ff8 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8004ff8:	b590      	push	{r4, r7, lr}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	4608      	mov	r0, r1
 8005002:	4611      	mov	r1, r2
 8005004:	461a      	mov	r2, r3
 8005006:	4603      	mov	r3, r0
 8005008:	70fb      	strb	r3, [r7, #3]
 800500a:	460b      	mov	r3, r1
 800500c:	70bb      	strb	r3, [r7, #2]
 800500e:	4613      	mov	r3, r2
 8005010:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8005012:	78fb      	ldrb	r3, [r7, #3]
 8005014:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8005016:	78bb      	ldrb	r3, [r7, #2]
 8005018:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 800501a:	787b      	ldrb	r3, [r7, #1]
 800501c:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 800501e:	6a3b      	ldr	r3, [r7, #32]
 8005020:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	689c      	ldr	r4, [r3, #8]
 8005026:	f107 0308 	add.w	r3, r7, #8
 800502a:	2201      	movs	r2, #1
 800502c:	210f      	movs	r1, #15
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	47a0      	blx	r4
 8005032:	4603      	mov	r3, r0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	bd90      	pop	{r4, r7, pc}

0800503c <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 800503c:	b590      	push	{r4, r7, lr}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	689c      	ldr	r4, [r3, #8]
 8005048:	2300      	movs	r3, #0
 800504a:	2200      	movs	r2, #0
 800504c:	2109      	movs	r1, #9
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	47a0      	blx	r4
}
 8005052:	bf00      	nop
 8005054:	370c      	adds	r7, #12
 8005056:	46bd      	mov	sp, r7
 8005058:	bd90      	pop	{r4, r7, pc}

0800505a <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 800505a:	b590      	push	{r4, r7, lr}
 800505c:	b083      	sub	sp, #12
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	689c      	ldr	r4, [r3, #8]
 8005066:	2300      	movs	r3, #0
 8005068:	2200      	movs	r2, #0
 800506a:	210a      	movs	r1, #10
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	47a0      	blx	r4
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	bd90      	pop	{r4, r7, pc}

08005078 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8005078:	b590      	push	{r4, r7, lr}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	460b      	mov	r3, r1
 8005082:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	689c      	ldr	r4, [r3, #8]
 8005088:	78fa      	ldrb	r2, [r7, #3]
 800508a:	2300      	movs	r3, #0
 800508c:	210b      	movs	r1, #11
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	47a0      	blx	r4
}
 8005092:	bf00      	nop
 8005094:	370c      	adds	r7, #12
 8005096:	46bd      	mov	sp, r7
 8005098:	bd90      	pop	{r4, r7, pc}

0800509a <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 800509a:	b590      	push	{r4, r7, lr}
 800509c:	b083      	sub	sp, #12
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	689c      	ldr	r4, [r3, #8]
 80050a6:	2300      	movs	r3, #0
 80050a8:	2200      	movs	r2, #0
 80050aa:	2110      	movs	r1, #16
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	47a0      	blx	r4
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd90      	pop	{r4, r7, pc}

080050b8 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80050b8:	b590      	push	{r4, r7, lr}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	460b      	mov	r3, r1
 80050c2:	70fb      	strb	r3, [r7, #3]
 80050c4:	4613      	mov	r3, r2
 80050c6:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	695c      	ldr	r4, [r3, #20]
 80050cc:	78ba      	ldrb	r2, [r7, #2]
 80050ce:	78f9      	ldrb	r1, [r7, #3]
 80050d0:	2300      	movs	r3, #0
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	47a0      	blx	r4
}
 80050d6:	bf00      	nop
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd90      	pop	{r4, r7, pc}

080050de <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80050de:	b480      	push	{r7}
 80050e0:	b085      	sub	sp, #20
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	60f8      	str	r0, [r7, #12]
 80050e6:	607b      	str	r3, [r7, #4]
 80050e8:	460b      	mov	r3, r1
 80050ea:	72fb      	strb	r3, [r7, #11]
 80050ec:	4613      	mov	r3, r2
 80050ee:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3714      	adds	r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bc80      	pop	{r7}
 80050fa:	4770      	bx	lr

080050fc <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a11      	ldr	r2, [pc, #68]	; (8005154 <u8x8_SetupDefaults+0x58>)
 800510e:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a10      	ldr	r2, [pc, #64]	; (8005154 <u8x8_SetupDefaults+0x58>)
 8005114:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a0e      	ldr	r2, [pc, #56]	; (8005154 <u8x8_SetupDefaults+0x58>)
 800511a:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a0d      	ldr	r2, [pc, #52]	; (8005154 <u8x8_SetupDefaults+0x58>)
 8005120:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    u8x8->device_address = 0;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    u8x8->i2c_address = 255;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	22ff      	movs	r2, #255	; 0xff
 800513e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	22ff      	movs	r2, #255	; 0xff
 8005146:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 800514a:	bf00      	nop
 800514c:	370c      	adds	r7, #12
 800514e:	46bd      	mov	sp, r7
 8005150:	bc80      	pop	{r7}
 8005152:	4770      	bx	lr
 8005154:	080050df 	.word	0x080050df

08005158 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
 8005164:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f7ff ffc8 	bl	80050fc <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	68ba      	ldr	r2, [r7, #8]
 8005170:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	683a      	ldr	r2, [r7, #0]
 800517c:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	69ba      	ldr	r2, [r7, #24]
 8005182:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f7ff ff59 	bl	800503c <u8x8_SetupMemory>
}
 800518a:	bf00      	nop
 800518c:	3710      	adds	r7, #16
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
	...

08005194 <__libc_init_array>:
 8005194:	b570      	push	{r4, r5, r6, lr}
 8005196:	2500      	movs	r5, #0
 8005198:	4e0c      	ldr	r6, [pc, #48]	; (80051cc <__libc_init_array+0x38>)
 800519a:	4c0d      	ldr	r4, [pc, #52]	; (80051d0 <__libc_init_array+0x3c>)
 800519c:	1ba4      	subs	r4, r4, r6
 800519e:	10a4      	asrs	r4, r4, #2
 80051a0:	42a5      	cmp	r5, r4
 80051a2:	d109      	bne.n	80051b8 <__libc_init_array+0x24>
 80051a4:	f000 f822 	bl	80051ec <_init>
 80051a8:	2500      	movs	r5, #0
 80051aa:	4e0a      	ldr	r6, [pc, #40]	; (80051d4 <__libc_init_array+0x40>)
 80051ac:	4c0a      	ldr	r4, [pc, #40]	; (80051d8 <__libc_init_array+0x44>)
 80051ae:	1ba4      	subs	r4, r4, r6
 80051b0:	10a4      	asrs	r4, r4, #2
 80051b2:	42a5      	cmp	r5, r4
 80051b4:	d105      	bne.n	80051c2 <__libc_init_array+0x2e>
 80051b6:	bd70      	pop	{r4, r5, r6, pc}
 80051b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80051bc:	4798      	blx	r3
 80051be:	3501      	adds	r5, #1
 80051c0:	e7ee      	b.n	80051a0 <__libc_init_array+0xc>
 80051c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80051c6:	4798      	blx	r3
 80051c8:	3501      	adds	r5, #1
 80051ca:	e7f2      	b.n	80051b2 <__libc_init_array+0x1e>
 80051cc:	08007b94 	.word	0x08007b94
 80051d0:	08007b94 	.word	0x08007b94
 80051d4:	08007b94 	.word	0x08007b94
 80051d8:	08007b98 	.word	0x08007b98

080051dc <memset>:
 80051dc:	4603      	mov	r3, r0
 80051de:	4402      	add	r2, r0
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d100      	bne.n	80051e6 <memset+0xa>
 80051e4:	4770      	bx	lr
 80051e6:	f803 1b01 	strb.w	r1, [r3], #1
 80051ea:	e7f9      	b.n	80051e0 <memset+0x4>

080051ec <_init>:
 80051ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ee:	bf00      	nop
 80051f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051f2:	bc08      	pop	{r3}
 80051f4:	469e      	mov	lr, r3
 80051f6:	4770      	bx	lr

080051f8 <_fini>:
 80051f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051fa:	bf00      	nop
 80051fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051fe:	bc08      	pop	{r3}
 8005200:	469e      	mov	lr, r3
 8005202:	4770      	bx	lr
